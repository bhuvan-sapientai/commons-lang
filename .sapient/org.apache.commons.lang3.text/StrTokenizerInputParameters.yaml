---
targetClass:
  fullClassName: "org.apache.commons.lang3.text.StrTokenizer"
methods:
- method:
    name: "getCSVInstance"
    sourceCodeSignature: "StrTokenizer getCSVInstance()"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    instructionFingerprint: "82BC177B1D8DADA6DB42D248A9F7F7ED"
  paths:
  - testPathName: "getCSVInstanceTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "NOT_NULL"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "objectNotNull"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.text.StrTokenizer"
- method:
    name: "getCSVInstance"
    sourceCodeSignature: "StrTokenizer getCSVInstance(final char[] input)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "input"
      type: "char[]"
    instructionFingerprint: "D4BBA66662FAF17A242E53601EC7B503"
  paths:
  - testPathName: "getCSVInstance1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "input"
    - sapientType: "NOT_NULL"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "objectNotNull"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.text.StrTokenizer"
- method:
    name: "getCSVInstance"
    sourceCodeSignature: "StrTokenizer getCSVInstance(final String input)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "input"
      type: "java.lang.String"
    instructionFingerprint: "2505CB6807CBB7BC216D2C4991DF4A3A"
  paths:
  - testPathName: "getCSVInstance2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "input"
    - sapientType: "NOT_NULL"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "objectNotNull"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.text.StrTokenizer"
- method:
    name: "getTSVInstance"
    sourceCodeSignature: "StrTokenizer getTSVInstance()"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    instructionFingerprint: "AF1B8FCE2CE904297B3E436F0C89DA92"
  paths:
  - testPathName: "getTSVInstanceTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "NOT_NULL"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "objectNotNull"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.text.StrTokenizer"
- method:
    name: "getTSVInstance"
    sourceCodeSignature: "StrTokenizer getTSVInstance(final char[] input)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "input"
      type: "char[]"
    instructionFingerprint: "83B9EBCBA8BA822B29D240EBA14B3A3D"
  paths:
  - testPathName: "getTSVInstance1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "input"
    - sapientType: "NOT_NULL"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "objectNotNull"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.text.StrTokenizer"
- method:
    name: "getTSVInstance"
    sourceCodeSignature: "StrTokenizer getTSVInstance(final String input)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "input"
      type: "java.lang.String"
    instructionFingerprint: "28960692FC3A9521C083C28CEF1695AC"
  paths:
  - testPathName: "getTSVInstance2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "input"
    - sapientType: "NOT_NULL"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "objectNotNull"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.text.StrTokenizer"
- method:
    name: "add"
    sourceCodeSignature: "void add(final String obj)"
    returnType: "void"
    parameters:
    - name: "obj"
      type: "java.lang.String"
    instructionFingerprint: "0E82609A90DC65E81F9CAADD31408743"
  paths:
  - testPathName: "addThrowsUnsupportedOperationException"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "RESULT"
      name: "result"
      valueUuid: "unsupportedOperationException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "obj1"
      valueType: "java.lang.String"
      uuid: "obj"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.UnsupportedOperationException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "add() is unsupported"
            valueType: "java.lang.String"
            uuid: "message"
      valueType: "java.lang.UnsupportedOperationException"
      uuid: "unsupportedOperationException"
- method:
    name: "clone"
    sourceCodeSignature: "Object clone()"
    returnType: "java.lang.Object"
    instructionFingerprint: "8365D3B81EF16AA0DEF6952C2E0B8480"
  paths:
  - testPathName: "cloneTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "cloneReset():object"
        throwsExceptions:
        - "java.lang.CloneNotSupportedException"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
  - testPathName: "cloneWhenCaughtCloneNotSupportedException"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "cloneReset():object"
        throwsExceptions:
        - "java.lang.CloneNotSupportedException"
    - type: "RESULT"
      name: "result"
      valueUuid: "object2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.CloneNotSupportedException"
        parameters: []
      valueType: "java.lang.CloneNotSupportedException"
      uuid: "object"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object2"
    branches:
    - lineNumber: 451
      expression: "catch-exception (CloneNotSupportedException)"
      range: "(451,11)-(451,52)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.CloneNotSupportedException"
- method:
    name: "cloneReset"
    sourceCodeSignature: "Object cloneReset()"
    returnType: "java.lang.Object"
    throwsExceptions:
    - "java.lang.CloneNotSupportedException"
    instructionFingerprint: "67862D0E9A4EA45E6991AA0427CB5231"
  paths:
  - testPathName: "cloneResetWhenClonedCharsIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_ACCESS_FAILURE"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "object"
    branches:
    - lineNumber: 466
      expression: "cloned.chars != null"
      range: "(466,13)-(466,32)"
      evaluatedAs: false
- method:
    name: "getContent"
    sourceCodeSignature: "String getContent()"
    returnType: "java.lang.String"
    instructionFingerprint: "B0B8E3BEAB576E9FA57F04BAF5F40199"
  paths:
  - testPathName: "getContentWhenCharsIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 479
      expression: "chars == null"
      range: "(479,13)-(479,25)"
      evaluatedAs: true
  - testPathName: "getContentWhenCharsIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 479
      expression: "chars == null"
      range: "(479,13)-(479,25)"
      evaluatedAs: false
- method:
    name: "getTokenArray"
    sourceCodeSignature: "String[] getTokenArray()"
    returnType: "java.lang.String[]"
    instructionFingerprint: "E04F0FBB71CEE1A847B3F9BB762FA6E2"
  paths:
  - testPathName: "getTokenArrayWhenCharsIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(srcChars,offset,count):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.String[].clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
  - testPathName: "getTokenArrayWhenCharsIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(charArray,offset,int4):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.String[].clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: false
      internalMethodName: "checkTokenized"
- method:
    name: "getTokenList"
    sourceCodeSignature: "List<String> getTokenList()"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    instructionFingerprint: "F728C088D10FA512FBE9978882900E79"
  paths:
  - testPathName: "getTokenListWhenCharsIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(srcChars,offset,count):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
  - testPathName: "getTokenListWhenCharsIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(charArray,offset,int4):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: false
      internalMethodName: "checkTokenized"
- method:
    name: "hasNext"
    sourceCodeSignature: "boolean hasNext()"
    returnType: "boolean"
    instructionFingerprint: "46152A659AD5CF70E802F97F6CBD0C03"
  paths:
  - testPathName: "hasNextWhenTokenPosLessThanTokensLength"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(srcChars,offset,count):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 567
      expression: "tokenPos < tokens.length"
      range: "(567,16)-(567,39)"
      evaluatedAs: true
  - testPathName: "hasNextWhenCharsIsNotNullAndTokenPosNotLessThanTokensLength"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(charArray,offset,int4):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: false
      internalMethodName: "checkTokenized"
    - lineNumber: 567
      expression: "tokenPos < tokens.length"
      range: "(567,16)-(567,39)"
      evaluatedAs: false
- method:
    name: "hasPrevious"
    sourceCodeSignature: "boolean hasPrevious()"
    returnType: "boolean"
    instructionFingerprint: "4A2126892213ECF812C0A1161124F9E0"
  paths:
  - testPathName: "hasPreviousWhenTokenPosNotGreaterThan0"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(srcChars,offset,count):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 578
      expression: "tokenPos > 0"
      range: "(578,16)-(578,27)"
      evaluatedAs: false
  - testPathName: "hasPreviousWhenCharsIsNotNullAndTokenPosNotGreaterThan0"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(charArray,offset,int4):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: false
      internalMethodName: "checkTokenized"
    - lineNumber: 578
      expression: "tokenPos > 0"
      range: "(578,16)-(578,27)"
      evaluatedAs: false
- method:
    name: "next"
    sourceCodeSignature: "String next()"
    returnType: "java.lang.String"
    instructionFingerprint: "370AB247EB7AB03C3BF6C80B4852CB55"
  paths:
  - testPathName: "nextWhenHasNext"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasNext():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 629
      expression: "hasNext()"
      range: "(629,13)-(629,21)"
      evaluatedAs: true
  - testPathName: "nextWhenHasNextNotThrowsNoSuchElementException"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasNext():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "noSuchElementException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.util.NoSuchElementException"
        parameters: []
      valueType: "java.util.NoSuchElementException"
      uuid: "noSuchElementException"
    branches:
    - lineNumber: 629
      expression: "hasNext()"
      range: "(629,13)-(629,21)"
      evaluatedAs: false
- method:
    name: "nextIndex"
    sourceCodeSignature: "int nextIndex()"
    returnType: "int"
    instructionFingerprint: "FEF11095E63E1C640204A8F5B90DFF9E"
  paths:
  - testPathName: "nextIndexTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "fieldint1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint1"
- method:
    name: "nextToken"
    sourceCodeSignature: "String nextToken()"
    returnType: "java.lang.String"
    instructionFingerprint: "69109438A60AF1A564DB74BF21A4A6F3"
  paths:
  - testPathName: "nextTokenWhenHasNext"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasNext():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 653
      expression: "hasNext()"
      range: "(653,13)-(653,21)"
      evaluatedAs: true
  - testPathName: "nextTokenWhenHasNextNot"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasNext():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 653
      expression: "hasNext()"
      range: "(653,13)-(653,21)"
      evaluatedAs: false
- method:
    name: "previous"
    sourceCodeSignature: "String previous()"
    returnType: "java.lang.String"
    instructionFingerprint: "99EF09DECFA3CC8BDF23415E741BA964"
  paths:
  - testPathName: "previousWhenHasPrevious"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasPrevious():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 666
      expression: "hasPrevious()"
      range: "(666,13)-(666,25)"
      evaluatedAs: true
  - testPathName: "previousWhenHasPreviousNotThrowsNoSuchElementException"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasPrevious():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "noSuchElementException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.util.NoSuchElementException"
        parameters: []
      valueType: "java.util.NoSuchElementException"
      uuid: "noSuchElementException"
    branches:
    - lineNumber: 666
      expression: "hasPrevious()"
      range: "(666,13)-(666,25)"
      evaluatedAs: false
- method:
    name: "previousIndex"
    sourceCodeSignature: "int previousIndex()"
    returnType: "int"
    instructionFingerprint: "3B39F113FD2BAB3295BB9B4192CFC598"
  paths:
  - testPathName: "previousIndexTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
- method:
    name: "previousToken"
    sourceCodeSignature: "String previousToken()"
    returnType: "java.lang.String"
    instructionFingerprint: "78C6B8DEE7265A9E44F790E6BD3C8161"
  paths:
  - testPathName: "previousTokenWhenHasPrevious"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasPrevious():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 688
      expression: "hasPrevious()"
      range: "(688,13)-(688,25)"
      evaluatedAs: true
  - testPathName: "previousTokenWhenHasPreviousNot"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "hasPrevious():boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 688
      expression: "hasPrevious()"
      range: "(688,13)-(688,25)"
      evaluatedAs: false
- method:
    name: "remove"
    sourceCodeSignature: "void remove()"
    returnType: "void"
    instructionFingerprint: "402BBFA476133A9A773F49E84CA18896"
  paths:
  - testPathName: "removeThrowsUnsupportedOperationException"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "unsupportedOperationException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.UnsupportedOperationException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "remove() is unsupported"
            valueType: "java.lang.String"
            uuid: "message"
      valueType: "java.lang.UnsupportedOperationException"
      uuid: "unsupportedOperationException"
- method:
    name: "reset"
    sourceCodeSignature: "StrTokenizer reset()"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    instructionFingerprint: "07DBBC73EB9080A00F0B6F45DA936B77"
  paths:
  - testPathName: "resetTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
- method:
    name: "reset"
    sourceCodeSignature: "StrTokenizer reset(final char[] input)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "input"
      type: "char[]"
    instructionFingerprint: "FBB17EAF6CC21362E1DA2329C39BE257"
  paths:
  - testPathName: "reset1Test"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input2"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "input"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
- method:
    name: "reset"
    sourceCodeSignature: "StrTokenizer reset(final String input)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "input"
      type: "java.lang.String"
    instructionFingerprint: "2C524FFFBEA35893B4F1D53D4FE1AFED"
  paths:
  - testPathName: "reset2WhenInputIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input2"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "input"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 883
      expression: "input != null"
      range: "(883,13)-(883,25)"
      evaluatedAs: true
  - testPathName: "reset2WhenInputIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input2"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "input"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 883
      expression: "input != null"
      range: "(883,13)-(883,25)"
      evaluatedAs: false
- method:
    name: "set"
    sourceCodeSignature: "void set(final String obj)"
    returnType: "void"
    parameters:
    - name: "obj"
      type: "java.lang.String"
    instructionFingerprint: "A5DA11BA8AAB4FA3804A2040E06E14C0"
  paths:
  - testPathName: "setThrowsUnsupportedOperationException"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "RESULT"
      name: "result"
      valueUuid: "unsupportedOperationException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "obj1"
      valueType: "java.lang.String"
      uuid: "obj"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.UnsupportedOperationException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "set() is unsupported"
            valueType: "java.lang.String"
            uuid: "message"
      valueType: "java.lang.UnsupportedOperationException"
      uuid: "unsupportedOperationException"
- method:
    name: "setDelimiterChar"
    sourceCodeSignature: "StrTokenizer setDelimiterChar(final char delim)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "delim"
      type: "char"
    instructionFingerprint: "4E7853AD20C8E5DD9FE46EECBD3A5AAD"
  paths:
  - testPathName: "setDelimiterCharTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "delim"
      valueUuid: "delim2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "setDelimiterMatcher(strMatcher24):strTokenizer20"
    - type: "RESULT"
      name: "result"
      valueUuid: "strTokenizer20"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim2"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delim2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "strTokenizer20"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "charMatcher"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim2"
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
- method:
    name: "setDelimiterMatcher"
    sourceCodeSignature: "StrTokenizer setDelimiterMatcher(final StrMatcher delim)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "delim"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "0C97A5959A401DB60399117122EFA84C"
  paths:
  - testPathName: "setDelimiterMatcherWhenDelimIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "delim"
      valueUuid: "strMatcher21"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim2"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher21"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 921
      expression: "delim == null"
      range: "(921,13)-(921,25)"
      evaluatedAs: true
- method:
    name: "setDelimiterString"
    sourceCodeSignature: "StrTokenizer setDelimiterString(final String delim)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "delim"
      type: "java.lang.String"
    instructionFingerprint: "E8492CF2B6B89E156E8395866223BD3E"
  paths:
  - testPathName: "setDelimiterStringTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "delim"
      valueUuid: "delim"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "setDelimiterMatcher(strMatcher24):strTokenizer20"
    - type: "RESULT"
      name: "result"
      valueUuid: "strTokenizer20"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim2"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "delim"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "strTokenizer20"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "stringMatcher"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "delim"
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
- method:
    name: "setEmptyTokenAsNull"
    sourceCodeSignature: "StrTokenizer setEmptyTokenAsNull(final boolean emptyAsNull)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "emptyAsNull"
      type: "boolean"
    instructionFingerprint: "E22CE68FE2FAE6BB0049A3E7D2C033A2"
  paths:
  - testPathName: "setEmptyTokenAsNullTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "emptyAsNull"
      valueUuid: "emptyAsNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "emptyAsNull"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
- method:
    name: "setIgnoredChar"
    sourceCodeSignature: "StrTokenizer setIgnoredChar(final char ignored)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "ignored"
      type: "char"
    instructionFingerprint: "1F598D5B0A94F0B375C7BA232F6F4E42"
  paths:
  - testPathName: "setIgnoredCharTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ignored"
      valueUuid: "ignored"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "setIgnoredMatcher(strMatcher24):strTokenizer20"
    - type: "RESULT"
      name: "result"
      valueUuid: "strTokenizer20"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ignored"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "strTokenizer20"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "charMatcher"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "ignored"
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
- method:
    name: "setIgnoredMatcher"
    sourceCodeSignature: "StrTokenizer setIgnoredMatcher(final StrMatcher ignored)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "ignored"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "ED7446F3B1D1DB1288D8A51AE633310E"
  paths:
  - testPathName: "setIgnoredMatcherWhenIgnoredIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ignored"
      valueUuid: "ignored"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    - type: "STATE_VERIFICATION_FIELD"
      name: "ignoredMatcher"
      valueUuid: "ignored"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "ignored"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 975
      expression: "ignored != null"
      range: "(975,13)-(975,27)"
      evaluatedAs: true
- method:
    name: "setIgnoreEmptyTokens"
    sourceCodeSignature: "StrTokenizer setIgnoreEmptyTokens(final boolean ignoreEmptyTokens)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "ignoreEmptyTokens"
      type: "boolean"
    instructionFingerprint: "67F7B55A275E574CDB92C8A3D34608AB"
  paths:
  - testPathName: "setIgnoreEmptyTokensTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ignoreEmptyTokens"
      valueUuid: "ignoreEmptyTokens"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    - type: "STATE_VERIFICATION_FIELD"
      name: "ignoreEmptyTokens"
      valueUuid: "ignoreEmptyTokens"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "ignoreEmptyTokens"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
- method:
    name: "setQuoteChar"
    sourceCodeSignature: "StrTokenizer setQuoteChar(final char quote)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "quote"
      type: "char"
    instructionFingerprint: "55BC281625C47A499A89E281E4EA2C98"
  paths:
  - testPathName: "setQuoteCharTest"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "quote"
      valueUuid: "quote2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "setQuoteMatcher(strMatcher24):strTokenizer20"
    - type: "RESULT"
      name: "result"
      valueUuid: "strTokenizer20"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote2"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "quote2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "strTokenizer20"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "charMatcher"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote2"
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
- method:
    name: "setQuoteMatcher"
    sourceCodeSignature: "StrTokenizer setQuoteMatcher(final StrMatcher quote)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "quote"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "21D965345A0021DB64D01E3B828607C6"
  paths:
  - testPathName: "setQuoteMatcherWhenQuoteIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "quote"
      valueUuid: "strMatcher23"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    - type: "STATE_VERIFICATION_FIELD"
      name: "quoteMatcher"
      valueUuid: "strMatcher23"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote2"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "charMatcher"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote2"
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher23"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1018
      expression: "quote != null"
      range: "(1018,13)-(1018,25)"
      evaluatedAs: true
- method:
    name: "setTrimmerMatcher"
    sourceCodeSignature: "StrTokenizer setTrimmerMatcher(final StrMatcher trimmer)"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    parameters:
    - name: "trimmer"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "223AC50D80A818C09E6CAFB91603AB36"
  paths:
  - testPathName: "setTrimmerMatcherWhenTrimmerIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "trimmer"
      valueUuid: "trimmer"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    - type: "STATE_VERIFICATION_FIELD"
      name: "trimmerMatcher"
      valueUuid: "trimmer"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "trimmer"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1035
      expression: "trimmer != null"
      range: "(1035,13)-(1035,27)"
      evaluatedAs: true
- method:
    name: "size"
    sourceCodeSignature: "int size()"
    returnType: "int"
    instructionFingerprint: "4CF9CA241E4C54CEDAAC159AD0950530"
  paths:
  - testPathName: "sizeWhenCharsIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(srcChars,offset,count):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "int4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
  - testPathName: "sizeWhenCharsIsNotNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "tokenize(charArray,offset,int4):list"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 428
      expression: "tokens == null"
      range: "(428,13)-(428,26)"
      evaluatedAs: true
      internalMethodName: "checkTokenized"
    - lineNumber: 429
      expression: "chars == null"
      range: "(429,17)-(429,29)"
      evaluatedAs: false
      internalMethodName: "checkTokenized"
- method:
    name: "tokenize"
    sourceCodeSignature: "List<String> tokenize(final char[] srcChars, final int offset,\
      \ final int count)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    parameters:
    - name: "srcChars"
      type: "char[]"
    - name: "offset"
      type: "int"
    - name: "count"
      type: "int"
    instructionFingerprint: "91AFA708491735CBDAC4DFF8FEDE1DD2"
  paths:
  - testPathName: "tokenizeWhenArrayUtilsIsEmptySrcChars"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "RESULT"
      name: "result"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: true
  - testPathName: "tokenizeWhenIsIgnoreEmptyTokensAndPosGreaterThanOrEqualsToCount"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
  - testPathName: "tokenizeWhenIsEmptyTokenAsNullNot"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
  - testPathName: "tokenizeWhenIsEmptyTokenAsNullAndPosGreaterThanOrEqualsToCount"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean4"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean7"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
        - sapientType: "NULL"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item1"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
  - testPathName: "tokenizeWhenIsEmptyTokenAsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
  - testPathName: "tokenizeWhenIsIgnoreEmptyTokensNotAndIsEmptyTokenAsNullAndPosGreaterThanOrEqualsToCount"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean4"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean7"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
        - sapientType: "NULL"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item1"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
  - testPathName: "tokenizeWhenIsIgnoreEmptyTokensAndPosGreaterThanOrEqualsToCountAndIsEmptyTokenAsNullNot"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher28"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher28"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 795
      expression: "delimLen > 0"
      range: "(795,21)-(795,32)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
  - testPathName: "tokenizeWhenStringUtilsIsEmptyTokAndIsIgnoreEmptyTokensNotAndIsEmptyTokenAsNullAndPosGreaterThanOrEqualsToCount"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher28"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean4"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean7"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher28"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
        - sapientType: "NULL"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item1"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 795
      expression: "delimLen > 0"
      range: "(795,21)-(795,32)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
  - testPathName: "tokenizeWhenStringUtilsIsEmptyTokAndIsIgnoreEmptyTokensAndPosGreaterThanOrEqualsToCountAndIsEmptyTokenAsNullNot"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher28"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher29"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher28"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher29"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 795
      expression: "delimLen > 0"
      range: "(795,21)-(795,32)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 802
      expression: "quoteLen > 0"
      range: "(802,21)-(802,32)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 810
      expression: "ignoredLen > 0"
      range: "(810,21)-(810,34)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
  - testPathName: "tokenizeWhenIsQuoteNotSrcCharsPosLenQuoteStartQuoteLenAndStringUtilsIsEmptyTokAndIsIgnoreEmptyTokensNotAndIsEmptyTokenA"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean4"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean7"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
        - sapientType: "NULL"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item1"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 613
      expression: "i < quoteLen"
      range: "(613,25)-(613,36)"
      evaluatedAs: true
      internalMethodName: "isQuote"
    - lineNumber: 614
      expression: "pos + i >= len"
      range: "(614,17)-(614,30)"
      evaluatedAs: false
      internalMethodName: "isQuote"
    - lineNumber: 614
      expression: "srcChars[pos + i] != srcChars[quoteStart + i]"
      range: "(614,35)-(614,79)"
      evaluatedAs: true
      internalMethodName: "isQuote"
    - lineNumber: 775
      expression: "isQuote(srcChars, pos, len, quoteStart, quoteLen)"
      range: "(775,21)-(775,69)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
  - testPathName: "tokenizeWhenTrimmedLenGreaterThan0AndStringUtilsIsEmptyTokAndIsIgnoreEmptyTokensNotAndIsEmptyTokenAsNullAndPosGreaterTh"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher28"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher29"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher30"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean4"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean7"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher28"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher29"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher30"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
        - sapientType: "NULL"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item1"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 795
      expression: "delimLen > 0"
      range: "(795,21)-(795,32)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 802
      expression: "quoteLen > 0"
      range: "(802,21)-(802,32)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 810
      expression: "ignoredLen > 0"
      range: "(810,21)-(810,34)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 819
      expression: "trimmedLen > 0"
      range: "(819,21)-(819,34)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
  - testPathName: "tokenizeWhenStringUtilsNotIsEmptyTokAndPosGreaterThanOrEqualsToCountAndIsIgnoreEmptyTokensNotAndIsEmptyTokenAsNullNot"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher28"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher29"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher30"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char1"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher28"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher29"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher30"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "A"
          valueType: "java.lang.String"
          uuid: "string"
        - sapientType: "BASIC"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "tok"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 795
      expression: "delimLen > 0"
      range: "(795,21)-(795,32)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 802
      expression: "quoteLen > 0"
      range: "(802,21)-(802,32)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 810
      expression: "ignoredLen > 0"
      range: "(810,21)-(810,34)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 819
      expression: "trimmedLen > 0"
      range: "(819,21)-(819,34)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
  - testPathName: "tokenizeWhenIsQuoteSrcCharsPosPlusQuoteLenLenQuoteStartQuoteLenAndStringUtilsNotIsEmptyTokAndPosGreaterThanOrEqualsToCo"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char4"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "resultItem1"
          valueType: "java.lang.String"
          uuid: "string"
        - sapientType: "BASIC"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "tok"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 613
      expression: "i < quoteLen"
      range: "(613,25)-(613,36)"
      evaluatedAs: true
      internalMethodName: "isQuote"
    - lineNumber: 614
      expression: "pos + i >= len"
      range: "(614,17)-(614,30)"
      evaluatedAs: false
      internalMethodName: "isQuote"
    - lineNumber: 614
      expression: "srcChars[pos + i] != srcChars[quoteStart + i]"
      range: "(614,35)-(614,79)"
      evaluatedAs: false
      internalMethodName: "isQuote"
    - lineNumber: 775
      expression: "isQuote(srcChars, pos, len, quoteStart, quoteLen)"
      range: "(775,21)-(775,69)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 776
      expression: "isQuote(srcChars, pos + quoteLen, len, quoteStart, quoteLen)"
      range: "(776,25)-(776,84)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: false
      internalMethodName: "addToken"
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
  - testPathName: "tokenizeWhenIsQuoteNotSrcCharsPosPlusQuoteLenLenQuoteStartQuoteLenAndStringUtilsIsEmptyTokAndIsIgnoreEmptyTokensAndPosG"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "srcChars"
      valueUuid: "srcChars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "count"
      valueUuid: "count"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getIgnoredMatcher():strMatcher24"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getTrimmerMatcher():strMatcher25"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher26"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "getDelimiterMatcher():strMatcher27"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isIgnoreEmptyTokens():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmptyTokenAsNull():boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "D"
            valueType: "char"
            uuid: "char4"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "char"
            uuid: "char1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "srcChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "count"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher24"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher25"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher26"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "strMatcher27"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    branches:
    - lineNumber: 1076
      expression: "ArrayUtils.isEmpty(srcChars)"
      range: "(1076,13)-(1076,40)"
      evaluatedAs: false
    - lineNumber: 1084
      expression: "pos >= 0"
      range: "(1084,16)-(1084,23)"
      evaluatedAs: true
    - lineNumber: 1084
      expression: "pos < count"
      range: "(1084,28)-(1084,38)"
      evaluatedAs: true
    - lineNumber: 708
      expression: "start < len"
      range: "(708,16)-(708,26)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 712
      expression: "removeLen == 0"
      range: "(712,17)-(712,30)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 713
      expression: "getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(713,17)-(713,78)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 714
      expression: "getQuoteMatcher().isMatch(srcChars, start, start, len) > 0"
      range: "(714,17)-(714,74)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 721
      expression: "start >= len"
      range: "(721,13)-(721,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 728
      expression: "delimLen > 0"
      range: "(728,13)-(728,24)"
      evaluatedAs: false
      internalMethodName: "readNextToken"
    - lineNumber: 735
      expression: "quoteLen > 0"
      range: "(735,13)-(735,24)"
      evaluatedAs: true
      internalMethodName: "readNextToken"
    - lineNumber: 761
      expression: "quoteLen > 0"
      range: "(761,27)-(761,38)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 764
      expression: "pos < len"
      range: "(764,16)-(764,24)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 768
      expression: "quoting"
      range: "(768,17)-(768,23)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 613
      expression: "i < quoteLen"
      range: "(613,25)-(613,36)"
      evaluatedAs: true
      internalMethodName: "isQuote"
    - lineNumber: 614
      expression: "pos + i >= len"
      range: "(614,17)-(614,30)"
      evaluatedAs: false
      internalMethodName: "isQuote"
    - lineNumber: 614
      expression: "srcChars[pos + i] != srcChars[quoteStart + i]"
      range: "(614,35)-(614,79)"
      evaluatedAs: false
      internalMethodName: "isQuote"
    - lineNumber: 775
      expression: "isQuote(srcChars, pos, len, quoteStart, quoteLen)"
      range: "(775,21)-(775,69)"
      evaluatedAs: true
      internalMethodName: "readWithQuotes"
    - lineNumber: 776
      expression: "isQuote(srcChars, pos + quoteLen, len, quoteStart, quoteLen)"
      range: "(776,25)-(776,84)"
      evaluatedAs: false
      internalMethodName: "readWithQuotes"
    - lineNumber: 413
      expression: "StringUtils.isEmpty(tok)"
      range: "(413,13)-(413,36)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 414
      expression: "isIgnoreEmptyTokens()"
      range: "(414,17)-(414,37)"
      evaluatedAs: true
      internalMethodName: "addToken"
    - lineNumber: 1089
      expression: "pos >= count"
      range: "(1089,17)-(1089,28)"
      evaluatedAs: true
    - lineNumber: 417
      expression: "isEmptyTokenAsNull()"
      range: "(417,17)-(417,36)"
      evaluatedAs: false
      internalMethodName: "addToken"
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    instructionFingerprint: "E3536FD3FB46CC17EAA7AD575545AE5B"
  paths:
  - testPathName: "toStringWhenTokensIsNull"
    constructorSignature: "<init>(char[],char,char) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrTokenizer"
        parameters:
        - name: "input"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "char[]"
            uuid: "input"
        - name: "delim"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "delim"
        - name: "quote"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "quote"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "StrTokenizer[not tokenized yet]"
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1103
      expression: "tokens == null"
      range: "(1103,13)-(1103,26)"
      evaluatedAs: true
