---
targetClass:
  fullClassName: "org.apache.commons.lang3.text.StrBuilder"
methods:
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final boolean value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "boolean"
    instructionFingerprint: "740F6D8CA10126C5CA934F0DD717528F"
  paths:
  - testPathName: "appendWhenValue"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 4
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 322
      expression: "value"
      range: "(322,13)-(322,17)"
      evaluatedAs: true
  - testPathName: "appendWhenNotValue"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 322
      expression: "value"
      range: "(322,13)-(322,17)"
      evaluatedAs: false
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final char ch)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "ch"
      type: "char"
    instructionFingerprint: "D2A066C8853255C7B9148E582E3AB45A"
  paths:
  - testPathName: "append1Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final char[] chars)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "chars"
      type: "char[]"
    instructionFingerprint: "335581F17C4C3775DE706ACAD2452729"
  paths:
  - testPathName: "append2WhenCharsIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 361
      expression: "chars == null"
      range: "(361,13)-(361,25)"
      evaluatedAs: true
  - testPathName: "append2WhenStrLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charsItem0"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 361
      expression: "chars == null"
      range: "(361,13)-(361,25)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "strLen > 0"
      range: "(365,13)-(365,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final char[] chars, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "chars"
      type: "char[]"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "8CA0BF15E7848489CE1417C929BC90F8"
  paths:
  - testPathName: "append3WhenCharsIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 384
      expression: "chars == null"
      range: "(384,13)-(384,25)"
      evaluatedAs: true
  - testPathName: "append3WhenStartIndexGreaterThanCharsLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Invalid startIndex: 2"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 384
      expression: "chars == null"
      range: "(384,13)-(384,25)"
      evaluatedAs: false
    - lineNumber: 387
      expression: "startIndex < 0"
      range: "(387,13)-(387,26)"
      evaluatedAs: false
    - lineNumber: 387
      expression: "startIndex > chars.length"
      range: "(387,31)-(387,55)"
      evaluatedAs: true
  - testPathName: "append3WhenStartIndexPlusLengthGreaterThanCharsLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Invalid length: 2"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 384
      expression: "chars == null"
      range: "(384,13)-(384,25)"
      evaluatedAs: false
    - lineNumber: 387
      expression: "startIndex < 0"
      range: "(387,13)-(387,26)"
      evaluatedAs: false
    - lineNumber: 387
      expression: "startIndex > chars.length"
      range: "(387,31)-(387,55)"
      evaluatedAs: false
    - lineNumber: 390
      expression: "length < 0"
      range: "(390,13)-(390,22)"
      evaluatedAs: false
    - lineNumber: 390
      expression: "startIndex + length > chars.length"
      range: "(390,27)-(390,60)"
      evaluatedAs: true
  - testPathName: "append3WhenLengthGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charsItem0"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 384
      expression: "chars == null"
      range: "(384,13)-(384,25)"
      evaluatedAs: false
    - lineNumber: 387
      expression: "startIndex < 0"
      range: "(387,13)-(387,26)"
      evaluatedAs: false
    - lineNumber: 387
      expression: "startIndex > chars.length"
      range: "(387,31)-(387,55)"
      evaluatedAs: false
    - lineNumber: 390
      expression: "length < 0"
      range: "(390,13)-(390,22)"
      evaluatedAs: false
    - lineNumber: 390
      expression: "startIndex + length > chars.length"
      range: "(390,27)-(390,60)"
      evaluatedAs: false
    - lineNumber: 393
      expression: "length > 0"
      range: "(393,13)-(393,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final CharBuffer buf)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "buf"
      type: "java.nio.CharBuffer"
    instructionFingerprint: "B8E38508383A7B7D0FC10CE241639754"
  paths:
  - testPathName: "append4WhenBufIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 411
      expression: "buf == null"
      range: "(411,13)-(411,23)"
      evaluatedAs: true
  - testPathName: "append4WhenBufHasArray"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "buf-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 411
      expression: "buf == null"
      range: "(411,13)-(411,23)"
      evaluatedAs: false
    - lineNumber: 414
      expression: "buf.hasArray()"
      range: "(414,13)-(414,26)"
      evaluatedAs: true
  - testPathName: "append4WhenBufNotHasArray"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.nio.CharBuffer.hasArray() : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "buf-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
      nameForMock: "buf"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "buf"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 411
      expression: "buf == null"
      range: "(411,13)-(411,23)"
      evaluatedAs: false
    - lineNumber: 414
      expression: "buf.hasArray()"
      range: "(414,13)-(414,26)"
      evaluatedAs: false
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final CharBuffer buf, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "buf"
      type: "java.nio.CharBuffer"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "4C09BFF3477CF4E88FB482CB5824C1C0"
  paths:
  - testPathName: "append5WhenBufIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 437
      expression: "buf == null"
      range: "(437,13)-(437,23)"
      evaluatedAs: true
  - testPathName: "append5WhenBufNotHasArray"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string,startIndex,length):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.nio.CharBuffer.hasArray() : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "buf-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
      nameForMock: "buf"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "buf"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 437
      expression: "buf == null"
      range: "(437,13)-(437,23)"
      evaluatedAs: false
    - lineNumber: 440
      expression: "buf.hasArray()"
      range: "(440,13)-(440,26)"
      evaluatedAs: false
  - testPathName: "append5WhenStartIndexGreaterThanTotalLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "buf-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "startIndex must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 437
      expression: "buf == null"
      range: "(437,13)-(437,23)"
      evaluatedAs: false
    - lineNumber: 440
      expression: "buf.hasArray()"
      range: "(440,13)-(440,26)"
      evaluatedAs: true
    - lineNumber: 442
      expression: "startIndex < 0"
      range: "(442,17)-(442,30)"
      evaluatedAs: false
    - lineNumber: 442
      expression: "startIndex > totalLength"
      range: "(442,35)-(442,58)"
      evaluatedAs: true
  - testPathName: "append5WhenStartIndexPlusLengthGreaterThanTotalLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "buf-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "length must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 437
      expression: "buf == null"
      range: "(437,13)-(437,23)"
      evaluatedAs: false
    - lineNumber: 440
      expression: "buf.hasArray()"
      range: "(440,13)-(440,26)"
      evaluatedAs: true
    - lineNumber: 442
      expression: "startIndex < 0"
      range: "(442,17)-(442,30)"
      evaluatedAs: false
    - lineNumber: 442
      expression: "startIndex > totalLength"
      range: "(442,35)-(442,58)"
      evaluatedAs: false
    - lineNumber: 445
      expression: "length < 0"
      range: "(445,17)-(445,26)"
      evaluatedAs: false
    - lineNumber: 445
      expression: "startIndex + length > totalLength"
      range: "(445,31)-(445,63)"
      evaluatedAs: true
  - testPathName: "append5WhenStartIndexPlusLengthNotGreaterThanTotalLength"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "buf"
      valueUuid: "buf"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "buf-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "buf"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 437
      expression: "buf == null"
      range: "(437,13)-(437,23)"
      evaluatedAs: false
    - lineNumber: 440
      expression: "buf.hasArray()"
      range: "(440,13)-(440,26)"
      evaluatedAs: true
    - lineNumber: 442
      expression: "startIndex < 0"
      range: "(442,17)-(442,30)"
      evaluatedAs: false
    - lineNumber: 442
      expression: "startIndex > totalLength"
      range: "(442,35)-(442,58)"
      evaluatedAs: false
    - lineNumber: 445
      expression: "length < 0"
      range: "(445,17)-(445,26)"
      evaluatedAs: false
    - lineNumber: 445
      expression: "startIndex + length > totalLength"
      range: "(445,31)-(445,63)"
      evaluatedAs: false
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final CharSequence seq)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    instructionFingerprint: "7BAABB9518ABC63CB258FBE20AB8B7B2"
  paths:
  - testPathName: "append6WhenSeqIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "seq"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 468
      expression: "seq == null"
      range: "(468,13)-(468,23)"
      evaluatedAs: true
  - testPathName: "append6WhenSeqInstanceOfStrBuilder"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_RECURSIVE_CALL"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "seq"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 468
      expression: "seq == null"
      range: "(468,13)-(468,23)"
      evaluatedAs: false
    - lineNumber: 471
      expression: "seq instanceof StrBuilder"
      range: "(471,13)-(471,37)"
      evaluatedAs: true
  - testPathName: "append6WhenSeqInstanceOfStringBuilder"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_RECURSIVE_CALL"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters: []
      valueType: "java.lang.StringBuilder"
      uuid: "seq"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 468
      expression: "seq == null"
      range: "(468,13)-(468,23)"
      evaluatedAs: false
    - lineNumber: 471
      expression: "seq instanceof StrBuilder"
      range: "(471,13)-(471,37)"
      evaluatedAs: false
    - lineNumber: 474
      expression: "seq instanceof StringBuilder"
      range: "(474,13)-(474,40)"
      evaluatedAs: true
  - testPathName: "append6WhenSeqInstanceOfStringBuffer"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_RECURSIVE_CALL"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "seq"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 468
      expression: "seq == null"
      range: "(468,13)-(468,23)"
      evaluatedAs: false
    - lineNumber: 471
      expression: "seq instanceof StrBuilder"
      range: "(471,13)-(471,37)"
      evaluatedAs: false
    - lineNumber: 474
      expression: "seq instanceof StringBuilder"
      range: "(474,13)-(474,40)"
      evaluatedAs: false
    - lineNumber: 477
      expression: "seq instanceof StringBuffer"
      range: "(477,13)-(477,39)"
      evaluatedAs: true
  - testPathName: "append6WhenSeqInstanceOfCharBuffer"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(seq):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "seq-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "seq"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 468
      expression: "seq == null"
      range: "(468,13)-(468,23)"
      evaluatedAs: false
    - lineNumber: 471
      expression: "seq instanceof StrBuilder"
      range: "(471,13)-(471,37)"
      evaluatedAs: false
    - lineNumber: 474
      expression: "seq instanceof StringBuilder"
      range: "(474,13)-(474,40)"
      evaluatedAs: false
    - lineNumber: 477
      expression: "seq instanceof StringBuffer"
      range: "(477,13)-(477,39)"
      evaluatedAs: false
    - lineNumber: 480
      expression: "seq instanceof CharBuffer"
      range: "(480,13)-(480,37)"
      evaluatedAs: true
  - testPathName: "append6WhenSeqNotInstanceOfCharBuffer"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
      nameForMock: "seq"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 468
      expression: "seq == null"
      range: "(468,13)-(468,23)"
      evaluatedAs: false
    - lineNumber: 471
      expression: "seq instanceof StrBuilder"
      range: "(471,13)-(471,37)"
      evaluatedAs: false
    - lineNumber: 474
      expression: "seq instanceof StringBuilder"
      range: "(474,13)-(474,40)"
      evaluatedAs: false
    - lineNumber: 477
      expression: "seq instanceof StringBuffer"
      range: "(477,13)-(477,39)"
      evaluatedAs: false
    - lineNumber: 480
      expression: "seq instanceof CharBuffer"
      range: "(480,13)-(480,37)"
      evaluatedAs: false
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final CharSequence seq, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "7D173645DDC2BB71C3702AF84EE6DF79"
  paths:
  - testPathName: "append7WhenSeqIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 498
      expression: "seq == null"
      range: "(498,13)-(498,23)"
      evaluatedAs: true
  - testPathName: "append7WhenSeqIsNotNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
      nameForMock: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 498
      expression: "seq == null"
      range: "(498,13)-(498,23)"
      evaluatedAs: false
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final double value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "double"
    instructionFingerprint: "78D9605666D58A3524009AE0EE2AB9BE"
  paths:
  - testPathName: "append8Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0.0"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final float value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "float"
    instructionFingerprint: "4F5AE0865CF942CDC8E0017FCCF7E5AF"
  paths:
  - testPathName: "append9Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0.0"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final int value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "int"
    instructionFingerprint: "EA33D2C7946BAE00A431D028217227FC"
  paths:
  - testPathName: "append10Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final long value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "long"
    instructionFingerprint: "B4C51CD5B93D3E1BD25B82A85D6CEDBA"
  paths:
  - testPathName: "append11Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "long"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final Object obj)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "obj"
      type: "java.lang.Object"
    instructionFingerprint: "7B065F2E38C7911E9D2F66A378452F4F"
  paths:
  - testPathName: "append12WhenObjIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "obj"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 552
      expression: "obj == null"
      range: "(552,13)-(552,23)"
      evaluatedAs: true
  - testPathName: "append12WhenObjInstanceOfCharSequence"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(obj):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "obj1"
      valueType: "java.lang.String"
      uuid: "obj"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 552
      expression: "obj == null"
      range: "(552,13)-(552,23)"
      evaluatedAs: false
    - lineNumber: 555
      expression: "obj instanceof CharSequence"
      range: "(555,13)-(555,39)"
      evaluatedAs: true
  - testPathName: "append12WhenObjNotInstanceOfCharSequence"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "obj"
      nameForMock: "obj"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "obj"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 552
      expression: "obj == null"
      range: "(552,13)-(552,23)"
      evaluatedAs: false
    - lineNumber: 555
      expression: "obj instanceof CharSequence"
      range: "(555,13)-(555,39)"
      evaluatedAs: false
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final StrBuilder str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "857711C73C6D97B164D958BF8B6D998D"
  paths:
  - testPathName: "append13WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 569
      expression: "str == null"
      range: "(569,13)-(569,23)"
      evaluatedAs: true
  - testPathName: "append13WhenStrLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int3):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.length()\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int3"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 569
      expression: "str == null"
      range: "(569,13)-(569,23)"
      evaluatedAs: false
    - lineNumber: 573
      expression: "strLen > 0"
      range: "(573,13)-(573,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final StrBuilder str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "org.apache.commons.lang3.text.StrBuilder"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "8E4D1FB9AB161B7A566A3602409BB1F5"
  paths:
  - testPathName: "append14WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 592
      expression: "str == null"
      range: "(592,13)-(592,23)"
      evaluatedAs: true
  - testPathName: "append14WhenStartIndexGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "startIndex must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 592
      expression: "str == null"
      range: "(592,13)-(592,23)"
      evaluatedAs: false
    - lineNumber: 595
      expression: "startIndex < 0"
      range: "(595,13)-(595,26)"
      evaluatedAs: false
    - lineNumber: 595
      expression: "startIndex > str.length()"
      range: "(595,31)-(595,55)"
      evaluatedAs: true
  - testPathName: "append14WhenStartIndexPlusLengthGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "length must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 592
      expression: "str == null"
      range: "(592,13)-(592,23)"
      evaluatedAs: false
    - lineNumber: 595
      expression: "startIndex < 0"
      range: "(595,13)-(595,26)"
      evaluatedAs: false
    - lineNumber: 595
      expression: "startIndex > str.length()"
      range: "(595,31)-(595,55)"
      evaluatedAs: false
    - lineNumber: 598
      expression: "length < 0"
      range: "(598,13)-(598,22)"
      evaluatedAs: false
    - lineNumber: 598
      expression: "startIndex + length > str.length()"
      range: "(598,27)-(598,60)"
      evaluatedAs: true
  - testPathName: "append14WhenLengthGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int5):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.length()\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int5"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 592
      expression: "str == null"
      range: "(592,13)-(592,23)"
      evaluatedAs: false
    - lineNumber: 595
      expression: "startIndex < 0"
      range: "(595,13)-(595,26)"
      evaluatedAs: false
    - lineNumber: 595
      expression: "startIndex > str.length()"
      range: "(595,31)-(595,55)"
      evaluatedAs: false
    - lineNumber: 598
      expression: "length < 0"
      range: "(598,13)-(598,22)"
      evaluatedAs: false
    - lineNumber: 598
      expression: "startIndex + length > str.length()"
      range: "(598,27)-(598,60)"
      evaluatedAs: false
    - lineNumber: 601
      expression: "length > 0"
      range: "(601,13)-(601,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final String str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "0303C5264B85EAF6A0D8E5BAE592555C"
  paths:
  - testPathName: "append15WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 618
      expression: "str == null"
      range: "(618,13)-(618,23)"
      evaluatedAs: true
  - testPathName: "append15WhenStrLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int3):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int3"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 618
      expression: "str == null"
      range: "(618,13)-(618,23)"
      evaluatedAs: false
    - lineNumber: 622
      expression: "strLen > 0"
      range: "(622,13)-(622,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final String str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "0210C400F81494785ADC7787DAF45E63"
  paths:
  - testPathName: "append16WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 641
      expression: "str == null"
      range: "(641,13)-(641,23)"
      evaluatedAs: true
  - testPathName: "append16WhenStartIndexGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "startIndex must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 641
      expression: "str == null"
      range: "(641,13)-(641,23)"
      evaluatedAs: false
    - lineNumber: 644
      expression: "startIndex < 0"
      range: "(644,13)-(644,26)"
      evaluatedAs: false
    - lineNumber: 644
      expression: "startIndex > str.length()"
      range: "(644,31)-(644,55)"
      evaluatedAs: true
  - testPathName: "append16WhenStartIndexPlusLengthGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "length must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 641
      expression: "str == null"
      range: "(641,13)-(641,23)"
      evaluatedAs: false
    - lineNumber: 644
      expression: "startIndex < 0"
      range: "(644,13)-(644,26)"
      evaluatedAs: false
    - lineNumber: 644
      expression: "startIndex > str.length()"
      range: "(644,31)-(644,55)"
      evaluatedAs: false
    - lineNumber: 647
      expression: "length < 0"
      range: "(647,13)-(647,22)"
      evaluatedAs: false
    - lineNumber: 647
      expression: "startIndex + length > str.length()"
      range: "(647,27)-(647,60)"
      evaluatedAs: true
  - testPathName: "append16WhenLengthGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int5):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int5"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 641
      expression: "str == null"
      range: "(641,13)-(641,23)"
      evaluatedAs: false
    - lineNumber: 644
      expression: "startIndex < 0"
      range: "(644,13)-(644,26)"
      evaluatedAs: false
    - lineNumber: 644
      expression: "startIndex > str.length()"
      range: "(644,31)-(644,55)"
      evaluatedAs: false
    - lineNumber: 647
      expression: "length < 0"
      range: "(647,13)-(647,22)"
      evaluatedAs: false
    - lineNumber: 647
      expression: "startIndex + length > str.length()"
      range: "(647,27)-(647,60)"
      evaluatedAs: false
    - lineNumber: 650
      expression: "length > 0"
      range: "(650,13)-(650,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final String format, final Object... objs)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "format"
      type: "java.lang.String"
    - name: "objs"
      type: "java.lang.Object[]"
    instructionFingerprint: "F148CF08BBBC25C079AFD4759C860353"
  paths:
  - testPathName: "append17Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "format"
      valueUuid: "format"
    - type: "INPUT"
      name: "objs"
      valueUuid: "objs"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "format"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "objs"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final StringBuffer str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuffer"
    instructionFingerprint: "3198A6ACB84E8BA354222D88335C22ED"
  paths:
  - testPathName: "append18WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 680
      expression: "str == null"
      range: "(680,13)-(680,23)"
      evaluatedAs: true
  - testPathName: "append18WhenStrLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int3):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int3"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 680
      expression: "str == null"
      range: "(680,13)-(680,23)"
      evaluatedAs: false
    - lineNumber: 684
      expression: "strLen > 0"
      range: "(684,13)-(684,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final StringBuffer str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuffer"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "AAB87391890B7354E69F30E2A7FE9F05"
  paths:
  - testPathName: "append19WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 703
      expression: "str == null"
      range: "(703,13)-(703,23)"
      evaluatedAs: true
  - testPathName: "append19WhenStartIndexGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "startIndex must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 703
      expression: "str == null"
      range: "(703,13)-(703,23)"
      evaluatedAs: false
    - lineNumber: 706
      expression: "startIndex < 0"
      range: "(706,13)-(706,26)"
      evaluatedAs: false
    - lineNumber: 706
      expression: "startIndex > str.length()"
      range: "(706,31)-(706,55)"
      evaluatedAs: true
  - testPathName: "append19WhenStartIndexPlusLengthGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "length must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 703
      expression: "str == null"
      range: "(703,13)-(703,23)"
      evaluatedAs: false
    - lineNumber: 706
      expression: "startIndex < 0"
      range: "(706,13)-(706,26)"
      evaluatedAs: false
    - lineNumber: 706
      expression: "startIndex > str.length()"
      range: "(706,31)-(706,55)"
      evaluatedAs: false
    - lineNumber: 709
      expression: "length < 0"
      range: "(709,13)-(709,22)"
      evaluatedAs: false
    - lineNumber: 709
      expression: "startIndex + length > str.length()"
      range: "(709,27)-(709,60)"
      evaluatedAs: true
  - testPathName: "append19WhenLengthGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int5):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int5"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 703
      expression: "str == null"
      range: "(703,13)-(703,23)"
      evaluatedAs: false
    - lineNumber: 706
      expression: "startIndex < 0"
      range: "(706,13)-(706,26)"
      evaluatedAs: false
    - lineNumber: 706
      expression: "startIndex > str.length()"
      range: "(706,31)-(706,55)"
      evaluatedAs: false
    - lineNumber: 709
      expression: "length < 0"
      range: "(709,13)-(709,22)"
      evaluatedAs: false
    - lineNumber: 709
      expression: "startIndex + length > str.length()"
      range: "(709,27)-(709,60)"
      evaluatedAs: false
    - lineNumber: 712
      expression: "length > 0"
      range: "(712,13)-(712,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final StringBuilder str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuilder"
    instructionFingerprint: "D660BD280D825C1933C321D1295DB16F"
  paths:
  - testPathName: "append20WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 730
      expression: "str == null"
      range: "(730,13)-(730,23)"
      evaluatedAs: true
  - testPathName: "append20WhenStrLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters:
        - name: "str"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "strinitString"
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 730
      expression: "str == null"
      range: "(730,13)-(730,23)"
      evaluatedAs: false
    - lineNumber: 734
      expression: "strLen > 0"
      range: "(734,13)-(734,22)"
      evaluatedAs: true
- method:
    name: "append"
    sourceCodeSignature: "StrBuilder append(final StringBuilder str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuilder"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "AF7C1E3912996C762B45F3EF3BEFBC68"
  paths:
  - testPathName: "append21WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendNull():strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 754
      expression: "str == null"
      range: "(754,13)-(754,23)"
      evaluatedAs: true
  - testPathName: "append21WhenStartIndexGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters:
        - name: "str"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "strinitString"
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "startIndex must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 754
      expression: "str == null"
      range: "(754,13)-(754,23)"
      evaluatedAs: false
    - lineNumber: 757
      expression: "startIndex < 0"
      range: "(757,13)-(757,26)"
      evaluatedAs: false
    - lineNumber: 757
      expression: "startIndex > str.length()"
      range: "(757,31)-(757,55)"
      evaluatedAs: true
  - testPathName: "append21WhenStartIndexPlusLengthGreaterThanStrLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters:
        - name: "str"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "strinitString"
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "length must be valid"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 754
      expression: "str == null"
      range: "(754,13)-(754,23)"
      evaluatedAs: false
    - lineNumber: 757
      expression: "startIndex < 0"
      range: "(757,13)-(757,26)"
      evaluatedAs: false
    - lineNumber: 757
      expression: "startIndex > str.length()"
      range: "(757,31)-(757,55)"
      evaluatedAs: false
    - lineNumber: 760
      expression: "length < 0"
      range: "(760,13)-(760,22)"
      evaluatedAs: false
    - lineNumber: 760
      expression: "startIndex + length > str.length()"
      range: "(760,27)-(760,60)"
      evaluatedAs: true
  - testPathName: "append21WhenLengthGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters:
        - name: "str"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "strinitString"
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 754
      expression: "str == null"
      range: "(754,13)-(754,23)"
      evaluatedAs: false
    - lineNumber: 757
      expression: "startIndex < 0"
      range: "(757,13)-(757,26)"
      evaluatedAs: false
    - lineNumber: 757
      expression: "startIndex > str.length()"
      range: "(757,31)-(757,55)"
      evaluatedAs: false
    - lineNumber: 760
      expression: "length < 0"
      range: "(760,13)-(760,22)"
      evaluatedAs: false
    - lineNumber: 760
      expression: "startIndex + length > str.length()"
      range: "(760,27)-(760,60)"
      evaluatedAs: false
    - lineNumber: 763
      expression: "length > 0"
      range: "(763,13)-(763,22)"
      evaluatedAs: true
- method:
    name: "appendAll"
    sourceCodeSignature: "StrBuilder appendAll(final Iterable<?> iterable)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "iterable"
      type: "java.lang.Iterable"
      genericType: "?"
    instructionFingerprint: "90DF34E705DD7D320392E60DC84D5F42"
  paths:
  - testPathName: "appendAllWhenIterableIsNotNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "iterable"
      valueUuid: "iterable"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(object):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "java.lang.Object"
            parameters: []
          valueType: "java.lang.Object"
          uuid: "object"
      valueType: "java.lang.Iterable"
      genericValueType: "?"
      uuid: "iterable"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 782
      expression: "iterable != null"
      range: "(782,13)-(782,28)"
      evaluatedAs: true
- method:
    name: "appendAll"
    sourceCodeSignature: "StrBuilder appendAll(final Iterator<?> it)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "it"
      type: "java.util.Iterator"
      genericType: "?"
    instructionFingerprint: "27BC02DAF82B1B8F3EE471E7DDD799D6"
  paths:
  - testPathName: "appendAll1WhenItIsNotNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "it"
      valueUuid: "it"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Iterator.forEachRemaining(java.util.function.Consumer)\
        \ : void"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "?"
          uuid: "itCollection"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "it"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 798
      expression: "it != null"
      range: "(798,13)-(798,22)"
      evaluatedAs: true
- method:
    name: "appendAll"
    sourceCodeSignature: "<T> StrBuilder appendAll(@SuppressWarnings(\\\"unchecked\\\
      \") final T... array)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "array"
      type: "java.lang.Object[]"
    instructionFingerprint: "175186CF12054CAA2CACB723124BF73C"
  paths:
  - testPathName: "appendAll2WhenArrayIsNotEmpty"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(object):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "object"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 822
      expression: "ArrayUtils.isNotEmpty(array)"
      range: "(822,13)-(822,40)"
      evaluatedAs: true
    - lineNumber: 823
      expression: "for-each(array)"
      range: "(823,41)-(823,45)"
      evaluatedAs: true
- method:
    name: "appendFixedWidthPadLeft"
    sourceCodeSignature: "StrBuilder appendFixedWidthPadLeft(final int value, final\
      \ int width, final char padChar)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "int"
    - name: "width"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "F1DF83BD920E1F2BE6BC1E9531BBB3FC"
  paths:
  - testPathName: "appendFixedWidthPadLeftTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "width"
      valueUuid: "width"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendFixedWidthPadLeft(string,width,padChar):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "width"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "appendFixedWidthPadLeft"
    sourceCodeSignature: "StrBuilder appendFixedWidthPadLeft(final Object obj, final\
      \ int width, final char padChar)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "obj"
      type: "java.lang.Object"
    - name: "width"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "EC0771F2A6E3ED220C74DCACD749FCA2"
  paths:
  - testPathName: "appendFixedWidthPadLeft1WhenILessThanPadLen"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "INPUT"
      name: "width"
      valueUuid: "width"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int2):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object,java.util.function.Supplier)\
        \ : java.lang.String"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "obj"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "width"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 856
      expression: "width > 0"
      range: "(856,13)-(856,21)"
      evaluatedAs: true
    - lineNumber: 859
      expression: "str == null"
      range: "(859,17)-(859,27)"
      evaluatedAs: true
    - lineNumber: 863
      expression: "strLen >= width"
      range: "(863,17)-(863,31)"
      evaluatedAs: false
    - lineNumber: 867
      expression: "i < padLen"
      range: "(867,33)-(867,42)"
      evaluatedAs: true
- method:
    name: "appendFixedWidthPadRight"
    sourceCodeSignature: "StrBuilder appendFixedWidthPadRight(final int value, final\
      \ int width, final char padChar)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "int"
    - name: "width"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "9B6A30B3C931A0F537F7A3986DE0042E"
  paths:
  - testPathName: "appendFixedWidthPadRightTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "width"
      valueUuid: "width"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendFixedWidthPadRight(string,width,padChar):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "width"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "appendFixedWidthPadRight"
    sourceCodeSignature: "StrBuilder appendFixedWidthPadRight(final Object obj, final\
      \ int width, final char padChar)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "obj"
      type: "java.lang.Object"
    - name: "width"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "DE061E771FDAA904DD4AE4B77127329C"
  paths:
  - testPathName: "appendFixedWidthPadRight1WhenILessThanPadLen"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "INPUT"
      name: "width"
      valueUuid: "width"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int2):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object,java.util.function.Supplier)\
        \ : java.lang.String"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "obj"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "width"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 903
      expression: "width > 0"
      range: "(903,13)-(903,21)"
      evaluatedAs: true
    - lineNumber: 906
      expression: "str == null"
      range: "(906,17)-(906,27)"
      evaluatedAs: true
    - lineNumber: 910
      expression: "strLen >= width"
      range: "(910,17)-(910,31)"
      evaluatedAs: false
    - lineNumber: 915
      expression: "i < padLen"
      range: "(915,33)-(915,42)"
      evaluatedAs: true
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final boolean value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "boolean"
    instructionFingerprint: "4F507B394EF29B9D453705D4A5474EC2"
  paths:
  - testPathName: "appendlnTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(value):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final char ch)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "ch"
      type: "char"
    instructionFingerprint: "06ACC755490A1AAC11C68E3EEE1EAC7A"
  paths:
  - testPathName: "appendln1Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(ch):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final char[] chars)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "chars"
      type: "char[]"
    instructionFingerprint: "637E8797F366A56CEFDD9724B6902E82"
  paths:
  - testPathName: "appendln2Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(chars):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final char[] chars, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "chars"
      type: "char[]"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "8A47C420B0DBF032F944CD4AF839FD44"
  paths:
  - testPathName: "appendln3Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(chars,startIndex,length):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final double value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "double"
    instructionFingerprint: "BED948988D7C6237A65253E8B87F5F4E"
  paths:
  - testPathName: "appendln4Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(value):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final float value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "float"
    instructionFingerprint: "7C0EE156CD2211FA90BA45B38FB06D5C"
  paths:
  - testPathName: "appendln5Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(value):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final int value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "int"
    instructionFingerprint: "D85DE45EE4D2A3F668974A97C0881272"
  paths:
  - testPathName: "appendln6Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(value):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final long value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "value"
      type: "long"
    instructionFingerprint: "AF15A1B96D0FB8382C7E1DF8CC0B8080"
  paths:
  - testPathName: "appendln7Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(value):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final Object obj)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "obj"
      type: "java.lang.Object"
    instructionFingerprint: "81301A359FD6310DA9C67FE8DFA05F09"
  paths:
  - testPathName: "appendln8Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(obj):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "obj"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final StrBuilder str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "F53F25BE513AE02913301CF28312B842"
  paths:
  - testPathName: "appendln9Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final StrBuilder str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "org.apache.commons.lang3.text.StrBuilder"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "36CC85D9D821C222DA24599ABF8FDB98"
  paths:
  - testPathName: "appendln10Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str,startIndex,length):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final String str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "AB2E0B48214E1206E27C1B8F1A71F269"
  paths:
  - testPathName: "appendln11Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final String str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "B065BABDADDC85167BEA6700217ED23F"
  paths:
  - testPathName: "appendln12Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str,startIndex,length):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final String format, final Object...\
      \ objs)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "format"
      type: "java.lang.String"
    - name: "objs"
      type: "java.lang.Object[]"
    instructionFingerprint: "DD6AC518C95341659F489297FCC5324B"
  paths:
  - testPathName: "appendln13Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "format"
      valueUuid: "format"
    - type: "INPUT"
      name: "objs"
      valueUuid: "objs"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(format,objs):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "format1"
      valueType: "java.lang.String"
      uuid: "format"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "objs"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final StringBuffer str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuffer"
    instructionFingerprint: "81369794B1779FBF792848F5DEA0FFD5"
  paths:
  - testPathName: "appendln14Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final StringBuffer str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuffer"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "B0613C887B7CD8B24ED0144337071CBE"
  paths:
  - testPathName: "appendln15Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str,startIndex,length):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final StringBuilder str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuilder"
    instructionFingerprint: "42A8149CA1B0F4225F842285F6844900"
  paths:
  - testPathName: "appendln16Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters: []
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendln"
    sourceCodeSignature: "StrBuilder appendln(final StringBuilder str, final int startIndex,\
      \ final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.StringBuilder"
    - name: "startIndex"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "98BBD4FEA09785E4644E1CBB82AC9168"
  paths:
  - testPathName: "appendln17Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(str,startIndex,length):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrBuilder.appendNewLine()\
        \ : org.apache.commons.lang3.text.StrBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters: []
      valueType: "java.lang.StringBuilder"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
- method:
    name: "appendNewLine"
    sourceCodeSignature: "StrBuilder appendNewLine()"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "DE49BA49C1C94BB5604DAA6FA9418F65"
  paths:
  - testPathName: "appendNewLineWhenNewLineIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\n"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1156
      expression: "newLine == null"
      range: "(1156,13)-(1156,27)"
      evaluatedAs: true
- method:
    name: "appendNull"
    sourceCodeSignature: "StrBuilder appendNull()"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "D9162155E8FB0595A2FCA4D78D4A7235"
  paths:
  - testPathName: "appendNullWhenNullTextIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1169
      expression: "nullText == null"
      range: "(1169,13)-(1169,28)"
      evaluatedAs: true
- method:
    name: "appendPadding"
    sourceCodeSignature: "StrBuilder appendPadding(final int length, final char padChar)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "length"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "D69BED355CB58CCA50627CB50D0917E4"
  paths:
  - testPathName: "appendPaddingWhenILessThanLength"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1183
      expression: "length >= 0"
      range: "(1183,13)-(1183,23)"
      evaluatedAs: true
    - lineNumber: 1185
      expression: "i < length"
      range: "(1185,29)-(1185,38)"
      evaluatedAs: true
- method:
    name: "appendSeparator"
    sourceCodeSignature: "StrBuilder appendSeparator(final char separator)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "separator"
      type: "char"
    instructionFingerprint: "88BBBCD1ACC2D6DF817EDE5423EFDBFC"
  paths:
  - testPathName: "appendSeparatorWhenIsNotEmpty"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isNotEmpty():boolean1"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(separator):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1213
      expression: "isNotEmpty()"
      range: "(1213,13)-(1213,24)"
      evaluatedAs: true
- method:
    name: "appendSeparator"
    sourceCodeSignature: "StrBuilder appendSeparator(final char standard, final char\
      \ defaultIfEmpty)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "standard"
      type: "char"
    - name: "defaultIfEmpty"
      type: "char"
    instructionFingerprint: "D3C3A81414CDD408F4120DABF4B438F8"
  paths:
  - testPathName: "appendSeparator1WhenIsNotEmpty"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "standard"
      valueUuid: "standard"
    - type: "INPUT"
      name: "defaultIfEmpty"
      valueUuid: "defaultIfEmpty"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isNotEmpty():boolean1"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(standard):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "standard"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "defaultIfEmpty"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1231
      expression: "isNotEmpty()"
      range: "(1231,13)-(1231,24)"
      evaluatedAs: true
  - testPathName: "appendSeparator1WhenIsNotEmptyNot"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "standard"
      valueUuid: "standard"
    - type: "INPUT"
      name: "defaultIfEmpty"
      valueUuid: "defaultIfEmpty"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isNotEmpty():boolean1"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(defaultIfEmpty):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "standard"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "defaultIfEmpty"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1231
      expression: "isNotEmpty()"
      range: "(1231,13)-(1231,24)"
      evaluatedAs: false
- method:
    name: "appendSeparator"
    sourceCodeSignature: "StrBuilder appendSeparator(final char separator, final int\
      \ loopIndex)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "separator"
      type: "char"
    - name: "loopIndex"
      type: "int"
    instructionFingerprint: "9D98E38096ADBFB41B04C783D6A32ED8"
  paths:
  - testPathName: "appendSeparator2WhenLoopIndexGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "loopIndex"
      valueUuid: "loopIndex"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(separator):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "loopIndex"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1261
      expression: "loopIndex > 0"
      range: "(1261,13)-(1261,25)"
      evaluatedAs: true
- method:
    name: "appendSeparator"
    sourceCodeSignature: "StrBuilder appendSeparator(final String separator)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "579BFBDB2048F1B516AD7E8EFDFDAE7F"
  paths:
  - testPathName: "appendSeparator3Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "appendSeparator(separator,defaultIfEmpty):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "defaultIfEmpty"
- method:
    name: "appendSeparator"
    sourceCodeSignature: "StrBuilder appendSeparator(final String separator, final\
      \ int loopIndex)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "separator"
      type: "java.lang.String"
    - name: "loopIndex"
      type: "int"
    instructionFingerprint: "4CA2A0CD578A849C361854FD5ED03FF5"
  paths:
  - testPathName: "appendSeparator4WhenLoopIndexGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "loopIndex"
      valueUuid: "loopIndex"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(separator):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "loopIndex"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1317
      expression: "separator != null"
      range: "(1317,13)-(1317,29)"
      evaluatedAs: true
    - lineNumber: 1317
      expression: "loopIndex > 0"
      range: "(1317,34)-(1317,46)"
      evaluatedAs: true
- method:
    name: "appendSeparator"
    sourceCodeSignature: "StrBuilder appendSeparator(final String standard, final\
      \ String defaultIfEmpty)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "standard"
      type: "java.lang.String"
    - name: "defaultIfEmpty"
      type: "java.lang.String"
    instructionFingerprint: "E78CFDC9FBD809AAE9E9E3759E40F177"
  paths:
  - testPathName: "appendSeparator5WhenStrIsNotNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "standard"
      valueUuid: "standard"
    - type: "INPUT"
      name: "defaultIfEmpty"
      valueUuid: "defaultIfEmpty"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmpty():boolean1"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(defaultIfEmpty):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "standard1"
      valueType: "java.lang.String"
      uuid: "standard"
    - sapientType: "BASIC"
      content: !<regular>
        value: "defaultIfEmpty1"
      valueType: "java.lang.String"
      uuid: "defaultIfEmpty"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1352
      expression: "isEmpty()"
      range: "(1352,28)-(1352,36)"
      evaluatedAs: true
    - lineNumber: 1353
      expression: "str != null"
      range: "(1353,13)-(1353,23)"
      evaluatedAs: true
  - testPathName: "appendSeparator5WhenIsEmptyNotAndStrIsNotNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "standard"
      valueUuid: "standard"
    - type: "INPUT"
      name: "defaultIfEmpty"
      valueUuid: "defaultIfEmpty"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "isEmpty():boolean1"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(standard):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "standard1"
      valueType: "java.lang.String"
      uuid: "standard"
    - sapientType: "BASIC"
      content: !<regular>
        value: "defaultIfEmpty1"
      valueType: "java.lang.String"
      uuid: "defaultIfEmpty"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1352
      expression: "isEmpty()"
      range: "(1352,28)-(1352,36)"
      evaluatedAs: false
    - lineNumber: 1353
      expression: "str != null"
      range: "(1353,13)-(1353,23)"
      evaluatedAs: true
- method:
    name: "appendTo"
    sourceCodeSignature: "void appendTo(final Appendable appendable)"
    returnType: "void"
    throwsExceptions:
    - "java.io.IOException"
    parameters:
    - name: "appendable"
      type: "java.lang.Appendable"
    instructionFingerprint: "FA0AE7310B749BCB5DB3F1643608CC19"
  paths:
  - testPathName: "appendToWhenAppendableInstanceOfWriter"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "appendable"
      valueUuid: "appendable"
    - type: "RESULT"
      name: "result"
      valueUuid: "void2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.io.Writer"
        method: "nullWriter"
        methodParameters: []
      valueType: "java.io.Writer"
      uuid: "appendable"
    - sapientType: "VOID"
      uuid: "void2"
    branches:
    - lineNumber: 1373
      expression: "appendable instanceof Writer"
      range: "(1373,13)-(1373,40)"
      evaluatedAs: true
  - testPathName: "appendToWhenAppendableInstanceOfStringBuilder"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "appendable"
      valueUuid: "appendable"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters: []
      valueType: "java.lang.StringBuilder"
      uuid: "appendable"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 1373
      expression: "appendable instanceof Writer"
      range: "(1373,13)-(1373,40)"
      evaluatedAs: false
    - lineNumber: 1375
      expression: "appendable instanceof StringBuilder"
      range: "(1375,20)-(1375,54)"
      evaluatedAs: true
  - testPathName: "appendToWhenAppendableInstanceOfStringBuffer"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "appendable"
      valueUuid: "appendable"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuffer"
        parameters: []
      valueType: "java.lang.StringBuffer"
      uuid: "appendable"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 1373
      expression: "appendable instanceof Writer"
      range: "(1373,13)-(1373,40)"
      evaluatedAs: false
    - lineNumber: 1375
      expression: "appendable instanceof StringBuilder"
      range: "(1375,20)-(1375,54)"
      evaluatedAs: false
    - lineNumber: 1377
      expression: "appendable instanceof StringBuffer"
      range: "(1377,20)-(1377,53)"
      evaluatedAs: true
  - testPathName: "appendToWhenAppendableInstanceOfCharBuffer"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "appendable"
      valueUuid: "appendable"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "appendable-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "appendable"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 1373
      expression: "appendable instanceof Writer"
      range: "(1373,13)-(1373,40)"
      evaluatedAs: false
    - lineNumber: 1375
      expression: "appendable instanceof StringBuilder"
      range: "(1375,20)-(1375,54)"
      evaluatedAs: false
    - lineNumber: 1377
      expression: "appendable instanceof StringBuffer"
      range: "(1377,20)-(1377,53)"
      evaluatedAs: false
    - lineNumber: 1379
      expression: "appendable instanceof CharBuffer"
      range: "(1379,20)-(1379,51)"
      evaluatedAs: true
  - testPathName: "appendToWhenAppendableNotInstanceOfCharBuffer"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "appendable"
      valueUuid: "appendable"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Appendable.append(org.apache.commons.lang3.text.StrBuilder)\
        \ : java.lang.Appendable"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.lang.Appendable"
      uuid: "appendable"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 1373
      expression: "appendable instanceof Writer"
      range: "(1373,13)-(1373,40)"
      evaluatedAs: false
    - lineNumber: 1375
      expression: "appendable instanceof StringBuilder"
      range: "(1375,20)-(1375,54)"
      evaluatedAs: false
    - lineNumber: 1377
      expression: "appendable instanceof StringBuffer"
      range: "(1377,20)-(1377,53)"
      evaluatedAs: false
    - lineNumber: 1379
      expression: "appendable instanceof CharBuffer"
      range: "(1379,20)-(1379,51)"
      evaluatedAs: false
- method:
    name: "appendWithSeparators"
    sourceCodeSignature: "StrBuilder appendWithSeparators(final Iterable<?> iterable,\
      \ final String separator)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "iterable"
      type: "java.lang.Iterable"
      genericType: "?"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "6888A52DC55932D5F6143D8BC284F15D"
  paths:
  - testPathName: "appendWithSeparatorsWhenItHasNext"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "iterable"
      valueUuid: "iterable"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(object):strBuilder2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder3"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "java.lang.Object"
            parameters: []
          valueType: "java.lang.Object"
          uuid: "object"
      valueType: "java.lang.Iterable"
      genericValueType: "?"
      uuid: "iterable"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1397
      expression: "iterable != null"
      range: "(1397,13)-(1397,28)"
      evaluatedAs: true
    - lineNumber: 1400
      expression: "it.hasNext()"
      range: "(1400,20)-(1400,31)"
      evaluatedAs: true
    - lineNumber: 1402
      expression: "it.hasNext()"
      range: "(1402,21)-(1402,32)"
      evaluatedAs: true
- method:
    name: "appendWithSeparators"
    sourceCodeSignature: "StrBuilder appendWithSeparators(final Iterator<?> it, final\
      \ String separator)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "it"
      type: "java.util.Iterator"
      genericType: "?"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "1120E7C4A65A0A3FAAEAC07A93B3772A"
  paths:
  - testPathName: "appendWithSeparators1WhenItHasNext"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "it"
      valueUuid: "it"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(object):strBuilder2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder3"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<new>
                target: "java.lang.Object"
                parameters: []
              valueType: "java.lang.Object"
              uuid: "object"
          valueType: "java.util.List"
          genericValueType: "?"
          uuid: "it-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "it"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1421
      expression: "it != null"
      range: "(1421,13)-(1421,22)"
      evaluatedAs: true
    - lineNumber: 1423
      expression: "it.hasNext()"
      range: "(1423,20)-(1423,31)"
      evaluatedAs: true
    - lineNumber: 1425
      expression: "it.hasNext()"
      range: "(1425,21)-(1425,32)"
      evaluatedAs: true
- method:
    name: "appendWithSeparators"
    sourceCodeSignature: "StrBuilder appendWithSeparators(final Object[] array, final\
      \ String separator)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "array"
      type: "java.lang.Object[]"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "A22EA1DD9D3A9D78579446C195CFBB12"
  paths:
  - testPathName: "appendWithSeparators2WhenILessThanArrayLength"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(object):strBuilder2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(string):strBuilder3"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "append(object2):strBuilder4"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "object"
          1:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "object2"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1444
      expression: "array != null"
      range: "(1444,13)-(1444,25)"
      evaluatedAs: true
    - lineNumber: 1444
      expression: "array.length > 0"
      range: "(1444,30)-(1444,45)"
      evaluatedAs: true
    - lineNumber: 1447
      expression: "i < array.length"
      range: "(1447,29)-(1447,44)"
      evaluatedAs: true
- method:
    name: "asReader"
    sourceCodeSignature: "Reader asReader()"
    returnType: "java.io.Reader"
    instructionFingerprint: "E391D4BE89E640B31051888D78940242"
  paths:
  - testPathName: "asReaderTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilderStrBuilderReaderNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NOT_NULL"
      valueType: "java.io.Reader"
      uuid: "strBuilderStrBuilderReaderNotNull"
- method:
    name: "asTokenizer"
    sourceCodeSignature: "StrTokenizer asTokenizer()"
    returnType: "org.apache.commons.lang3.text.StrTokenizer"
    instructionFingerprint: "71FB9429D0DB08DD2507CF60E84C25F9"
  paths:
  - testPathName: "asTokenizerTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilderStrBuilderTokenizerNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NOT_NULL"
      valueType: "org.apache.commons.lang3.text.StrTokenizer"
      uuid: "strBuilderStrBuilderTokenizerNotNull"
- method:
    name: "asWriter"
    sourceCodeSignature: "Writer asWriter()"
    returnType: "java.io.Writer"
    instructionFingerprint: "F524A411D5A6921E8B06F7A16645BE1C"
  paths:
  - testPathName: "asWriterTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilderStrBuilderWriterNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NOT_NULL"
      valueType: "java.io.Writer"
      uuid: "strBuilderStrBuilderWriterNotNull"
- method:
    name: "build"
    sourceCodeSignature: "String build()"
    returnType: "java.lang.String"
    instructionFingerprint: "B2094D903846DBCA6756EE11DB81F4EA"
  paths:
  - testPathName: "buildTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "capacity"
    sourceCodeSignature: "int capacity()"
    returnType: "int"
    instructionFingerprint: "F3480F32AF64F9469D43AC0917784D4D"
  paths:
  - testPathName: "capacityTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 32
      valueType: "int"
      uuid: "int2"
- method:
    name: "charAt"
    sourceCodeSignature: "char charAt(final int index)"
    returnType: "char"
    parameters:
    - name: "index"
      type: "int"
    instructionFingerprint: "3147A08424DD412357083D232202A279"
  paths:
  - testPathName: "charAtWhenIndexGreaterThanOrEqualsToLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "index"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 1582
      expression: "index < 0"
      range: "(1582,13)-(1582,21)"
      evaluatedAs: false
    - lineNumber: 1582
      expression: "index >= length()"
      range: "(1582,26)-(1582,42)"
      evaluatedAs: true
- method:
    name: "clear"
    sourceCodeSignature: "StrBuilder clear()"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "88E49BB3585F2E3436CA079ECD176DE5"
  paths:
  - testPathName: "clearTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
- method:
    name: "contains"
    sourceCodeSignature: "boolean contains(final char ch)"
    returnType: "boolean"
    parameters:
    - name: "ch"
      type: "char"
    instructionFingerprint: "B7F6D25FE2A6B8BAD5BAC6A48EA91F59"
  paths:
  - testPathName: "containsWhenINotLessThanThisSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1614
      expression: "i < this.size"
      range: "(1614,25)-(1614,37)"
      evaluatedAs: false
- method:
    name: "contains"
    sourceCodeSignature: "boolean contains(final String str)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "2F02B7D3F466B3E47FE5C3B3DB4412A0"
  paths:
  - testPathName: "contains1WhenIndexOfStr0GreaterThanOrEqualsTo0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.StringUtils.indexOf(org.apache.commons.lang3.text.StrBuilder,java.lang.String,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1629
      expression: "indexOf(str, 0) >= 0"
      range: "(1629,16)-(1629,35)"
      evaluatedAs: true
  - testPathName: "contains1WhenIndexOfStr0LessThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1629
      expression: "indexOf(str, 0) >= 0"
      range: "(1629,16)-(1629,35)"
      evaluatedAs: false
- method:
    name: "contains"
    sourceCodeSignature: "boolean contains(final StrMatcher matcher)"
    returnType: "boolean"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "0AF141D471303CA5CDF7EC307AAE0308"
  paths:
  - testPathName: "contains2WhenIndexOfMatcher0GreaterThanOrEqualsTo0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "indexOf(matcher,startIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1645
      expression: "indexOf(matcher, 0) >= 0"
      range: "(1645,16)-(1645,39)"
      evaluatedAs: true
  - testPathName: "contains2WhenIndexOfMatcher0LessThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "indexOf(matcher,startIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1645
      expression: "indexOf(matcher, 0) >= 0"
      range: "(1645,16)-(1645,39)"
      evaluatedAs: false
- method:
    name: "delete"
    sourceCodeSignature: "StrBuilder delete(final int startIndex, int endIndex)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "B282A658602A0B9BC5BE292181DAA819"
  paths:
  - testPathName: "deleteWhenLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateRange(startIndex,endIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1659
      expression: "len > 0"
      range: "(1659,13)-(1659,19)"
      evaluatedAs: true
- method:
    name: "deleteAll"
    sourceCodeSignature: "StrBuilder deleteAll(final char ch)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "ch"
      type: "char"
    instructionFingerprint: "115924D870BC66D23AB0D5316AD3F975"
  paths:
  - testPathName: "deleteAllWhenINotLessThanSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1672
      expression: "i < size"
      range: "(1672,25)-(1672,32)"
      evaluatedAs: false
- method:
    name: "deleteAll"
    sourceCodeSignature: "StrBuilder deleteAll(final String str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "F4D13CD09464EF3A0837DFA72CC725B6"
  paths:
  - testPathName: "deleteAll1WhenIndexGreaterThanOrEqualsTo0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.StringUtils.indexOf(org.apache.commons.lang3.text.StrBuilder,java.lang.String,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1696
      expression: "len > 0"
      range: "(1696,13)-(1696,19)"
      evaluatedAs: true
    - lineNumber: 1698
      expression: "index >= 0"
      range: "(1698,20)-(1698,29)"
      evaluatedAs: true
- method:
    name: "deleteAll"
    sourceCodeSignature: "StrBuilder deleteAll(final StrMatcher matcher)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "7FE1A94D7AFC7C5288DB7EF4CC082887"
  paths:
  - testPathName: "deleteAll2Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "replace(matcher,replaceStr,startIndex,fieldint2,replaceCount):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "replaceCount"
- method:
    name: "deleteCharAt"
    sourceCodeSignature: "StrBuilder deleteCharAt(final int index)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    instructionFingerprint: "00AB789B65F50BAE696987348E635E44"
  paths:
  - testPathName: "deleteCharAtWhenIndexGreaterThanOrEqualsToSizeThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "index"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 1731
      expression: "index < 0"
      range: "(1731,13)-(1731,21)"
      evaluatedAs: false
    - lineNumber: 1731
      expression: "index >= size"
      range: "(1731,26)-(1731,38)"
      evaluatedAs: true
- method:
    name: "deleteFirst"
    sourceCodeSignature: "StrBuilder deleteFirst(final char ch)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "ch"
      type: "char"
    instructionFingerprint: "2DE0B39DD308CBD6A54C13CFC7B174A4"
  paths:
  - testPathName: "deleteFirstWhenINotLessThanSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1745
      expression: "i < size"
      range: "(1745,25)-(1745,32)"
      evaluatedAs: false
- method:
    name: "deleteFirst"
    sourceCodeSignature: "StrBuilder deleteFirst(final String str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "1835A35EC71BEC0DEA106879A22AD529"
  paths:
  - testPathName: "deleteFirst1WhenIndexGreaterThanOrEqualsTo0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.StringUtils.indexOf(org.apache.commons.lang3.text.StrBuilder,java.lang.String,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1762
      expression: "len > 0"
      range: "(1762,13)-(1762,19)"
      evaluatedAs: true
    - lineNumber: 1764
      expression: "index >= 0"
      range: "(1764,17)-(1764,26)"
      evaluatedAs: true
- method:
    name: "deleteFirst"
    sourceCodeSignature: "StrBuilder deleteFirst(final StrMatcher matcher)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "495B5486DAEB2349D4592BAB0D069827"
  paths:
  - testPathName: "deleteFirst2Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "replace(matcher,replaceStr,startIndex,fieldint2,replaceCount):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "replaceCount"
- method:
    name: "endsWith"
    sourceCodeSignature: "boolean endsWith(final String str)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "764FD3B047E0CA1A8AE0067DB6DA2BDE"
  paths:
  - testPathName: "endsWithWhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1809
      expression: "str == null"
      range: "(1809,13)-(1809,23)"
      evaluatedAs: true
  - testPathName: "endsWithWhenLenEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1809
      expression: "str == null"
      range: "(1809,13)-(1809,23)"
      evaluatedAs: false
    - lineNumber: 1813
      expression: "len == 0"
      range: "(1813,13)-(1813,20)"
      evaluatedAs: true
  - testPathName: "endsWithWhenLenGreaterThanSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1809
      expression: "str == null"
      range: "(1809,13)-(1809,23)"
      evaluatedAs: false
    - lineNumber: 1813
      expression: "len == 0"
      range: "(1813,13)-(1813,20)"
      evaluatedAs: false
    - lineNumber: 1816
      expression: "len > size"
      range: "(1816,13)-(1816,22)"
      evaluatedAs: true
- method:
    name: "ensureCapacity"
    sourceCodeSignature: "StrBuilder ensureCapacity(final int capacity)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "capacity"
      type: "int"
    instructionFingerprint: "B4BDB8DCAE299D3A5D2A2B74A571232D"
  paths:
  - testPathName: "ensureCapacityWhenCapacityGreaterThanBufferLength"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "capacity"
      valueUuid: "capacity"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 33
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 1835
      expression: "capacity > buffer.length"
      range: "(1835,13)-(1835,36)"
      evaluatedAs: true
- method:
    name: "equalsIgnoreCase"
    sourceCodeSignature: "boolean equalsIgnoreCase(final StrBuilder other)"
    returnType: "boolean"
    parameters:
    - name: "other"
      type: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "6EBC92F9AD52181C4A2B7C11548EDEF3"
  paths:
  - testPathName: "equalsIgnoreCaseWhenThisEqualsOther"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "other"
      valueUuid: "targetClassObject"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1890
      expression: "this == other"
      range: "(1890,13)-(1890,25)"
      evaluatedAs: true
  - testPathName: "equalsIgnoreCaseWhenILessThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "other"
      valueUuid: "other"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "other"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1890
      expression: "this == other"
      range: "(1890,13)-(1890,25)"
      evaluatedAs: false
    - lineNumber: 1893
      expression: "this.size != other.size"
      range: "(1893,13)-(1893,35)"
      evaluatedAs: false
    - lineNumber: 1898
      expression: "i >= 0"
      range: "(1898,32)-(1898,37)"
      evaluatedAs: false
- method:
    name: "getChars"
    sourceCodeSignature: "char[] getChars(char[] destination)"
    returnType: "char[]"
    parameters:
    - name: "destination"
      type: "char[]"
    instructionFingerprint: "7AE49C259CBAA01A4A05FA6AE6F55102"
  paths:
  - testPathName: "getCharsWhenDestinationLengthLessThanLen"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "destination"
      valueUuid: "destination"
    - type: "RESULT"
      name: "result"
      valueUuid: "charArray2"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "destination"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray2"
    branches:
    - lineNumber: 1916
      expression: "destination == null"
      range: "(1916,13)-(1916,31)"
      evaluatedAs: false
    - lineNumber: 1916
      expression: "destination.length < len"
      range: "(1916,36)-(1916,59)"
      evaluatedAs: true
- method:
    name: "getChars"
    sourceCodeSignature: "void getChars(final int startIndex, final int endIndex,\
      \ final char[] destination, final int destinationIndex)"
    returnType: "void"
    parameters:
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    - name: "destination"
      type: "char[]"
    - name: "destinationIndex"
      type: "int"
    instructionFingerprint: "06E8CFF9790B3C286C4323B03E9A6DF7"
  paths:
  - testPathName: "getChars1WhenStartIndexLessThan0ThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INPUT"
      name: "destination"
      valueUuid: "destination"
    - type: "INPUT"
      name: "destinationIndex"
      valueUuid: "destinationIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "destinationIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "startIndex"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 1934
      expression: "startIndex < 0"
      range: "(1934,13)-(1934,26)"
      evaluatedAs: true
  - testPathName: "getChars1WhenEndIndexGreaterThanLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INPUT"
      name: "destination"
      valueUuid: "destination"
    - type: "INPUT"
      name: "destinationIndex"
      valueUuid: "destinationIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "destinationIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "endIndex"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 1934
      expression: "startIndex < 0"
      range: "(1934,13)-(1934,26)"
      evaluatedAs: false
    - lineNumber: 1937
      expression: "endIndex < 0"
      range: "(1937,13)-(1937,24)"
      evaluatedAs: false
    - lineNumber: 1937
      expression: "endIndex > length()"
      range: "(1937,29)-(1937,47)"
      evaluatedAs: true
  - testPathName: "getChars1WhenStartIndexGreaterThanEndIndexThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INPUT"
      name: "destination"
      valueUuid: "destination"
    - type: "INPUT"
      name: "destinationIndex"
      valueUuid: "destinationIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "destinationIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "end < start"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 1934
      expression: "startIndex < 0"
      range: "(1934,13)-(1934,26)"
      evaluatedAs: false
    - lineNumber: 1937
      expression: "endIndex < 0"
      range: "(1937,13)-(1937,24)"
      evaluatedAs: false
    - lineNumber: 1937
      expression: "endIndex > length()"
      range: "(1937,29)-(1937,47)"
      evaluatedAs: false
    - lineNumber: 1940
      expression: "startIndex > endIndex"
      range: "(1940,13)-(1940,33)"
      evaluatedAs: true
  - testPathName: "getChars1WhenStartIndexNotGreaterThanEndIndex"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INPUT"
      name: "destination"
      valueUuid: "destination"
    - type: "INPUT"
      name: "destinationIndex"
      valueUuid: "destinationIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "void2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "destinationIndex"
    - sapientType: "VOID"
      uuid: "void2"
    branches:
    - lineNumber: 1934
      expression: "startIndex < 0"
      range: "(1934,13)-(1934,26)"
      evaluatedAs: false
    - lineNumber: 1937
      expression: "endIndex < 0"
      range: "(1937,13)-(1937,24)"
      evaluatedAs: false
    - lineNumber: 1937
      expression: "endIndex > length()"
      range: "(1937,29)-(1937,47)"
      evaluatedAs: false
    - lineNumber: 1940
      expression: "startIndex > endIndex"
      range: "(1940,13)-(1940,33)"
      evaluatedAs: false
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final char ch)"
    returnType: "int"
    parameters:
    - name: "ch"
      type: "char"
    instructionFingerprint: "C358E5A5E4F0964E4A0F504DEE029481"
  paths:
  - testPathName: "indexOfTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "indexOf(ch,startIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final char ch, int startIndex)"
    returnType: "int"
    parameters:
    - name: "ch"
      type: "char"
    - name: "startIndex"
      type: "int"
    instructionFingerprint: "BB23BAB6E560D0A78BC3AC02ABBC1E5C"
  paths:
  - testPathName: "indexOf1WhenStartIndexGreaterThanOrEqualsToSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2147483649
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1998
      expression: "startIndex >= size"
      range: "(1998,13)-(1998,30)"
      evaluatedAs: true
  - testPathName: "indexOf1WhenIIndexOfThisBufEqualsCh"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 1998
      expression: "startIndex >= size"
      range: "(1998,13)-(1998,30)"
      evaluatedAs: false
    - lineNumber: 2002
      expression: "i < size"
      range: "(2002,34)-(2002,41)"
      evaluatedAs: true
    - lineNumber: 2003
      expression: "thisBuf[i] == ch"
      range: "(2003,17)-(2003,32)"
      evaluatedAs: true
  - testPathName: "indexOf1WhenIIndexOfThisBufNotEqualsCh"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1998
      expression: "startIndex >= size"
      range: "(1998,13)-(1998,30)"
      evaluatedAs: false
    - lineNumber: 2002
      expression: "i < size"
      range: "(2002,34)-(2002,41)"
      evaluatedAs: true
    - lineNumber: 2003
      expression: "thisBuf[i] == ch"
      range: "(2003,17)-(2003,32)"
      evaluatedAs: false
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final String str)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "4FF4A94562F08E53F880EF38E023BAC7"
  paths:
  - testPathName: "indexOf2Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final String str, final int startIndex)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "startIndex"
      type: "int"
    instructionFingerprint: "DD4C16E2892F77BFEB5D632484BFE612"
  paths:
  - testPathName: "indexOf3Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final StrMatcher matcher)"
    returnType: "int"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "C7BCC1BB48F0A506365E0FE572DFAC5A"
  paths:
  - testPathName: "indexOf4Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "indexOf(matcher,startIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final StrMatcher matcher, int startIndex)"
    returnType: "int"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    - name: "startIndex"
      type: "int"
    instructionFingerprint: "180F6F6E41D4B8505D6AD3A625B52E08"
  paths:
  - testPathName: "indexOf5WhenStartIndexGreaterThanOrEqualsToSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2147483649
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2068
      expression: "matcher == null"
      range: "(2068,13)-(2068,27)"
      evaluatedAs: false
    - lineNumber: 2068
      expression: "startIndex >= size"
      range: "(2068,32)-(2068,49)"
      evaluatedAs: true
  - testPathName: "indexOf5WhenMatcherIsMatchBufIStartIndexLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 2068
      expression: "matcher == null"
      range: "(2068,13)-(2068,27)"
      evaluatedAs: false
    - lineNumber: 2068
      expression: "startIndex >= size"
      range: "(2068,32)-(2068,49)"
      evaluatedAs: false
    - lineNumber: 2073
      expression: "i < len"
      range: "(2073,34)-(2073,40)"
      evaluatedAs: true
    - lineNumber: 2074
      expression: "matcher.isMatch(buf, i, startIndex, len) > 0"
      range: "(2074,17)-(2074,60)"
      evaluatedAs: true
  - testPathName: "indexOf5WhenMatcherIsMatchBufIStartIndexLenNotGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.text.StrMatcher.isMatch(char[],int,int,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2068
      expression: "matcher == null"
      range: "(2068,13)-(2068,27)"
      evaluatedAs: false
    - lineNumber: 2068
      expression: "startIndex >= size"
      range: "(2068,32)-(2068,49)"
      evaluatedAs: false
    - lineNumber: 2073
      expression: "i < len"
      range: "(2073,34)-(2073,40)"
      evaluatedAs: true
    - lineNumber: 2074
      expression: "matcher.isMatch(buf, i, startIndex, len) > 0"
      range: "(2074,17)-(2074,60)"
      evaluatedAs: false
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(int index, final boolean value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "value"
      type: "boolean"
    instructionFingerprint: "3153C083B70957D75E2A680D65A8B829"
  paths:
  - testPathName: "insertWhenValue"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "value"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 4
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2091
      expression: "value"
      range: "(2091,13)-(2091,17)"
      evaluatedAs: true
  - testPathName: "insertWhenNotValue"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "value"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2091
      expression: "value"
      range: "(2091,13)-(2091,17)"
      evaluatedAs: false
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final char value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "value"
      type: "char"
    instructionFingerprint: "0E1C4E16C1EBB2280768C9834A423ECD"
  paths:
  - testPathName: "insert1Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "value"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final char[] chars)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "chars"
      type: "char[]"
    instructionFingerprint: "2A98D5D80E93DD1ABEA4611E40D4F58B"
  paths:
  - testPathName: "insert2WhenCharsIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "insert(index,fieldString2):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "fieldString2"
    branches:
    - lineNumber: 2140
      expression: "chars == null"
      range: "(2140,13)-(2140,25)"
      evaluatedAs: true
  - testPathName: "insert2WhenLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charsItem0"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2140
      expression: "chars == null"
      range: "(2140,13)-(2140,25)"
      evaluatedAs: false
    - lineNumber: 2144
      expression: "len > 0"
      range: "(2144,13)-(2144,19)"
      evaluatedAs: true
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final char[] chars, final\
      \ int offset, final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "chars"
      type: "char[]"
    - name: "offset"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "46B9A95696F10791B6FD043C078A5B42"
  paths:
  - testPathName: "insert3WhenCharsIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "insert(index,fieldString2):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "fieldString2"
    branches:
    - lineNumber: 2166
      expression: "chars == null"
      range: "(2166,13)-(2166,25)"
      evaluatedAs: true
  - testPathName: "insert3WhenOffsetGreaterThanCharsLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Invalid offset: 2"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 2166
      expression: "chars == null"
      range: "(2166,13)-(2166,25)"
      evaluatedAs: false
    - lineNumber: 2169
      expression: "offset < 0"
      range: "(2169,13)-(2169,22)"
      evaluatedAs: false
    - lineNumber: 2169
      expression: "offset > chars.length"
      range: "(2169,27)-(2169,47)"
      evaluatedAs: true
  - testPathName: "insert3WhenOffsetPlusLengthGreaterThanCharsLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "length"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Invalid length: 2"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 2166
      expression: "chars == null"
      range: "(2166,13)-(2166,25)"
      evaluatedAs: false
    - lineNumber: 2169
      expression: "offset < 0"
      range: "(2169,13)-(2169,22)"
      evaluatedAs: false
    - lineNumber: 2169
      expression: "offset > chars.length"
      range: "(2169,27)-(2169,47)"
      evaluatedAs: false
    - lineNumber: 2172
      expression: "length < 0"
      range: "(2172,13)-(2172,22)"
      evaluatedAs: false
    - lineNumber: 2172
      expression: "offset + length > chars.length"
      range: "(2172,27)-(2172,56)"
      evaluatedAs: true
  - testPathName: "insert3WhenLengthGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "chars"
      valueUuid: "chars"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charsItem0"
      valueType: "char[]"
      uuid: "chars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2166
      expression: "chars == null"
      range: "(2166,13)-(2166,25)"
      evaluatedAs: false
    - lineNumber: 2169
      expression: "offset < 0"
      range: "(2169,13)-(2169,22)"
      evaluatedAs: false
    - lineNumber: 2169
      expression: "offset > chars.length"
      range: "(2169,27)-(2169,47)"
      evaluatedAs: false
    - lineNumber: 2172
      expression: "length < 0"
      range: "(2172,13)-(2172,22)"
      evaluatedAs: false
    - lineNumber: 2172
      expression: "offset + length > chars.length"
      range: "(2172,27)-(2172,56)"
      evaluatedAs: false
    - lineNumber: 2175
      expression: "length > 0"
      range: "(2175,13)-(2175,22)"
      evaluatedAs: true
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final double value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "value"
      type: "double"
    instructionFingerprint: "1BED76E5D3234C549D695F4B2EA9CBA5"
  paths:
  - testPathName: "insert4Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "insert(index,string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0.0"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final float value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "value"
      type: "float"
    instructionFingerprint: "B8A485438856967C359A0AA8794CFF71"
  paths:
  - testPathName: "insert5Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "insert(index,string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0.0"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final int value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "value"
      type: "int"
    instructionFingerprint: "AB51019FCD60CFACE0891F95158CFF56"
  paths:
  - testPathName: "insert6Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "insert(index,string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final long value)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "value"
      type: "long"
    instructionFingerprint: "7EA930A7E85D7D5440A5CF9B1FA651AD"
  paths:
  - testPathName: "insert7Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "insert(index,string):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "long"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, final Object obj)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "obj"
      type: "java.lang.Object"
    instructionFingerprint: "CA7B2CAB6FB12B803D1975AA6806530D"
  paths:
  - testPathName: "insert8WhenObjIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_RECURSIVE_CALL"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "obj"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 2242
      expression: "obj == null"
      range: "(2242,13)-(2242,23)"
      evaluatedAs: true
  - testPathName: "insert8WhenObjIsNotNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "obj"
      valueUuid: "obj"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_RECURSIVE_CALL"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "obj"
      nameForMock: "obj"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    branches:
    - lineNumber: 2242
      expression: "obj == null"
      range: "(2242,13)-(2242,23)"
      evaluatedAs: false
- method:
    name: "insert"
    sourceCodeSignature: "StrBuilder insert(final int index, String str)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "E1C0F5D7918DCE234A74E38174BE28AF"
  paths:
  - testPathName: "insert9WhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2259
      expression: "str == null"
      range: "(2259,13)-(2259,23)"
      evaluatedAs: true
    - lineNumber: 2262
      expression: "str != null"
      range: "(2262,13)-(2262,23)"
      evaluatedAs: false
  - testPathName: "insert9WhenStrLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateIndex(index):void"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int3):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int3"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2259
      expression: "str == null"
      range: "(2259,13)-(2259,23)"
      evaluatedAs: false
    - lineNumber: 2262
      expression: "str != null"
      range: "(2262,13)-(2262,23)"
      evaluatedAs: true
    - lineNumber: 2264
      expression: "strLen > 0"
      range: "(2264,17)-(2264,26)"
      evaluatedAs: true
- method:
    name: "isEmpty"
    sourceCodeSignature: "boolean isEmpty()"
    returnType: "boolean"
    instructionFingerprint: "F60BE2FBADF5C5CDB18A040EEF930570"
  paths:
  - testPathName: "isEmptyWhenSizeEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2285
      expression: "size == 0"
      range: "(2285,16)-(2285,24)"
      evaluatedAs: true
- method:
    name: "isNotEmpty"
    sourceCodeSignature: "boolean isNotEmpty()"
    returnType: "boolean"
    instructionFingerprint: "6CE966F2CE186CBFA33197BCF3F10F3B"
  paths:
  - testPathName: "isNotEmptyWhenSizeNotGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2299
      expression: "size > 0"
      range: "(2299,16)-(2299,23)"
      evaluatedAs: false
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final char ch)"
    returnType: "int"
    parameters:
    - name: "ch"
      type: "char"
    instructionFingerprint: "05EAD2FBDD29BA337FC665B07326E710"
  paths:
  - testPathName: "lastIndexOfTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "lastIndexOf(ch,startIndex):int3"
    - type: "RESULT"
      name: "result"
      valueUuid: "int3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int3"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final char ch, int startIndex)"
    returnType: "int"
    parameters:
    - name: "ch"
      type: "char"
    - name: "startIndex"
      type: "int"
    instructionFingerprint: "E47806636FD8D202FB2F66C0518AA001"
  paths:
  - testPathName: "lastIndexOf1WhenStartIndexLessThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2320
      expression: "startIndex >= size"
      range: "(2320,22)-(2320,39)"
      evaluatedAs: true
    - lineNumber: 2321
      expression: "startIndex < 0"
      range: "(2321,13)-(2321,26)"
      evaluatedAs: true
  - testPathName: "lastIndexOf1WhenStartIndexLessThanSizeAndStartIndexLessThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2320
      expression: "startIndex >= size"
      range: "(2320,22)-(2320,39)"
      evaluatedAs: false
    - lineNumber: 2321
      expression: "startIndex < 0"
      range: "(2321,13)-(2321,26)"
      evaluatedAs: true
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final String str)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "3917D8E62391967BB06FF6913AF9CCF0"
  paths:
  - testPathName: "lastIndexOf2Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "int3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int3"
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final String str, final int startIndex)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "startIndex"
      type: "int"
    instructionFingerprint: "E36C86AE9F8A27183242076CE4B60C12"
  paths:
  - testPathName: "lastIndexOf3Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final StrMatcher matcher)"
    returnType: "int"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    instructionFingerprint: "E14141C5D78C65DBE08A43FA65C07E49"
  paths:
  - testPathName: "lastIndexOf4Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "lastIndexOf(matcher,fieldint2):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final StrMatcher matcher, int startIndex)"
    returnType: "int"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    - name: "startIndex"
      type: "int"
    instructionFingerprint: "8ABCAFFD627EBC2825B18C6899B17528"
  paths:
  - testPathName: "lastIndexOf5WhenStartIndexLessThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2389
      expression: "startIndex >= size"
      range: "(2389,22)-(2389,39)"
      evaluatedAs: true
    - lineNumber: 2390
      expression: "matcher == null"
      range: "(2390,13)-(2390,27)"
      evaluatedAs: false
    - lineNumber: 2390
      expression: "startIndex < 0"
      range: "(2390,32)-(2390,45)"
      evaluatedAs: true
  - testPathName: "lastIndexOf5WhenMatcherIsNotNullAndStartIndexLessThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2389
      expression: "startIndex >= size"
      range: "(2389,22)-(2389,39)"
      evaluatedAs: false
    - lineNumber: 2390
      expression: "matcher == null"
      range: "(2390,13)-(2390,27)"
      evaluatedAs: false
    - lineNumber: 2390
      expression: "startIndex < 0"
      range: "(2390,32)-(2390,45)"
      evaluatedAs: true
- method:
    name: "leftString"
    sourceCodeSignature: "String leftString(final int length)"
    returnType: "java.lang.String"
    parameters:
    - name: "length"
      type: "int"
    instructionFingerprint: "8F4B37C0048ADA4CA03F6501B388AC4E"
  paths:
  - testPathName: "leftStringWhenLengthLessThanOrEqualsTo0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "length"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2417
      expression: "length <= 0"
      range: "(2417,13)-(2417,23)"
      evaluatedAs: true
  - testPathName: "leftStringWhenLengthGreaterThanOrEqualsToSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 2417
      expression: "length <= 0"
      range: "(2417,13)-(2417,23)"
      evaluatedAs: false
    - lineNumber: 2420
      expression: "length >= size"
      range: "(2420,13)-(2420,26)"
      evaluatedAs: true
- method:
    name: "length"
    sourceCodeSignature: "int length()"
    returnType: "int"
    instructionFingerprint: "F8EC3A8F85E42D44FE0DB0123DE0BA38"
  paths:
  - testPathName: "lengthTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "fieldint2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
- method:
    name: "midString"
    sourceCodeSignature: "String midString(int index, final int length)"
    returnType: "java.lang.String"
    parameters:
    - name: "index"
      type: "int"
    - name: "length"
      type: "int"
    instructionFingerprint: "C364B6E28E715C9C749FE78EF2B1D729"
  paths:
  - testPathName: "midStringWhenIndexGreaterThanOrEqualsToSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2454
      expression: "index < 0"
      range: "(2454,13)-(2454,21)"
      evaluatedAs: true
    - lineNumber: 2457
      expression: "length <= 0"
      range: "(2457,13)-(2457,23)"
      evaluatedAs: false
    - lineNumber: 2457
      expression: "index >= size"
      range: "(2457,28)-(2457,40)"
      evaluatedAs: true
- method:
    name: "minimizeCapacity"
    sourceCodeSignature: "StrBuilder minimizeCapacity()"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "9D715A31369FCB5DE17489BE8A7383D5"
  paths:
  - testPathName: "minimizeCapacityWhenBufferLengthGreaterThanLength"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2472
      expression: "buffer.length > length()"
      range: "(2472,13)-(2472,36)"
      evaluatedAs: true
- method:
    name: "readFrom"
    sourceCodeSignature: "int readFrom(final Readable readable)"
    returnType: "int"
    throwsExceptions:
    - "java.io.IOException"
    parameters:
    - name: "readable"
      type: "java.lang.Readable"
    instructionFingerprint: "B04B8A90743F929DC2CD37C6AA6C251B"
  paths:
  - testPathName: "readFromWhenReadAssignedRReadBufferSizeBufferLengthMinusSizeNotEqualsMinus1"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "readable"
      valueUuid: "readable"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int7):strBuilder3"
    - type: "RESULT"
      name: "result"
      valueUuid: "int11"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.Reader.read(char[],int,int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.io.Reader"
        method: "nullReader"
        methodParameters: []
      valueType: "java.io.Reader"
      uuid: "readable"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int7"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int11"
    branches:
    - lineNumber: 2493
      expression: "readable instanceof Reader"
      range: "(2493,13)-(2493,38)"
      evaluatedAs: true
    - lineNumber: 2497
      expression: "(read = r.read(buffer, size, buffer.length - size)) != -1"
      range: "(2497,20)-(2497,76)"
      evaluatedAs: true
  - testPathName: "readFromWhenReadableInstanceOfCharBuffer"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "readable"
      valueUuid: "readable"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.CharBuffer"
        method: "allocate"
        methodParameters:
        - name: "capacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "readable-capacity"
      valueType: "java.nio.CharBuffer"
      uuid: "readable"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "capacity"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2493
      expression: "readable instanceof Reader"
      range: "(2493,13)-(2493,38)"
      evaluatedAs: false
    - lineNumber: 2501
      expression: "readable instanceof CharBuffer"
      range: "(2501,20)-(2501,49)"
      evaluatedAs: true
  - testPathName: "readFromWhenReadEqualsMinus1"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "readable"
      valueUuid: "readable"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Readable.read(java.nio.CharBuffer) :\
        \ int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.lang.Readable"
      uuid: "readable"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2493
      expression: "readable instanceof Reader"
      range: "(2493,13)-(2493,38)"
      evaluatedAs: false
    - lineNumber: 2501
      expression: "readable instanceof CharBuffer"
      range: "(2501,20)-(2501,49)"
      evaluatedAs: false
    - lineNumber: 2512
      expression: "read == -1"
      range: "(2512,21)-(2512,30)"
      evaluatedAs: true
  - testPathName: "readFromWhenReadNotEqualsMinus1"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "readable"
      valueUuid: "readable"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(capacity):strBuilder2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int7):strBuilder3"
    - type: "RESULT"
      name: "result"
      valueUuid: "int11"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Readable.read(java.nio.CharBuffer) :\
        \ int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.lang.Readable"
      uuid: "readable"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "capacity"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder3"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int7"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int11"
    branches:
    - lineNumber: 2493
      expression: "readable instanceof Reader"
      range: "(2493,13)-(2493,38)"
      evaluatedAs: false
    - lineNumber: 2501
      expression: "readable instanceof CharBuffer"
      range: "(2501,20)-(2501,49)"
      evaluatedAs: false
    - lineNumber: 2512
      expression: "read == -1"
      range: "(2512,21)-(2512,30)"
      evaluatedAs: false
- method:
    name: "replace"
    sourceCodeSignature: "StrBuilder replace(final int startIndex, int endIndex, final\
      \ String replaceStr)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    - name: "replaceStr"
      type: "java.lang.String"
    instructionFingerprint: "4A4A912A53B01D8E539BB3E8D998E825"
  paths:
  - testPathName: "replaceWhenInsertLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INPUT"
      name: "replaceStr"
      valueUuid: "replaceStr"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateRange(startIndex,endIndex):int2"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int6):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int6"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2685
      expression: "insertLen != removeLen"
      range: "(2685,13)-(2685,34)"
      evaluatedAs: true
      internalMethodName: "replaceImpl"
    - lineNumber: 2690
      expression: "insertLen > 0"
      range: "(2690,13)-(2690,25)"
      evaluatedAs: true
      internalMethodName: "replaceImpl"
- method:
    name: "replace"
    sourceCodeSignature: "StrBuilder replace(final StrMatcher matcher, final String\
      \ replaceStr, final int startIndex, int endIndex, final int replaceCount)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    - name: "replaceStr"
      type: "java.lang.String"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    - name: "replaceCount"
      type: "int"
    instructionFingerprint: "584D5C020FA03EE5EC36C8EE2653A95B"
  paths:
  - testPathName: "replace1WhenSizeEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "replaceStr"
      valueUuid: "replaceStr"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INPUT"
      name: "replaceCount"
      valueUuid: "replaceCount"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateRange(startIndex,endIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replaceStr1"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "replaceCount"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2714
      expression: "matcher == null"
      range: "(2714,13)-(2714,27)"
      evaluatedAs: false
      internalMethodName: "replaceImpl"
    - lineNumber: 2714
      expression: "size == 0"
      range: "(2714,32)-(2714,40)"
      evaluatedAs: true
      internalMethodName: "replaceImpl"
- method:
    name: "replaceAll"
    sourceCodeSignature: "StrBuilder replaceAll(final char search, final char replace)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "search"
      type: "char"
    - name: "replace"
      type: "char"
    instructionFingerprint: "EFBCEEDC6F543BF007C45C66EA07049D"
  paths:
  - testPathName: "replaceAllWhenINotLessThanSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "search"
      valueUuid: "search"
    - type: "INPUT"
      name: "replace"
      valueUuid: "replace"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "search"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "replace"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2572
      expression: "search != replace"
      range: "(2572,13)-(2572,29)"
      evaluatedAs: true
    - lineNumber: 2573
      expression: "i < size"
      range: "(2573,29)-(2573,36)"
      evaluatedAs: false
- method:
    name: "replaceAll"
    sourceCodeSignature: "StrBuilder replaceAll(final String searchStr, final String\
      \ replaceStr)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "searchStr"
      type: "java.lang.String"
    - name: "replaceStr"
      type: "java.lang.String"
    instructionFingerprint: "47DFD5F6167867BAF225E6596397CEF7"
  paths:
  - testPathName: "replaceAll1WhenInsertLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "replaceStr"
      valueUuid: "replaceStr"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int7):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.StringUtils.indexOf(org.apache.commons.lang3.text.StrBuilder,java.lang.String,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replaceStr1"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int7"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2591
      expression: "searchLen > 0"
      range: "(2591,13)-(2591,25)"
      evaluatedAs: true
    - lineNumber: 2594
      expression: "index >= 0"
      range: "(2594,20)-(2594,29)"
      evaluatedAs: true
    - lineNumber: 2685
      expression: "insertLen != removeLen"
      range: "(2685,13)-(2685,34)"
      evaluatedAs: true
      internalMethodName: "replaceImpl"
    - lineNumber: 2690
      expression: "insertLen > 0"
      range: "(2690,13)-(2690,25)"
      evaluatedAs: true
      internalMethodName: "replaceImpl"
- method:
    name: "replaceAll"
    sourceCodeSignature: "StrBuilder replaceAll(final StrMatcher matcher, final String\
      \ replaceStr)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    - name: "replaceStr"
      type: "java.lang.String"
    instructionFingerprint: "527B85B1FB59663492CFDAB7E5021393"
  paths:
  - testPathName: "replaceAll2Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "replaceStr"
      valueUuid: "replaceStr"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "replace(matcher,replaceStr,startIndex,fieldint2,replaceCount):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replaceStr1"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "replaceCount"
- method:
    name: "replaceFirst"
    sourceCodeSignature: "StrBuilder replaceFirst(final char search, final char replace)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "search"
      type: "char"
    - name: "replace"
      type: "char"
    instructionFingerprint: "677C2A8F1A89346CED4D8BD138170261"
  paths:
  - testPathName: "replaceFirstWhenINotLessThanSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "search"
      valueUuid: "search"
    - type: "INPUT"
      name: "replace"
      valueUuid: "replace"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "search"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "replace"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2627
      expression: "search != replace"
      range: "(2627,13)-(2627,29)"
      evaluatedAs: true
    - lineNumber: 2628
      expression: "i < size"
      range: "(2628,29)-(2628,36)"
      evaluatedAs: false
- method:
    name: "replaceFirst"
    sourceCodeSignature: "StrBuilder replaceFirst(final String searchStr, final String\
      \ replaceStr)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "searchStr"
      type: "java.lang.String"
    - name: "replaceStr"
      type: "java.lang.String"
    instructionFingerprint: "92CDC2879DC85CB3AA101F68D013A791"
  paths:
  - testPathName: "replaceFirst1WhenInsertLenGreaterThan0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "replaceStr"
      valueUuid: "replaceStr"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(int7):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.StringUtils.indexOf(org.apache.commons.lang3.text.StrBuilder,java.lang.String,int)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replaceStr1"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int7"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2647
      expression: "searchLen > 0"
      range: "(2647,13)-(2647,25)"
      evaluatedAs: true
    - lineNumber: 2649
      expression: "index >= 0"
      range: "(2649,17)-(2649,26)"
      evaluatedAs: true
    - lineNumber: 2685
      expression: "insertLen != removeLen"
      range: "(2685,13)-(2685,34)"
      evaluatedAs: true
      internalMethodName: "replaceImpl"
    - lineNumber: 2690
      expression: "insertLen > 0"
      range: "(2690,13)-(2690,25)"
      evaluatedAs: true
      internalMethodName: "replaceImpl"
- method:
    name: "replaceFirst"
    sourceCodeSignature: "StrBuilder replaceFirst(final StrMatcher matcher, final\
      \ String replaceStr)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "matcher"
      type: "org.apache.commons.lang3.text.StrMatcher"
    - name: "replaceStr"
      type: "java.lang.String"
    instructionFingerprint: "484860A6B7390992E832ADE313C2AE9A"
  paths:
  - testPathName: "replaceFirst2Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "matcher"
      valueUuid: "matcher"
    - type: "INPUT"
      name: "replaceStr"
      valueUuid: "replaceStr"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "replace(matcher,replaceStr,startIndex,fieldint2,replaceCount):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "strBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.lang3.text.StrMatcher"
        method: "commaMatcher"
        methodParameters: []
      valueType: "org.apache.commons.lang3.text.StrMatcher"
      uuid: "matcher"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replaceStr1"
      valueType: "java.lang.String"
      uuid: "replaceStr"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "replaceCount"
- method:
    name: "reverse"
    sourceCodeSignature: "StrBuilder reverse()"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "37D33B6E4AE8CD3A26A788C11B30DB0D"
  paths:
  - testPathName: "reverseWhenSizeEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2739
      expression: "size == 0"
      range: "(2739,13)-(2739,21)"
      evaluatedAs: true
- method:
    name: "rightString"
    sourceCodeSignature: "String rightString(final int length)"
    returnType: "java.lang.String"
    parameters:
    - name: "length"
      type: "int"
    instructionFingerprint: "7E872D16837D2B9984C782CA51BA355D"
  paths:
  - testPathName: "rightStringWhenLengthLessThanOrEqualsTo0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "length"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2767
      expression: "length <= 0"
      range: "(2767,13)-(2767,23)"
      evaluatedAs: true
  - testPathName: "rightStringWhenLengthGreaterThanOrEqualsToSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 2767
      expression: "length <= 0"
      range: "(2767,13)-(2767,23)"
      evaluatedAs: false
    - lineNumber: 2770
      expression: "length >= size"
      range: "(2770,13)-(2770,26)"
      evaluatedAs: true
- method:
    name: "setCharAt"
    sourceCodeSignature: "StrBuilder setCharAt(final int index, final char ch)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "index"
      type: "int"
    - name: "ch"
      type: "char"
    instructionFingerprint: "747258B389AD085192142ED4E66D0317"
  paths:
  - testPathName: "setCharAtWhenIndexGreaterThanOrEqualsToLengthThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "index"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 2787
      expression: "index < 0"
      range: "(2787,13)-(2787,21)"
      evaluatedAs: false
    - lineNumber: 2787
      expression: "index >= length()"
      range: "(2787,26)-(2787,42)"
      evaluatedAs: true
- method:
    name: "setLength"
    sourceCodeSignature: "StrBuilder setLength(final int length)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "length"
      type: "int"
    instructionFingerprint: "6D45EC47C79D664F29A7554111139427"
  paths:
  - testPathName: "setLengthWhenLengthLessThan0ThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "length"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "length"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 2803
      expression: "length < 0"
      range: "(2803,13)-(2803,22)"
      evaluatedAs: true
  - testPathName: "setLengthWhenILessThanLength"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "ensureCapacity(length):strBuilder2"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "length"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters: []
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "strBuilder2"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 2803
      expression: "length < 0"
      range: "(2803,13)-(2803,22)"
      evaluatedAs: false
    - lineNumber: 2806
      expression: "length < size"
      range: "(2806,13)-(2806,25)"
      evaluatedAs: false
    - lineNumber: 2808
      expression: "length > size"
      range: "(2808,20)-(2808,32)"
      evaluatedAs: true
    - lineNumber: 2812
      expression: "i < length"
      range: "(2812,34)-(2812,43)"
      evaluatedAs: true
- method:
    name: "setNewLineText"
    sourceCodeSignature: "StrBuilder setNewLineText(final String newLine)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "newLine"
      type: "java.lang.String"
    instructionFingerprint: "15F792D0E1ADC8F3EAC0A66A330F7B08"
  paths:
  - testPathName: "setNewLineTextTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "newLine"
      valueUuid: "newLine"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "newLine1"
      valueType: "java.lang.String"
      uuid: "newLine"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
- method:
    name: "setNullText"
    sourceCodeSignature: "StrBuilder setNullText(String nullText)"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    parameters:
    - name: "nullText"
      type: "java.lang.String"
    instructionFingerprint: "98F8E68B813F0A316B8AF5F1CA29A9BE"
  paths:
  - testPathName: "setNullTextWhenStringUtilsIsEmptyNullText"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "nullText"
      valueUuid: "nullText"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    - type: "STATE_VERIFICATION_FIELD"
      name: "nullText"
      valueUuid: "nullText2"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "nullText1"
      valueType: "java.lang.String"
      uuid: "nullText"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    - sapientType: "NULL"
      uuid: "nullText2"
    branches:
    - lineNumber: 2837
      expression: "StringUtils.isEmpty(nullText)"
      range: "(2837,13)-(2837,41)"
      evaluatedAs: true
- method:
    name: "size"
    sourceCodeSignature: "int size()"
    returnType: "int"
    instructionFingerprint: "811AB1AF5DA93B2189D93EF1C42DC08B"
  paths:
  - testPathName: "sizeTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "fieldint2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
- method:
    name: "startsWith"
    sourceCodeSignature: "boolean startsWith(final String str)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "79A90F86461E60B6FBE09CAD049CECA5"
  paths:
  - testPathName: "startsWithWhenStrIsNull"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2867
      expression: "str == null"
      range: "(2867,13)-(2867,23)"
      evaluatedAs: true
  - testPathName: "startsWithWhenLenEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2867
      expression: "str == null"
      range: "(2867,13)-(2867,23)"
      evaluatedAs: false
    - lineNumber: 2871
      expression: "len == 0"
      range: "(2871,13)-(2871,20)"
      evaluatedAs: true
  - testPathName: "startsWithWhenLenGreaterThanSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2867
      expression: "str == null"
      range: "(2867,13)-(2867,23)"
      evaluatedAs: false
    - lineNumber: 2871
      expression: "len == 0"
      range: "(2871,13)-(2871,20)"
      evaluatedAs: false
    - lineNumber: 2874
      expression: "len > size"
      range: "(2874,13)-(2874,22)"
      evaluatedAs: true
- method:
    name: "subSequence"
    sourceCodeSignature: "CharSequence subSequence(final int startIndex, final int\
      \ endIndex)"
    returnType: "java.lang.CharSequence"
    parameters:
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "5D008D54B05F4F25BFA2BB1F417CBFB4"
  paths:
  - testPathName: "subSequenceWhenStartIndexLessThan0ThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "startIndex"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 2891
      expression: "startIndex < 0"
      range: "(2891,11)-(2891,24)"
      evaluatedAs: true
  - testPathName: "subSequenceWhenEndIndexGreaterThanSizeThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "endIndex"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 2891
      expression: "startIndex < 0"
      range: "(2891,11)-(2891,24)"
      evaluatedAs: false
    - lineNumber: 2894
      expression: "endIndex > size"
      range: "(2894,11)-(2894,25)"
      evaluatedAs: true
  - testPathName: "subSequenceWhenStartIndexGreaterThanEndIndexThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "int2"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 2891
      expression: "startIndex < 0"
      range: "(2891,11)-(2891,24)"
      evaluatedAs: false
    - lineNumber: 2894
      expression: "endIndex > size"
      range: "(2894,11)-(2894,25)"
      evaluatedAs: false
    - lineNumber: 2897
      expression: "startIndex > endIndex"
      range: "(2897,11)-(2897,31)"
      evaluatedAs: true
  - testPathName: "subSequenceWhenStartIndexNotGreaterThanEndIndex"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "substring(startIndex,endIndex):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_substring1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 2891
      expression: "startIndex < 0"
      range: "(2891,11)-(2891,24)"
      evaluatedAs: false
    - lineNumber: 2894
      expression: "endIndex > size"
      range: "(2894,11)-(2894,25)"
      evaluatedAs: false
    - lineNumber: 2897
      expression: "startIndex > endIndex"
      range: "(2897,11)-(2897,31)"
      evaluatedAs: false
- method:
    name: "substring"
    sourceCodeSignature: "String substring(final int start)"
    returnType: "java.lang.String"
    parameters:
    - name: "start"
      type: "int"
    instructionFingerprint: "98850B5D30E6B5D28A520E9289F3567E"
  paths:
  - testPathName: "substringTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "substring(start,fieldint2):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_substring1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
- method:
    name: "substring"
    sourceCodeSignature: "String substring(final int startIndex, int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "81001498C14A93E91F45C2026819022F"
  paths:
  - testPathName: "substring1Test"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateRange(startIndex,endIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "toCharArray"
    sourceCodeSignature: "char[] toCharArray()"
    returnType: "char[]"
    instructionFingerprint: "A5AD99CD6957194F208F39841D1CD5DB"
  paths:
  - testPathName: "toCharArrayWhenSizeEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "charArray2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray2"
    branches:
    - lineNumber: 2939
      expression: "size == 0"
      range: "(2939,13)-(2939,21)"
      evaluatedAs: true
- method:
    name: "toCharArray"
    sourceCodeSignature: "char[] toCharArray(final int startIndex, int endIndex)"
    returnType: "char[]"
    parameters:
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "6A88D2A254D925FC292ADF9404EE9CCF"
  paths:
  - testPathName: "toCharArray1WhenLenEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateRange(startIndex,endIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "charArray2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "charArray2"
    branches:
    - lineNumber: 2960
      expression: "len == 0"
      range: "(2960,13)-(2960,20)"
      evaluatedAs: true
  - testPathName: "toCharArray1WhenLenNotEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "validateRange(startIndex,endIndex):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "charArray2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int2"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "char"
            uuid: "charArray2Item0"
      valueType: "char[]"
      uuid: "charArray2"
    branches:
    - lineNumber: 2960
      expression: "len == 0"
      range: "(2960,13)-(2960,20)"
      evaluatedAs: false
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    instructionFingerprint: "A3535EA18103F4939AD0B0C8F39F2C19"
  paths:
  - testPathName: "toStringTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "toStringBuffer"
    sourceCodeSignature: "StringBuffer toStringBuffer()"
    returnType: "java.lang.StringBuffer"
    instructionFingerprint: "DE7F6625CD93861D61922F993E82061C"
  paths:
  - testPathName: "toStringBufferTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringBuffer2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.StringBuffer"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "java.lang.StringBuffer"
            parameters:
            - name: "capacity"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: 0
                valueType: "int"
                uuid: "fieldint2"
          valueType: "java.lang.StringBuffer"
          uuid: "stringBuffer"
        methodParameters:
        - name: "str"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem1"
                1:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem2"
                2:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem3"
                3:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem4"
                4:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem5"
                5:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem6"
                6:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem7"
                7:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem8"
                8:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem9"
                9:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem10"
                10:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem11"
                11:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem12"
                12:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem13"
                13:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem14"
                14:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem15"
                15:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem16"
                16:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem17"
                17:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem18"
                18:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem19"
                19:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem20"
                20:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem21"
                21:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem22"
                22:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem23"
                23:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem24"
                24:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem25"
                25:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem26"
                26:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem27"
                27:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem28"
                28:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem29"
                29:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem30"
                30:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem31"
                31:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "char"
                  uuid: "charArrayItem32"
            valueType: "char[]"
            uuid: "charArray"
        - name: "offset"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "offset"
        - name: "len"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "fieldint2"
        methodName: "append"
      valueType: "java.lang.StringBuffer"
      uuid: "stringBuffer2"
- method:
    name: "toStringBuilder"
    sourceCodeSignature: "StringBuilder toStringBuilder()"
    returnType: "java.lang.StringBuilder"
    instructionFingerprint: "14902B4D21542B07D519813647799635"
  paths:
  - testPathName: "toStringBuilderTest"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringBuilder2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.append(char[],int,int)\
        \ : java.lang.StringBuilder"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.StringBuilder"
        parameters: []
      valueType: "java.lang.StringBuilder"
      uuid: "stringBuilder2"
- method:
    name: "trim"
    sourceCodeSignature: "StrBuilder trim()"
    returnType: "org.apache.commons.lang3.text.StrBuilder"
    instructionFingerprint: "AAA8755349CB5A8392B955C45DD8857A"
  paths:
  - testPathName: "trimWhenSizeEquals0"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "THIS"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "targetClassObject"
    branches:
    - lineNumber: 3011
      expression: "size == 0"
      range: "(3011,13)-(3011,21)"
      evaluatedAs: true
- method:
    name: "validateIndex"
    sourceCodeSignature: "void validateIndex(final int index)"
    returnType: "void"
    parameters:
    - name: "index"
      type: "int"
    instructionFingerprint: "245CD0FAFA156821F130E2898F682766"
  paths:
  - testPathName: "validateIndexWhenIndexGreaterThanSizeThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "index"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "index"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 3039
      expression: "index < 0"
      range: "(3039,13)-(3039,21)"
      evaluatedAs: false
    - lineNumber: 3039
      expression: "index > size"
      range: "(3039,26)-(3039,37)"
      evaluatedAs: true
  - testPathName: "validateIndexWhenIndexNotGreaterThanSize"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "index"
      valueUuid: "index"
    - type: "RESULT"
      name: "result"
      valueUuid: "void"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "index"
    - sapientType: "VOID"
      uuid: "void"
    branches:
    - lineNumber: 3039
      expression: "index < 0"
      range: "(3039,13)-(3039,21)"
      evaluatedAs: false
    - lineNumber: 3039
      expression: "index > size"
      range: "(3039,26)-(3039,37)"
      evaluatedAs: false
- method:
    name: "validateRange"
    sourceCodeSignature: "int validateRange(final int startIndex, int endIndex)"
    returnType: "int"
    parameters:
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "9816F93943AC3B5ED99E40B3284C3EDA"
  paths:
  - testPathName: "validateRangeWhenStartIndexLessThan0ThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "index"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "startIndex"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 3054
      expression: "startIndex < 0"
      range: "(3054,13)-(3054,26)"
      evaluatedAs: true
  - testPathName: "validateRangeWhenStartIndexGreaterThanEndIndexThrowsStringIndexOutOfBoundsException"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringIndexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.StringIndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "end < start"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.StringIndexOutOfBoundsException"
      uuid: "stringIndexOutOfBoundsException"
    branches:
    - lineNumber: 3054
      expression: "startIndex < 0"
      range: "(3054,13)-(3054,26)"
      evaluatedAs: false
    - lineNumber: 3057
      expression: "endIndex > size"
      range: "(3057,13)-(3057,27)"
      evaluatedAs: true
    - lineNumber: 3060
      expression: "startIndex > endIndex"
      range: "(3060,13)-(3060,33)"
      evaluatedAs: true
  - testPathName: "validateRangeWhenStartIndexNotGreaterThanEndIndex"
    constructorSignature: "<init>(int) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "fieldint2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.text.StrBuilder"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "initialCapacity"
      valueType: "org.apache.commons.lang3.text.StrBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "fieldint2"
    branches:
    - lineNumber: 3054
      expression: "startIndex < 0"
      range: "(3054,13)-(3054,26)"
      evaluatedAs: false
    - lineNumber: 3057
      expression: "endIndex > size"
      range: "(3057,13)-(3057,27)"
      evaluatedAs: true
    - lineNumber: 3060
      expression: "startIndex > endIndex"
      range: "(3060,13)-(3060,33)"
      evaluatedAs: false
