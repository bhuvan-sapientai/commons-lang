---
targetClass:
  fullClassName: "org.apache.commons.lang3.ClassUtils"
methods:
- method:
    name: "comparator"
    sourceCodeSignature: "Comparator<Class<?>> comparator()"
    returnType: "java.util.Comparator"
    genericReturnType: "java.lang.Class<?>"
    instructionFingerprint: "0E29006D4103A0C70736278A1561BA2F"
  paths:
  - testPathName: "comparatorTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "RESULT"
      name: "result"
      valueUuid: "comparator2NotNull"
    disabled: false
    allValues:
    - sapientType: "NOT_NULL"
      valueType: "java.util.Comparator"
      genericValueType: "java.lang.Class<?>"
      uuid: "comparator2NotNull"
- method:
    name: "convertClassesToClassNames"
    sourceCodeSignature: "List<String> convertClassesToClassNames(final List<Class<?>>\
      \ classes)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    parameters:
    - name: "classes"
      type: "java.util.List"
      genericType: "java.lang.Class<?>"
    instructionFingerprint: "A9F3BD37740FC44355BF17F2571BE324"
  paths:
  - testPathName: "convertClassesToClassNamesWhenClassesIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "RESULT"
      name: "result"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "classes"
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    branches:
    - lineNumber: 183
      expression: "classes == null"
      range: "(183,16)-(183,30)"
      evaluatedAs: true
  - testPathName: "convertClassesToClassNamesWhenClassesIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getName(class35,valueIfNull):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "object18"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "CLASS"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.Class"
          genericValueType: "?"
          uuid: "class35"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "classes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "return_of_getName1"
          valueType: "java.lang.String"
          uuid: "string11"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "object18"
    branches:
    - lineNumber: 183
      expression: "classes == null"
      range: "(183,16)-(183,30)"
      evaluatedAs: false
- method:
    name: "convertClassNamesToClasses"
    sourceCodeSignature: "List<Class<?>> convertClassNamesToClasses(final List<String>\
      \ classNames)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.Class<?>"
    parameters:
    - name: "classNames"
      type: "java.util.List"
      genericType: "java.lang.String"
    instructionFingerprint: "4C810A6EF872BB3163313A3804CD2FF9"
  paths:
  - testPathName: "convertClassNamesToClassesWhenClassNamesIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classNames"
      valueUuid: "classNames"
    - type: "RESULT"
      name: "result"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "classNames"
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    branches:
    - lineNumber: 199
      expression: "classNames == null"
      range: "(199,13)-(199,30)"
      evaluatedAs: true
  - testPathName: "convertClassNamesToClassesWhenClassNamesIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classNames"
      valueUuid: "classNames"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.String"
          uuid: "string11"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "classNames"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "int1"
        values:
        - sapientType: "CLASS"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.Class"
          uuid: "class35"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "arrayList"
    branches:
    - lineNumber: 199
      expression: "classNames == null"
      range: "(199,13)-(199,30)"
      evaluatedAs: false
  - testPathName: "convertClassNamesToClassesWhenCaughtException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classNames"
      valueUuid: "classNames"
    - type: "STATIC"
      name: "Class.class"
      valueUuid: "Class.class"
      methodExercised:
        expression: "forName(string11):class35"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "classNamesItem1"
          valueType: "java.lang.String"
          uuid: "string11"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "classNames"
    - sapientType: "MOCK"
      valueType: "java.lang.Class"
      uuid: "Class.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "class35"
    - sapientType: "BASIC"
      content: !<regular>
        value: "classNamesItem1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "int1"
        values:
        - sapientType: "NULL"
          uuid: "arrayListItem1"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "arrayList"
    branches:
    - lineNumber: 199
      expression: "classNames == null"
      range: "(199,13)-(199,30)"
      evaluatedAs: false
    - lineNumber: 206
      expression: "catch-exception (Exception)"
      range: "(206,15)-(206,39)"
      evaluatedAs: true
      internalMethodName: "lambda$convertClassNamesToClasses$3"
    catchBlockExercised:
      idExternalInstruction: 22
      id: 4
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getAbbreviatedName"
    sourceCodeSignature: "String getAbbreviatedName(final Class<?> cls, final int\
      \ lengthHint)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    - name: "lengthHint"
      type: "int"
    instructionFingerprint: "34D5C3A25056D0D697BB3C6A99FF495B"
  paths:
  - testPathName: "getAbbreviatedNameWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "lengthHint"
      valueUuid: "lengthHint"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "lengthHint"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 224
      expression: "cls == null"
      range: "(224,13)-(224,23)"
      evaluatedAs: true
  - testPathName: "getAbbreviatedNameWhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "lengthHint"
      valueUuid: "lengthHint"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAbbreviatedName(string11,lengthHint):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "lengthHint"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAbbreviatedName1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 224
      expression: "cls == null"
      range: "(224,13)-(224,23)"
      evaluatedAs: false
- method:
    name: "getAbbreviatedName"
    sourceCodeSignature: "String getAbbreviatedName(final String className, final\
      \ int lengthHint)"
    returnType: "java.lang.String"
    parameters:
    - name: "className"
      type: "java.lang.String"
    - name: "lengthHint"
      type: "int"
    instructionFingerprint: "8D8CA6F86F250E74D65B7219C9325123"
  paths:
  - testPathName: "getAbbreviatedName1WhenLengthHintLessThanOrEqualsTo0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "lengthHint"
      valueUuid: "lengthHint"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "lengthHint"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "len must be > 0"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 304
      expression: "lengthHint <= 0"
      range: "(304,13)-(304,27)"
      evaluatedAs: true
  - testPathName: "getAbbreviatedName1WhenClassNameIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "lengthHint"
      valueUuid: "lengthHint"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "lengthHint"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 304
      expression: "lengthHint <= 0"
      range: "(304,13)-(304,27)"
      evaluatedAs: false
    - lineNumber: 307
      expression: "className == null"
      range: "(307,13)-(307,29)"
      evaluatedAs: true
  - testPathName: "getAbbreviatedName1WhenClassNameLengthLessThanOrEqualsToLengthHint"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "lengthHint"
      valueUuid: "lengthHint"
    - type: "RESULT"
      name: "result"
      valueUuid: "className"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "lengthHint"
    branches:
    - lineNumber: 304
      expression: "lengthHint <= 0"
      range: "(304,13)-(304,27)"
      evaluatedAs: false
    - lineNumber: 307
      expression: "className == null"
      range: "(307,13)-(307,29)"
      evaluatedAs: false
    - lineNumber: 310
      expression: "className.length() <= lengthHint"
      range: "(310,13)-(310,44)"
      evaluatedAs: true
  - testPathName: "getAbbreviatedName1WhenSourceLessThanAbbreviatedLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "lengthHint"
      valueUuid: "lengthHint"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "lengthHint"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 304
      expression: "lengthHint <= 0"
      range: "(304,13)-(304,27)"
      evaluatedAs: false
    - lineNumber: 307
      expression: "className == null"
      range: "(307,13)-(307,29)"
      evaluatedAs: false
    - lineNumber: 310
      expression: "className.length() <= lengthHint"
      range: "(310,13)-(310,44)"
      evaluatedAs: false
    - lineNumber: 316
      expression: "source < abbreviated.length"
      range: "(316,16)-(316,42)"
      evaluatedAs: true
    - lineNumber: 319
      expression: "source < abbreviated.length"
      range: "(319,20)-(319,46)"
      evaluatedAs: true
    - lineNumber: 319
      expression: "abbreviated[source] != '.'"
      range: "(319,51)-(319,76)"
      evaluatedAs: true
    - lineNumber: 1564
      expression: "source >= originalLength"
      range: "(1564,16)-(1564,39)"
      evaluatedAs: false
      internalMethodName: "useFull"
    - lineNumber: 1564
      expression: "runAheadTarget + originalLength - source <= desiredLength"
      range: "(1564,44)-(1564,100)"
      evaluatedAs: true
      internalMethodName: "useFull"
    - lineNumber: 324
      expression: "useFull(runAheadTarget, source, abbreviated.length, lengthHint)"
      range: "(324,17)-(324,79)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "source < abbreviated.length"
      range: "(329,17)-(329,43)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "getAbbreviatedName1WhenTargetNotGreaterThanRunAheadTargetAndSourceLessThanAbbreviatedLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "lengthHint"
      valueUuid: "lengthHint"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "lengthHint"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 304
      expression: "lengthHint <= 0"
      range: "(304,13)-(304,27)"
      evaluatedAs: false
    - lineNumber: 307
      expression: "className == null"
      range: "(307,13)-(307,29)"
      evaluatedAs: false
    - lineNumber: 310
      expression: "className.length() <= lengthHint"
      range: "(310,13)-(310,44)"
      evaluatedAs: false
    - lineNumber: 316
      expression: "source < abbreviated.length"
      range: "(316,16)-(316,42)"
      evaluatedAs: true
    - lineNumber: 319
      expression: "source < abbreviated.length"
      range: "(319,20)-(319,46)"
      evaluatedAs: true
    - lineNumber: 319
      expression: "abbreviated[source] != '.'"
      range: "(319,51)-(319,76)"
      evaluatedAs: true
    - lineNumber: 1564
      expression: "source >= originalLength"
      range: "(1564,16)-(1564,39)"
      evaluatedAs: false
      internalMethodName: "useFull"
    - lineNumber: 1564
      expression: "runAheadTarget + originalLength - source <= desiredLength"
      range: "(1564,44)-(1564,100)"
      evaluatedAs: false
      internalMethodName: "useFull"
    - lineNumber: 324
      expression: "useFull(runAheadTarget, source, abbreviated.length, lengthHint)"
      range: "(324,17)-(324,79)"
      evaluatedAs: false
    - lineNumber: 324
      expression: "target > runAheadTarget"
      range: "(324,84)-(324,106)"
      evaluatedAs: false
    - lineNumber: 329
      expression: "source < abbreviated.length"
      range: "(329,17)-(329,43)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
- method:
    name: "getAllInterfaces"
    sourceCodeSignature: "List<Class<?>> getAllInterfaces(final Class<?> cls)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.Class<?>"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "7067B3E6BA3B754B0845B795385D9612"
  paths:
  - testPathName: "getAllInterfacesWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    branches:
    - lineNumber: 349
      expression: "cls == null"
      range: "(349,13)-(349,23)"
      evaluatedAs: true
  - testPathName: "getAllInterfacesWhenInterfacesFoundAddI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getInterfaces() : java.lang.Class[]<?>"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters:
        - name: "c"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters: []
              values:
              - sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "class35"
            valueType: "java.util.LinkedHashSet"
            genericValueType: "java.lang.Class<?>"
            uuid: "linkedHashSet"
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "arrayList"
    branches:
    - lineNumber: 349
      expression: "cls == null"
      range: "(349,13)-(349,23)"
      evaluatedAs: false
    - lineNumber: 366
      expression: "cls != null"
      range: "(366,16)-(366,26)"
      evaluatedAs: true
      internalMethodName: "getAllInterfaces"
    - lineNumber: 369
      expression: "for-each(interfaces)"
      range: "(369,37)-(369,46)"
      evaluatedAs: true
      internalMethodName: "getAllInterfaces"
    - lineNumber: 370
      expression: "interfacesFound.add(i)"
      range: "(370,21)-(370,42)"
      evaluatedAs: true
      internalMethodName: "getAllInterfaces"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
- method:
    name: "getAllSuperclasses"
    sourceCodeSignature: "List<Class<?>> getAllSuperclasses(final Class<?> cls)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.Class<?>"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "203E7285145AC19406AD083E814230AC"
  paths:
  - testPathName: "getAllSuperclassesWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    branches:
    - lineNumber: 386
      expression: "cls == null"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
  - testPathName: "getAllSuperclassesWhenSuperclassIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getSuperclass() : java.lang.Class<?\
        \ super java.lang.Object>"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "CLASS"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.Class"
          genericValueType: "java.lang.Object"
          uuid: "class35"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "arrayList"
    branches:
    - lineNumber: 386
      expression: "cls == null"
      range: "(386,13)-(386,23)"
      evaluatedAs: false
    - lineNumber: 391
      expression: "superclass != null"
      range: "(391,16)-(391,33)"
      evaluatedAs: true
- method:
    name: "getCanonicalName"
    sourceCodeSignature: "String getCanonicalName(final Class<?> cls)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "EAEE8148A44B998D5A8357810ECACE85"
  paths:
  - testPathName: "getCanonicalNameTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getCanonicalName(cls,valueIfNull):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "valueIfNull"
- method:
    name: "getCanonicalName"
    sourceCodeSignature: "String getCanonicalName(final Class<?> cls, final String\
      \ valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "ECA0763168BE67FD07D0687C3F1E3E46"
  paths:
  - testPathName: "getCanonicalName1WhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 420
      expression: "cls == null"
      range: "(420,13)-(420,23)"
      evaluatedAs: true
  - testPathName: "getCanonicalName1WhenCanonicalNameIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 420
      expression: "cls == null"
      range: "(420,13)-(420,23)"
      evaluatedAs: false
    - lineNumber: 424
      expression: "canonicalName == null"
      range: "(424,16)-(424,36)"
      evaluatedAs: true
  - testPathName: "getCanonicalName1WhenCanonicalNameIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 420
      expression: "cls == null"
      range: "(420,13)-(420,23)"
      evaluatedAs: false
    - lineNumber: 424
      expression: "canonicalName == null"
      range: "(424,16)-(424,36)"
      evaluatedAs: false
- method:
    name: "getCanonicalName"
    sourceCodeSignature: "String getCanonicalName(final Object object)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    instructionFingerprint: "A6E26086861FB45E99066414772AF059"
  paths:
  - testPathName: "getCanonicalName2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getCanonicalName(object,valueIfNull):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "valueIfNull"
- method:
    name: "getCanonicalName"
    sourceCodeSignature: "String getCanonicalName(final Object object, final String\
      \ valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "51F4B2981956D70C01478D9234676032"
  paths:
  - testPathName: "getCanonicalName3WhenObjectIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 449
      expression: "object == null"
      range: "(449,13)-(449,26)"
      evaluatedAs: true
  - testPathName: "getCanonicalName3WhenCanonicalNameIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 449
      expression: "object == null"
      range: "(449,13)-(449,26)"
      evaluatedAs: false
    - lineNumber: 453
      expression: "canonicalName == null"
      range: "(453,16)-(453,36)"
      evaluatedAs: true
  - testPathName: "getCanonicalName3WhenCanonicalNameIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 449
      expression: "object == null"
      range: "(449,13)-(449,26)"
      evaluatedAs: false
    - lineNumber: 453
      expression: "canonicalName == null"
      range: "(453,16)-(453,36)"
      evaluatedAs: false
- method:
    name: "getClass"
    sourceCodeSignature: "Class<?> getClass(final ClassLoader classLoader, final String\
      \ className)"
    returnType: "java.lang.Class"
    genericReturnType: "?"
    throwsExceptions:
    - "java.lang.ClassNotFoundException"
    parameters:
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    - name: "className"
      type: "java.lang.String"
    instructionFingerprint: "94B82C712A8897A652401542B80BE7F3"
  paths:
  - testPathName: "getClassTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getClass(classLoader,className,initialize):class35"
    - type: "RESULT"
      name: "result"
      valueUuid: "class35"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "initialize"
- method:
    name: "getClass"
    sourceCodeSignature: "Class<?> getClass(final ClassLoader classLoader, final String\
      \ className, final boolean initialize)"
    returnType: "java.lang.Class"
    genericReturnType: "?"
    throwsExceptions:
    - "java.lang.ClassNotFoundException"
    parameters:
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    - name: "className"
      type: "java.lang.String"
    - name: "initialize"
      type: "boolean"
    instructionFingerprint: "44D873A921CA84B6B98AB7D3A640AACB"
  paths:
  - testPathName: "getClass1WhenClazzIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "initialize"
      valueUuid: "initialize"
    - type: "RESULT"
      name: "result"
      valueUuid: "class35"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "initialize"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    branches:
    - lineNumber: 532
      expression: "clazz != null"
      range: "(532,20)-(532,32)"
      evaluatedAs: true
  - testPathName: "getClass1WhenLastDotIndexEqualsMinus1ThrowsClassNotFoundException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "initialize"
      valueUuid: "initialize"
    - type: "RESULT"
      name: "result"
      valueUuid: "classNotFoundException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "initialize"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ClassNotFoundException"
        parameters: []
      valueType: "java.lang.ClassNotFoundException"
      uuid: "classNotFoundException"
    branches:
    - lineNumber: 532
      expression: "clazz != null"
      range: "(532,20)-(532,32)"
      evaluatedAs: true
    - lineNumber: 533
      expression: "catch-exception (ClassNotFoundException)"
      range: "(533,11)-(533,48)"
      evaluatedAs: true
    - lineNumber: 537
      expression: "lastDotIndex != -1"
      range: "(537,17)-(537,34)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.ClassNotFoundException"
  - testPathName: "getClass1WhenAbbreviationIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "initialize"
      valueUuid: "initialize"
    - type: "RESULT"
      name: "result"
      valueUuid: "class36"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)\
        \ : java.lang.Class"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "initialize"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class36"
    branches:
    - lineNumber: 532
      expression: "clazz != null"
      range: "(532,20)-(532,32)"
      evaluatedAs: false
    - lineNumber: 1501
      expression: "canonicalName.endsWith(\\\"[]\\\")"
      range: "(1501,13)-(1501,40)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    - lineNumber: 1503
      expression: "canonicalName.endsWith(\\\"[]\\\")"
      range: "(1503,20)-(1503,47)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    - lineNumber: 1508
      expression: "abbreviation != null"
      range: "(1508,17)-(1508,36)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "getClass1WhenAbbreviationIsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "initialize"
      valueUuid: "initialize"
    - type: "RESULT"
      name: "result"
      valueUuid: "class36"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)\
        \ : java.lang.Class"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "initialize"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class36"
    branches:
    - lineNumber: 532
      expression: "clazz != null"
      range: "(532,20)-(532,32)"
      evaluatedAs: false
    - lineNumber: 1501
      expression: "canonicalName.endsWith(\\\"[]\\\")"
      range: "(1501,13)-(1501,40)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    - lineNumber: 1503
      expression: "canonicalName.endsWith(\\\"[]\\\")"
      range: "(1503,20)-(1503,47)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    - lineNumber: 1508
      expression: "abbreviation != null"
      range: "(1508,17)-(1508,36)"
      evaluatedAs: false
      internalMethodName: "toCanonicalName"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "getClass1WhenCaughtClassNotFoundExceptionAndLastDotIndexNotEqualsMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "initialize"
      valueUuid: "initialize"
    - type: "STATIC"
      name: "Class.class"
      valueUuid: "Class.class"
      methodExercised:
        expression: "forName(string15,initialize,classLoader):class36"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
    - type: "RESULT"
      name: "result"
      valueUuid: "class37"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)\
        \ : java.lang.Class"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "initialize"
    - sapientType: "MOCK"
      valueType: "java.lang.Class"
      uuid: "Class.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class36"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string15"
      valueType: "java.lang.String"
      uuid: "string15"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class37"
    branches:
    - lineNumber: 532
      expression: "clazz != null"
      range: "(532,20)-(532,32)"
      evaluatedAs: false
    - lineNumber: 1501
      expression: "canonicalName.endsWith(\\\"[]\\\")"
      range: "(1501,13)-(1501,40)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    - lineNumber: 1503
      expression: "canonicalName.endsWith(\\\"[]\\\")"
      range: "(1503,20)-(1503,47)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    - lineNumber: 1508
      expression: "abbreviation != null"
      range: "(1508,17)-(1508,36)"
      evaluatedAs: true
      internalMethodName: "toCanonicalName"
    - lineNumber: 533
      expression: "catch-exception (ClassNotFoundException)"
      range: "(533,11)-(533,48)"
      evaluatedAs: true
    - lineNumber: 537
      expression: "lastDotIndex != -1"
      range: "(537,17)-(537,34)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.ClassNotFoundException"
- method:
    name: "getClass"
    sourceCodeSignature: "Class<?> getClass(final String className)"
    returnType: "java.lang.Class"
    genericReturnType: "?"
    throwsExceptions:
    - "java.lang.ClassNotFoundException"
    parameters:
    - name: "className"
      type: "java.lang.String"
    instructionFingerprint: "E894DDDE203B720C70000A229E9B1CBA"
  paths:
  - testPathName: "getClass2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getClass(className,initialize):class35"
    - type: "RESULT"
      name: "result"
      valueUuid: "class35"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "initialize"
- method:
    name: "getClass"
    sourceCodeSignature: "Class<?> getClass(final String className, final boolean\
      \ initialize)"
    returnType: "java.lang.Class"
    genericReturnType: "?"
    throwsExceptions:
    - "java.lang.ClassNotFoundException"
    parameters:
    - name: "className"
      type: "java.lang.String"
    - name: "initialize"
      type: "boolean"
    instructionFingerprint: "6BFECBF56D80E7BF8D5BB3C2EF54C67F"
  paths:
  - testPathName: "getClass3WhenContextCLIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "INPUT"
      name: "initialize"
      valueUuid: "initialize"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getClass(classLoader,className,initialize):class35"
    - type: "RESULT"
      name: "result"
      valueUuid: "class35"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "initialize"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.lang.Thread"
            method: "currentThread"
            methodParameters: []
          valueType: "java.lang.Thread"
          uuid: "thread"
        methodParameters: []
        methodName: "getContextClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    branches:
    - lineNumber: 577
      expression: "contextCL == null"
      range: "(577,36)-(577,52)"
      evaluatedAs: false
- method:
    name: "getComponentType"
    sourceCodeSignature: "<T> Class<T> getComponentType(final Class<T[]> cls)"
    returnType: "java.lang.Class"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "java.lang.Object[]"
    instructionFingerprint: "93E0E033E7EFF101C353F5AC7421F3E2"
  paths:
  - testPathName: "getComponentTypeWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "class35"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object[]"
      uuid: "cls"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      uuid: "class35"
    branches:
    - lineNumber: 592
      expression: "cls == null"
      range: "(592,16)-(592,26)"
      evaluatedAs: true
  - testPathName: "getComponentTypeWhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "class35"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object[]"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class35"
    branches:
    - lineNumber: 592
      expression: "cls == null"
      range: "(592,16)-(592,26)"
      evaluatedAs: false
- method:
    name: "getName"
    sourceCodeSignature: "String getName(final Class<?> cls)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "54936F4071523F168EF9308279D4A826"
  paths:
  - testPathName: "getNameTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getName(cls,valueIfNull):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "valueIfNull"
- method:
    name: "getName"
    sourceCodeSignature: "String getName(final Class<?> cls, final String valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "A21F13DF0EBF21ACFFCA0F8A3DDF1B1C"
  paths:
  - testPathName: "getName1WhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 617
      expression: "cls == null"
      range: "(617,16)-(617,26)"
      evaluatedAs: true
  - testPathName: "getName1WhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 617
      expression: "cls == null"
      range: "(617,16)-(617,26)"
      evaluatedAs: false
- method:
    name: "getName"
    sourceCodeSignature: "String getName(final Object object)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    instructionFingerprint: "C13EDD1A63C2A8509953EC18F5C749E1"
  paths:
  - testPathName: "getName2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getName(object,valueIfNull):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "valueIfNull"
- method:
    name: "getName"
    sourceCodeSignature: "String getName(final Object object, final String valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "5E635D9375A0B4D387F840AECE47C7AE"
  paths:
  - testPathName: "getName3WhenObjectIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 642
      expression: "object == null"
      range: "(642,16)-(642,29)"
      evaluatedAs: true
  - testPathName: "getName3WhenObjectIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 642
      expression: "object == null"
      range: "(642,16)-(642,29)"
      evaluatedAs: false
- method:
    name: "getPackageCanonicalName"
    sourceCodeSignature: "String getPackageCanonicalName(final Class<?> cls)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "0796A191091644EC2362C9B209E9C04B"
  paths:
  - testPathName: "getPackageCanonicalNameWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 653
      expression: "cls == null"
      range: "(653,13)-(653,23)"
      evaluatedAs: true
  - testPathName: "getPackageCanonicalNameWhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getPackageCanonicalName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPackageCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 653
      expression: "cls == null"
      range: "(653,13)-(653,23)"
      evaluatedAs: false
- method:
    name: "getPackageCanonicalName"
    sourceCodeSignature: "String getPackageCanonicalName(final Object object, final\
      \ String valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "DD5EFE350C980BDE25ACE1A608951614"
  paths:
  - testPathName: "getPackageCanonicalName1WhenObjectIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 668
      expression: "object == null"
      range: "(668,13)-(668,26)"
      evaluatedAs: true
  - testPathName: "getPackageCanonicalName1WhenObjectIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getPackageCanonicalName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPackageCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 668
      expression: "object == null"
      range: "(668,13)-(668,26)"
      evaluatedAs: false
- method:
    name: "getPackageCanonicalName"
    sourceCodeSignature: "String getPackageCanonicalName(final String name)"
    returnType: "java.lang.String"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "B8AD1C1C2CB80F891F6BA0D89A13E1E5"
  paths:
  - testPathName: "getPackageCanonicalName2Test"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "name"
      valueUuid: "name"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getCanonicalName(name):string11"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getPackageName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: true
    failureReason:
      reason: "PRIVATE_METHOD_TODO_COMMENT"
      details: "PRIVATE_METHOD_TODO_COMMENT"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPackageName1"
      valueType: "java.lang.String"
      uuid: "string12"
- method:
    name: "getPackageName"
    sourceCodeSignature: "String getPackageName(final Class<?> cls)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "C1DEEE6A634E72DB2E8D6A6235BFDF6A"
  paths:
  - testPathName: "getPackageNameWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 699
      expression: "cls == null"
      range: "(699,13)-(699,23)"
      evaluatedAs: true
  - testPathName: "getPackageNameWhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getPackageName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPackageName1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 699
      expression: "cls == null"
      range: "(699,13)-(699,23)"
      evaluatedAs: false
- method:
    name: "getPackageName"
    sourceCodeSignature: "String getPackageName(final Object object, final String\
      \ valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "580A822562B0E4C3D7AEEAF5AE3D8F1D"
  paths:
  - testPathName: "getPackageName1WhenObjectIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 713
      expression: "object == null"
      range: "(713,13)-(713,26)"
      evaluatedAs: true
  - testPathName: "getPackageName1WhenObjectIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getPackageName(class35):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPackageName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    branches:
    - lineNumber: 713
      expression: "object == null"
      range: "(713,13)-(713,26)"
      evaluatedAs: false
- method:
    name: "getPackageName"
    sourceCodeSignature: "String getPackageName(String className)"
    returnType: "java.lang.String"
    parameters:
    - name: "className"
      type: "java.lang.String"
    instructionFingerprint: "F3F7EECCCED73FEDFF083F897D4063F1"
  paths:
  - testPathName: "getPackageName2WhenStringUtilsIsEmptyClassName"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 733
      expression: "StringUtils.isEmpty(className)"
      range: "(733,13)-(733,42)"
      evaluatedAs: true
  - testPathName: "getPackageName2WhenClassNameCharAtClassNameLengthMinus1Equals___AndIEqualsMinus1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "[L;"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 733
      expression: "StringUtils.isEmpty(className)"
      range: "(733,13)-(733,42)"
      evaluatedAs: false
    - lineNumber: 738
      expression: "className.charAt(0) == '['"
      range: "(738,16)-(738,41)"
      evaluatedAs: true
    - lineNumber: 742
      expression: "className.charAt(0) == 'L'"
      range: "(742,13)-(742,38)"
      evaluatedAs: true
    - lineNumber: 742
      expression: "className.charAt(className.length() - 1) == ';'"
      range: "(742,43)-(742,89)"
      evaluatedAs: true
    - lineNumber: 747
      expression: "i == -1"
      range: "(747,13)-(747,19)"
      evaluatedAs: true
  - testPathName: "getPackageName2WhenINotEqualsMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "RESULT"
      name: "result"
      valueUuid: "string13"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string13"
    branches:
    - lineNumber: 733
      expression: "StringUtils.isEmpty(className)"
      range: "(733,13)-(733,42)"
      evaluatedAs: false
    - lineNumber: 738
      expression: "className.charAt(0) == '['"
      range: "(738,16)-(738,41)"
      evaluatedAs: true
    - lineNumber: 742
      expression: "className.charAt(0) == 'L'"
      range: "(742,13)-(742,38)"
      evaluatedAs: true
    - lineNumber: 742
      expression: "className.charAt(className.length() - 1) == ';'"
      range: "(742,43)-(742,89)"
      evaluatedAs: true
    - lineNumber: 747
      expression: "i == -1"
      range: "(747,13)-(747,19)"
      evaluatedAs: false
- method:
    name: "getPublicMethod"
    sourceCodeSignature: "Method getPublicMethod(final Class<?> cls, final String\
      \ methodName, final Class<?>... parameterTypes)"
    returnType: "java.lang.reflect.Method"
    throwsExceptions:
    - "java.lang.NoSuchMethodException"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    - name: "methodName"
      type: "java.lang.String"
    - name: "parameterTypes"
      type: "java.lang.Class[]"
      genericType: "?"
    instructionFingerprint: "F063919321DFCC40A9CBA373B4B00D64"
  paths:
  - testPathName: "getPublicMethodWhenIsPublicDeclaredMethodGetDeclaringClass"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "methodName"
      valueUuid: "methodName"
    - type: "INPUT"
      name: "parameterTypes"
      valueUuid: "parameterTypes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(class35):boolean10"
    - type: "RESULT"
      name: "result"
      valueUuid: "method"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>[])\
        \ : java.lang.reflect.Method"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "methodName1"
      valueType: "java.lang.String"
      uuid: "methodName"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "parameterTypes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Method"
      uuid: "method"
    branches:
    - lineNumber: 776
      expression: "isPublic(declaredMethod.getDeclaringClass())"
      range: "(776,13)-(776,56)"
      evaluatedAs: true
  - testPathName: "getPublicMethodWhenIsPublicNotCandidateClassThrowsNoSuchMethodException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "methodName"
      valueUuid: "methodName"
    - type: "INPUT"
      name: "parameterTypes"
      valueUuid: "parameterTypes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(class35):boolean10"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllInterfaces(cls):list"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllSuperclasses(cls):list2"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(object18):boolean13"
    - type: "RESULT"
      name: "result"
      valueUuid: "noSuchMethodException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>[])\
        \ : java.lang.reflect.Method"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "methodName"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "parameterTypes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "CLASS"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.Class"
          genericValueType: "?"
          uuid: "object18"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "object18"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NoSuchMethodException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Can't find a public method for A B"
            valueType: "java.lang.String"
            uuid: "string12"
      valueType: "java.lang.NoSuchMethodException"
      uuid: "noSuchMethodException"
    branches:
    - lineNumber: 776
      expression: "isPublic(declaredMethod.getDeclaringClass())"
      range: "(776,13)-(776,56)"
      evaluatedAs: false
    - lineNumber: 783
      expression: "for-each(candidateClasses)"
      range: "(783,46)-(783,61)"
      evaluatedAs: true
    - lineNumber: 784
      expression: "!isPublic(candidateClass)"
      range: "(784,17)-(784,41)"
      evaluatedAs: true
  - testPathName: "getPublicMethodWhenIsPublicNotCandidateClassAndCaughtNoSuchMethodExceptionThrowsNoSuchMethodException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "methodName"
      valueUuid: "methodName"
    - type: "INPUT"
      name: "parameterTypes"
      valueUuid: "parameterTypes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(class35):boolean10"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllInterfaces(cls):list"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllSuperclasses(cls):list2"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(object18):boolean13"
    - type: "RESULT"
      name: "result"
      valueUuid: "noSuchMethodException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>[])\
        \ : java.lang.reflect.Method"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "methodName"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "parameterTypes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "CLASS"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.Class"
          genericValueType: "?"
          uuid: "object18"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "object18"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NoSuchMethodException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Can't find a public method for A B"
            valueType: "java.lang.String"
            uuid: "string12"
      valueType: "java.lang.NoSuchMethodException"
      uuid: "noSuchMethodException"
    branches:
    - lineNumber: 776
      expression: "isPublic(declaredMethod.getDeclaringClass())"
      range: "(776,13)-(776,56)"
      evaluatedAs: false
    - lineNumber: 783
      expression: "for-each(candidateClasses)"
      range: "(783,46)-(783,61)"
      evaluatedAs: true
    - lineNumber: 784
      expression: "!isPublic(candidateClass)"
      range: "(784,17)-(784,41)"
      evaluatedAs: true
    - lineNumber: 790
      expression: "catch-exception (NoSuchMethodException)"
      range: "(790,15)-(790,51)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.NoSuchMethodException"
  - testPathName: "getPublicMethodWhenIsPublicCandidateClassAndCaughtNoSuchMethodExceptionThrowsNoSuchMethodException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "methodName"
      valueUuid: "methodName"
    - type: "INPUT"
      name: "parameterTypes"
      valueUuid: "parameterTypes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(class35):boolean10"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllInterfaces(cls):list"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllSuperclasses(cls):list2"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(object18):boolean13"
    - type: "RESULT"
      name: "result"
      valueUuid: "noSuchMethodException2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>[])\
        \ : java.lang.reflect.Method"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "methodName"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "parameterTypes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "CLASS"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.Class"
          genericValueType: "?"
          uuid: "object18"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "object18"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NoSuchMethodException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Can't find a public method for A B"
            valueType: "java.lang.String"
            uuid: "string12"
      valueType: "java.lang.NoSuchMethodException"
      uuid: "noSuchMethodException2"
    branches:
    - lineNumber: 776
      expression: "isPublic(declaredMethod.getDeclaringClass())"
      range: "(776,13)-(776,56)"
      evaluatedAs: false
    - lineNumber: 783
      expression: "for-each(candidateClasses)"
      range: "(783,46)-(783,61)"
      evaluatedAs: true
    - lineNumber: 784
      expression: "!isPublic(candidateClass)"
      range: "(784,17)-(784,41)"
      evaluatedAs: false
    - lineNumber: 790
      expression: "catch-exception (NoSuchMethodException)"
      range: "(790,15)-(790,51)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.NoSuchMethodException"
  - testPathName: "getPublicMethodWhenModifierIsPublicCandidateMethodGetDeclaringClassGetModifiers"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "methodName"
      valueUuid: "methodName"
    - type: "INPUT"
      name: "parameterTypes"
      valueUuid: "parameterTypes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(class35):boolean10"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllInterfaces(cls):list"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllSuperclasses(cls):list2"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(object18):boolean13"
    - type: "RESULT"
      name: "result"
      valueUuid: "method2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>[])\
        \ : java.lang.reflect.Method"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "methodName1"
      valueType: "java.lang.String"
      uuid: "methodName"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "parameterTypes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "CLASS"
          content: !<regular>
            value: "java.lang.Object"
          valueType: "java.lang.Class"
          genericValueType: "?"
          uuid: "object18"
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "object18"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Method"
      uuid: "method2"
    branches:
    - lineNumber: 776
      expression: "isPublic(declaredMethod.getDeclaringClass())"
      range: "(776,13)-(776,56)"
      evaluatedAs: false
    - lineNumber: 783
      expression: "for-each(candidateClasses)"
      range: "(783,46)-(783,61)"
      evaluatedAs: true
    - lineNumber: 784
      expression: "!isPublic(candidateClass)"
      range: "(784,17)-(784,41)"
      evaluatedAs: false
    - lineNumber: 793
      expression: "Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())"
      range: "(793,17)-(793,85)"
      evaluatedAs: true
  - testPathName: "getPublicMethodWhenModifierNotIsPublicCandidateMethodGetDeclaringClassGetModifiersThrowsNoSuchMethodException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "methodName"
      valueUuid: "methodName"
    - type: "INPUT"
      name: "parameterTypes"
      valueUuid: "parameterTypes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(class35):boolean10"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllInterfaces(cls):list"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getAllSuperclasses(cls):list2"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPublic(object18):boolean13"
    - type: "RESULT"
      name: "result"
      valueUuid: "noSuchMethodException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>[])\
        \ : java.lang.reflect.Method"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "methodName1"
      valueType: "java.lang.String"
      uuid: "methodName"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "parameterTypes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.Class<?>"
      uuid: "list2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "object18"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NoSuchMethodException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "s1"
            valueType: "java.lang.String"
            uuid: "string12"
      valueType: "java.lang.NoSuchMethodException"
      uuid: "noSuchMethodException"
    branches:
    - lineNumber: 776
      expression: "isPublic(declaredMethod.getDeclaringClass())"
      range: "(776,13)-(776,56)"
      evaluatedAs: false
    - lineNumber: 783
      expression: "for-each(candidateClasses)"
      range: "(783,46)-(783,61)"
      evaluatedAs: true
    - lineNumber: 784
      expression: "!isPublic(candidateClass)"
      range: "(784,17)-(784,41)"
      evaluatedAs: false
    - lineNumber: 793
      expression: "Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())"
      range: "(793,17)-(793,85)"
      evaluatedAs: false
- method:
    name: "getShortCanonicalName"
    sourceCodeSignature: "String getShortCanonicalName(final Class<?> cls)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "3B8E818EB7E1206CD2D6B0900718D261"
  paths:
  - testPathName: "getShortCanonicalNameWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 810
      expression: "cls == null"
      range: "(810,16)-(810,26)"
      evaluatedAs: true
  - testPathName: "getShortCanonicalNameWhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getShortCanonicalName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getShortCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 810
      expression: "cls == null"
      range: "(810,16)-(810,26)"
      evaluatedAs: false
- method:
    name: "getShortCanonicalName"
    sourceCodeSignature: "String getShortCanonicalName(final Object object, final\
      \ String valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "1E3529449A1B6F40A6ED39CAB6FCACA8"
  paths:
  - testPathName: "getShortCanonicalName1WhenObjectIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 823
      expression: "object == null"
      range: "(823,16)-(823,29)"
      evaluatedAs: true
  - testPathName: "getShortCanonicalName1WhenObjectIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getShortCanonicalName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getShortCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 823
      expression: "object == null"
      range: "(823,16)-(823,29)"
      evaluatedAs: false
- method:
    name: "getShortCanonicalName"
    sourceCodeSignature: "String getShortCanonicalName(final String canonicalName)"
    returnType: "java.lang.String"
    parameters:
    - name: "canonicalName"
      type: "java.lang.String"
    instructionFingerprint: "BDC25790AD42A090A3EE1684E324988A"
  paths:
  - testPathName: "getShortCanonicalName2Test"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "canonicalName"
      valueUuid: "canonicalName"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getCanonicalName(canonicalName):string11"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getShortClassName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: true
    failureReason:
      reason: "PRIVATE_METHOD_TODO_COMMENT"
      details: "PRIVATE_METHOD_TODO_COMMENT"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "canonicalName1"
      valueType: "java.lang.String"
      uuid: "canonicalName"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getCanonicalName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getShortClassName1"
      valueType: "java.lang.String"
      uuid: "string12"
- method:
    name: "getShortClassName"
    sourceCodeSignature: "String getShortClassName(final Class<?> cls)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "A4B844142B0CA6B47B55C6DB832C5C84"
  paths:
  - testPathName: "getShortClassNameWhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 937
      expression: "cls == null"
      range: "(937,13)-(937,23)"
      evaluatedAs: true
  - testPathName: "getShortClassNameWhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getShortClassName(string11):string12"
    - type: "RESULT"
      name: "result"
      valueUuid: "string12"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getShortClassName1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 937
      expression: "cls == null"
      range: "(937,13)-(937,23)"
      evaluatedAs: false
- method:
    name: "getShortClassName"
    sourceCodeSignature: "String getShortClassName(final Object object, final String\
      \ valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "D6D61BD41FCEBDBA65B9EE5BBDD5A616"
  paths:
  - testPathName: "getShortClassName1WhenObjectIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 957
      expression: "object == null"
      range: "(957,13)-(957,26)"
      evaluatedAs: true
  - testPathName: "getShortClassName1WhenObjectIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getShortClassName(class35):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getShortClassName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    branches:
    - lineNumber: 957
      expression: "object == null"
      range: "(957,13)-(957,26)"
      evaluatedAs: false
- method:
    name: "getShortClassName"
    sourceCodeSignature: "String getShortClassName(String className)"
    returnType: "java.lang.String"
    parameters:
    - name: "className"
      type: "java.lang.String"
    instructionFingerprint: "AACDD842079B58CC5C20135D1AC195F1"
  paths:
  - testPathName: "getShortClassName2WhenStringUtilsIsEmptyClassName"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 995
      expression: "StringUtils.isEmpty(className)"
      range: "(995,13)-(995,42)"
      evaluatedAs: true
  - testPathName: "getShortClassName2WhenReverseAbbreviationMapContainsKeyClassNameAndLastDotIdxEqualsMinus1AndInnerIdxNotEqualsMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "RESULT"
      name: "result"
      valueUuid: "string16"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string16"
    branches:
    - lineNumber: 995
      expression: "StringUtils.isEmpty(className)"
      range: "(995,13)-(995,42)"
      evaluatedAs: false
    - lineNumber: 1002
      expression: "className.startsWith(\\\"[\\\")"
      range: "(1002,13)-(1002,37)"
      evaluatedAs: true
    - lineNumber: 1003
      expression: "className.charAt(0) == '['"
      range: "(1003,20)-(1003,45)"
      evaluatedAs: true
    - lineNumber: 1008
      expression: "className.charAt(0) == 'L'"
      range: "(1008,17)-(1008,42)"
      evaluatedAs: true
    - lineNumber: 1008
      expression: "className.charAt(className.length() - 1) == ';'"
      range: "(1008,47)-(1008,93)"
      evaluatedAs: true
    - lineNumber: 1012
      expression: "reverseAbbreviationMap.containsKey(className)"
      range: "(1012,17)-(1012,61)"
      evaluatedAs: true
    - lineNumber: 1018
      expression: "lastDotIdx == -1"
      range: "(1018,76)-(1018,91)"
      evaluatedAs: true
    - lineNumber: 1020
      expression: "innerIdx != -1"
      range: "(1020,13)-(1020,26)"
      evaluatedAs: true
  - testPathName: "getShortClassName2WhenLastDotIdxNotEqualsMinus1AndInnerIdxEqualsMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "className"
      valueUuid: "className"
    - type: "RESULT"
      name: "result"
      valueUuid: "string15"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string15"
    branches:
    - lineNumber: 995
      expression: "StringUtils.isEmpty(className)"
      range: "(995,13)-(995,42)"
      evaluatedAs: false
    - lineNumber: 1002
      expression: "className.startsWith(\\\"[\\\")"
      range: "(1002,13)-(1002,37)"
      evaluatedAs: true
    - lineNumber: 1003
      expression: "className.charAt(0) == '['"
      range: "(1003,20)-(1003,45)"
      evaluatedAs: true
    - lineNumber: 1008
      expression: "className.charAt(0) == 'L'"
      range: "(1008,17)-(1008,42)"
      evaluatedAs: true
    - lineNumber: 1008
      expression: "className.charAt(className.length() - 1) == ';'"
      range: "(1008,47)-(1008,93)"
      evaluatedAs: true
    - lineNumber: 1012
      expression: "reverseAbbreviationMap.containsKey(className)"
      range: "(1012,17)-(1012,61)"
      evaluatedAs: true
    - lineNumber: 1018
      expression: "lastDotIdx == -1"
      range: "(1018,76)-(1018,91)"
      evaluatedAs: false
    - lineNumber: 1020
      expression: "innerIdx != -1"
      range: "(1020,13)-(1020,26)"
      evaluatedAs: false
- method:
    name: "getSimpleName"
    sourceCodeSignature: "String getSimpleName(final Class<?> cls)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "6B381B413810EAB5F40FE2F478D12FC1"
  paths:
  - testPathName: "getSimpleNameTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getSimpleName(cls,valueIfNull):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getSimpleName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "valueIfNull"
- method:
    name: "getSimpleName"
    sourceCodeSignature: "String getSimpleName(final Class<?> cls, final String valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "E5B805498FA4C1C63545A2ED348F6152"
  paths:
  - testPathName: "getSimpleName1WhenClsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 1048
      expression: "cls == null"
      range: "(1048,16)-(1048,26)"
      evaluatedAs: true
  - testPathName: "getSimpleName1WhenClsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 1048
      expression: "cls == null"
      range: "(1048,16)-(1048,26)"
      evaluatedAs: false
- method:
    name: "getSimpleName"
    sourceCodeSignature: "String getSimpleName(final Object object)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    instructionFingerprint: "33C8BDB69F8C83FA87F8DF4AC08ADD7B"
  paths:
  - testPathName: "getSimpleName2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "getSimpleName(object,valueIfNull):string11"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getSimpleName1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "valueIfNull"
- method:
    name: "getSimpleName"
    sourceCodeSignature: "String getSimpleName(final Object object, final String valueIfNull)"
    returnType: "java.lang.String"
    parameters:
    - name: "object"
      type: "java.lang.Object"
    - name: "valueIfNull"
      type: "java.lang.String"
    instructionFingerprint: "440C2AFD55D437A5FE5298EFA5D84C4F"
  paths:
  - testPathName: "getSimpleName3WhenObjectIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "valueIfNull"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    branches:
    - lineNumber: 1081
      expression: "object == null"
      range: "(1081,16)-(1081,29)"
      evaluatedAs: true
  - testPathName: "getSimpleName3WhenObjectIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "object"
      valueUuid: "object"
    - type: "INPUT"
      name: "valueIfNull"
      valueUuid: "valueIfNull"
    - type: "RESULT"
      name: "result"
      valueUuid: "string11"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "valueIfNull1"
      valueType: "java.lang.String"
      uuid: "valueIfNull"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Object"
      valueType: "java.lang.String"
      uuid: "string11"
    branches:
    - lineNumber: 1081
      expression: "object == null"
      range: "(1081,16)-(1081,29)"
      evaluatedAs: false
- method:
    name: "hierarchy"
    sourceCodeSignature: "Iterable<Class<?>> hierarchy(final Class<?> type)"
    returnType: "java.lang.Iterable"
    genericReturnType: "java.lang.Class<?>"
    parameters:
    - name: "type"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "0BBCE4A5090FEC20986B2E1463C36724"
  paths:
  - testPathName: "hierarchyTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "hierarchy(type,Enum-org.apache.commons.lang3.ClassUtils$Interfaces-EXCLUDE):iterable"
    - type: "RESULT"
      name: "result"
      valueUuid: "iterable"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "java.lang.Class<?>"
      uuid: "iterable"
    - sapientType: "ENUM"
      content: !<regular>
        value: "EXCLUDE"
      valueType: "org.apache.commons.lang3.ClassUtils$Interfaces"
      uuid: "Enum-org.apache.commons.lang3.ClassUtils$Interfaces-EXCLUDE"
- method:
    name: "hierarchy"
    sourceCodeSignature: "Iterable<Class<?>> hierarchy(final Class<?> type, final\
      \ Interfaces interfacesBehavior)"
    returnType: "java.lang.Iterable"
    genericReturnType: "java.lang.Class<?>"
    parameters:
    - name: "type"
      type: "java.lang.Class"
      genericType: "?"
    - name: "interfacesBehavior"
      type: "org.apache.commons.lang3.ClassUtils$Interfaces"
    instructionFingerprint: "9EEDC92C3D4AA73D39A7C7FDF145530A"
  paths:
  - testPathName: "hierarchy1WhenInterfacesBehaviorNotEqualsInterfacesINCLUDE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "INPUT"
      name: "interfacesBehavior"
      valueUuid: "interfacesBehavior"
    - type: "RESULT"
      name: "result"
      valueUuid: "iterable2NotNull"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "ENUM"
      content: !<regular>
        value: "EXCLUDE"
      valueType: "org.apache.commons.lang3.ClassUtils$Interfaces"
      uuid: "interfacesBehavior"
    - sapientType: "NOT_NULL"
      valueType: "java.lang.Iterable"
      genericValueType: "java.lang.Class<?>"
      uuid: "iterable2NotNull"
    branches:
    - lineNumber: 1128
      expression: "interfacesBehavior != Interfaces.INCLUDE"
      range: "(1128,13)-(1128,52)"
      evaluatedAs: true
  - testPathName: "hierarchy1WhenInterfacesBehaviorEqualsInterfacesINCLUDE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "INPUT"
      name: "interfacesBehavior"
      valueUuid: "interfacesBehavior"
    - type: "RESULT"
      name: "result"
      valueUuid: "iterable2NotNull"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "ENUM"
      content: !<regular>
        value: "INCLUDE"
      valueType: "org.apache.commons.lang3.ClassUtils$Interfaces"
      uuid: "interfacesBehavior"
    - sapientType: "NOT_NULL"
      valueType: "java.lang.Iterable"
      genericValueType: "java.lang.Class<?>"
      uuid: "iterable2NotNull"
    branches:
    - lineNumber: 1128
      expression: "interfacesBehavior != Interfaces.INCLUDE"
      range: "(1128,13)-(1128,52)"
      evaluatedAs: false
- method:
    name: "isAssignable"
    sourceCodeSignature: "boolean isAssignable(final Class<?> cls, final Class<?>\
      \ toClass)"
    returnType: "boolean"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    - name: "toClass"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "4E6578941716E1BD299BE6BB314F1DF6"
  paths:
  - testPathName: "isAssignableWhenIsAssignableClsToClassTrue"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignable(cls,toClass,autoboxing):boolean10"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    branches:
    - lineNumber: 1211
      expression: "isAssignable(cls, toClass, true)"
      range: "(1211,16)-(1211,47)"
      evaluatedAs: true
  - testPathName: "isAssignableWhenIsAssignableNotClsToClassTrue"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignable(cls,toClass,autoboxing):boolean10"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    branches:
    - lineNumber: 1211
      expression: "isAssignable(cls, toClass, true)"
      range: "(1211,16)-(1211,47)"
      evaluatedAs: false
- method:
    name: "isAssignable"
    sourceCodeSignature: "boolean isAssignable(Class<?> cls, final Class<?> toClass,\
      \ final boolean autoboxing)"
    returnType: "boolean"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    - name: "toClass"
      type: "java.lang.Class"
      genericType: "?"
    - name: "autoboxing"
      type: "boolean"
    instructionFingerprint: "03436530B3515880CB1779339593F0E0"
  paths:
  - testPathName: "isAssignable1WhenToClassIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: true
  - testPathName: "isAssignable1WhenToClassNotIsPrimitive"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: true
    - lineNumber: 1250
      expression: "!toClass.isPrimitive()"
      range: "(1250,20)-(1250,41)"
      evaluatedAs: true
  - testPathName: "isAssignable1WhenToClassIsPrimitive"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: true
    - lineNumber: 1250
      expression: "!toClass.isPrimitive()"
      range: "(1250,20)-(1250,41)"
      evaluatedAs: false
  - testPathName: "isAssignable1WhenClsIsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):class35"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: true
  - testPathName: "isAssignable1WhenClsNotIsPrimitiveAndClsIsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):cls2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "cls2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: true
    - lineNumber: 1262
      expression: "cls == null"
      range: "(1262,21)-(1262,31)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "isAssignable1WhenClsIsNotNullAndClsEqualsToClass"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass2"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):cls2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "cls2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: true
    - lineNumber: 1262
      expression: "cls == null"
      range: "(1262,21)-(1262,31)"
      evaluatedAs: false
    - lineNumber: 1267
      expression: "cls.equals(toClass)"
      range: "(1267,13)-(1267,31)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "isAssignable1WhenClsNotEqualsToClassAndClsIsPrimitiveAndToClassNotIsPrimitive"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):cls2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "cls2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: true
    - lineNumber: 1262
      expression: "cls == null"
      range: "(1262,21)-(1262,31)"
      evaluatedAs: false
    - lineNumber: 1267
      expression: "cls.equals(toClass)"
      range: "(1267,13)-(1267,31)"
      evaluatedAs: false
    - lineNumber: 1270
      expression: "cls.isPrimitive()"
      range: "(1270,13)-(1270,29)"
      evaluatedAs: true
    - lineNumber: 1271
      expression: "!toClass.isPrimitive()"
      range: "(1271,17)-(1271,38)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "isAssignable1WhenClsNotIsPrimitiveAndToClassIsAssignableFromCls"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):cls2"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean16"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "cls2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean16"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: true
    - lineNumber: 1262
      expression: "cls == null"
      range: "(1262,21)-(1262,31)"
      evaluatedAs: false
    - lineNumber: 1267
      expression: "cls.equals(toClass)"
      range: "(1267,13)-(1267,31)"
      evaluatedAs: false
    - lineNumber: 1270
      expression: "cls.isPrimitive()"
      range: "(1270,13)-(1270,29)"
      evaluatedAs: false
    - lineNumber: 1299
      expression: "toClass.isAssignableFrom(cls)"
      range: "(1299,16)-(1299,44)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "isAssignable1WhenClsNotIsPrimitiveAndToClassNotIsAssignableFromCls"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):cls2"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean16"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "cls2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean16"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: true
    - lineNumber: 1262
      expression: "cls == null"
      range: "(1262,21)-(1262,31)"
      evaluatedAs: false
    - lineNumber: 1267
      expression: "cls.equals(toClass)"
      range: "(1267,13)-(1267,31)"
      evaluatedAs: false
    - lineNumber: 1270
      expression: "cls.isPrimitive()"
      range: "(1270,13)-(1270,29)"
      evaluatedAs: false
    - lineNumber: 1299
      expression: "toClass.isAssignableFrom(cls)"
      range: "(1299,16)-(1299,44)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
  - testPathName: "isAssignable1WhenDoubleTYPEEqualsToClass"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):class35"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: false
    - lineNumber: 1267
      expression: "cls.equals(toClass)"
      range: "(1267,13)-(1267,31)"
      evaluatedAs: false
    - lineNumber: 1270
      expression: "cls.isPrimitive()"
      range: "(1270,13)-(1270,29)"
      evaluatedAs: true
    - lineNumber: 1271
      expression: "!toClass.isPrimitive()"
      range: "(1271,17)-(1271,38)"
      evaluatedAs: false
    - lineNumber: 1274
      expression: "Integer.TYPE.equals(cls)"
      range: "(1274,17)-(1274,40)"
      evaluatedAs: true
    - lineNumber: 1275
      expression: "Long.TYPE.equals(toClass)"
      range: "(1275,24)-(1275,48)"
      evaluatedAs: false
    - lineNumber: 1275
      expression: "Float.TYPE.equals(toClass)"
      range: "(1275,53)-(1275,78)"
      evaluatedAs: false
    - lineNumber: 1275
      expression: "Double.TYPE.equals(toClass)"
      range: "(1275,83)-(1275,109)"
      evaluatedAs: true
  - testPathName: "isAssignable1WhenFloatTYPEEqualsClsAndDoubleTYPEEqualsToClass"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):class35"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean22"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean22"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: false
    - lineNumber: 1267
      expression: "cls.equals(toClass)"
      range: "(1267,13)-(1267,31)"
      evaluatedAs: false
    - lineNumber: 1270
      expression: "cls.isPrimitive()"
      range: "(1270,13)-(1270,29)"
      evaluatedAs: true
    - lineNumber: 1271
      expression: "!toClass.isPrimitive()"
      range: "(1271,17)-(1271,38)"
      evaluatedAs: false
    - lineNumber: 1274
      expression: "Integer.TYPE.equals(cls)"
      range: "(1274,17)-(1274,40)"
      evaluatedAs: false
    - lineNumber: 1277
      expression: "Long.TYPE.equals(cls)"
      range: "(1277,17)-(1277,37)"
      evaluatedAs: false
    - lineNumber: 1280
      expression: "Boolean.TYPE.equals(cls)"
      range: "(1280,17)-(1280,40)"
      evaluatedAs: false
    - lineNumber: 1283
      expression: "Double.TYPE.equals(cls)"
      range: "(1283,17)-(1283,39)"
      evaluatedAs: false
    - lineNumber: 1286
      expression: "Float.TYPE.equals(cls)"
      range: "(1286,17)-(1286,38)"
      evaluatedAs: true
    - lineNumber: 1287
      expression: "Double.TYPE.equals(toClass)"
      range: "(1287,24)-(1287,50)"
      evaluatedAs: true
  - testPathName: "isAssignable1WhenDoubleTYPENotEqualsToClass"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "INPUT"
      name: "toClass"
      valueUuid: "toClass"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(cls):class35"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean22"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "toClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class35"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean22"
    branches:
    - lineNumber: 1245
      expression: "toClass == null"
      range: "(1245,13)-(1245,27)"
      evaluatedAs: false
    - lineNumber: 1249
      expression: "cls == null"
      range: "(1249,13)-(1249,23)"
      evaluatedAs: false
    - lineNumber: 1253
      expression: "autoboxing"
      range: "(1253,13)-(1253,22)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "cls.isPrimitive()"
      range: "(1254,17)-(1254,33)"
      evaluatedAs: true
    - lineNumber: 1254
      expression: "!toClass.isPrimitive()"
      range: "(1254,38)-(1254,59)"
      evaluatedAs: true
    - lineNumber: 1256
      expression: "cls == null"
      range: "(1256,21)-(1256,31)"
      evaluatedAs: false
    - lineNumber: 1260
      expression: "toClass.isPrimitive()"
      range: "(1260,17)-(1260,37)"
      evaluatedAs: true
    - lineNumber: 1260
      expression: "!cls.isPrimitive()"
      range: "(1260,42)-(1260,59)"
      evaluatedAs: false
    - lineNumber: 1267
      expression: "cls.equals(toClass)"
      range: "(1267,13)-(1267,31)"
      evaluatedAs: false
    - lineNumber: 1270
      expression: "cls.isPrimitive()"
      range: "(1270,13)-(1270,29)"
      evaluatedAs: true
    - lineNumber: 1271
      expression: "!toClass.isPrimitive()"
      range: "(1271,17)-(1271,38)"
      evaluatedAs: false
    - lineNumber: 1274
      expression: "Integer.TYPE.equals(cls)"
      range: "(1274,17)-(1274,40)"
      evaluatedAs: false
    - lineNumber: 1277
      expression: "Long.TYPE.equals(cls)"
      range: "(1277,17)-(1277,37)"
      evaluatedAs: false
    - lineNumber: 1280
      expression: "Boolean.TYPE.equals(cls)"
      range: "(1280,17)-(1280,40)"
      evaluatedAs: false
    - lineNumber: 1283
      expression: "Double.TYPE.equals(cls)"
      range: "(1283,17)-(1283,39)"
      evaluatedAs: false
    - lineNumber: 1286
      expression: "Float.TYPE.equals(cls)"
      range: "(1286,17)-(1286,38)"
      evaluatedAs: true
    - lineNumber: 1287
      expression: "Double.TYPE.equals(toClass)"
      range: "(1287,24)-(1287,50)"
      evaluatedAs: false
- method:
    name: "isAssignable"
    sourceCodeSignature: "boolean isAssignable(final Class<?>[] classArray, final\
      \ Class<?>... toClassArray)"
    returnType: "boolean"
    parameters:
    - name: "classArray"
      type: "java.lang.Class[]"
      genericType: "?"
    - name: "toClassArray"
      type: "java.lang.Class[]"
      genericType: "?"
    instructionFingerprint: "160F3595C45BD18E3B1CA6B9D0B9FB71"
  paths:
  - testPathName: "isAssignable2WhenIsAssignableClassArrayToClassArrayTrue"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classArray"
      valueUuid: "classArray"
    - type: "INPUT"
      name: "toClassArray"
      valueUuid: "toClassArray"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignable(classArray,toClassArray,autoboxing):boolean10"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "toClassArray"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    branches:
    - lineNumber: 1344
      expression: "isAssignable(classArray, toClassArray, true)"
      range: "(1344,16)-(1344,59)"
      evaluatedAs: true
  - testPathName: "isAssignable2WhenIsAssignableNotClassArrayToClassArrayTrue"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classArray"
      valueUuid: "classArray"
    - type: "INPUT"
      name: "toClassArray"
      valueUuid: "toClassArray"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignable(classArray,toClassArray,autoboxing):boolean10"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "toClassArray"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "autoboxing"
    branches:
    - lineNumber: 1344
      expression: "isAssignable(classArray, toClassArray, true)"
      range: "(1344,16)-(1344,59)"
      evaluatedAs: false
- method:
    name: "isAssignable"
    sourceCodeSignature: "boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray,\
      \ final boolean autoboxing)"
    returnType: "boolean"
    parameters:
    - name: "classArray"
      type: "java.lang.Class[]"
      genericType: "?"
    - name: "toClassArray"
      type: "java.lang.Class[]"
      genericType: "?"
    - name: "autoboxing"
      type: "boolean"
    instructionFingerprint: "97B51AB7046B011A15A714D55474FF34"
  paths:
  - testPathName: "isAssignable3WhenArrayUtilsNotIsSameLengthClassArrayToClassArray"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classArray"
      valueUuid: "classArray"
    - type: "INPUT"
      name: "toClassArray"
      valueUuid: "toClassArray"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Class<?>[],java.lang.Class<?>[])\
        \ : boolean"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "toClassArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1384
      expression: "!ArrayUtils.isSameLength(classArray, toClassArray)"
      range: "(1384,13)-(1384,62)"
      evaluatedAs: true
  - testPathName: "isAssignable3WhenINotLessThanClassArrayLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classArray"
      valueUuid: "classArray"
    - type: "INPUT"
      name: "toClassArray"
      valueUuid: "toClassArray"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Class<?>[],java.lang.Class<?>[])\
        \ : boolean"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    - sapientType: "NULL"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "toClassArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1384
      expression: "!ArrayUtils.isSameLength(classArray, toClassArray)"
      range: "(1384,13)-(1384,62)"
      evaluatedAs: false
    - lineNumber: 1387
      expression: "classArray == null"
      range: "(1387,13)-(1387,30)"
      evaluatedAs: true
    - lineNumber: 1390
      expression: "toClassArray == null"
      range: "(1390,13)-(1390,32)"
      evaluatedAs: true
    - lineNumber: 1393
      expression: "i < classArray.length"
      range: "(1393,25)-(1393,45)"
      evaluatedAs: false
  - testPathName: "isAssignable3WhenIsAssignableNotIIndexOfClassArrayIIndexOfToClassArrayAutoboxing"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classArray"
      valueUuid: "classArray"
    - type: "INPUT"
      name: "toClassArray"
      valueUuid: "toClassArray"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignable(class35,class36,autoboxing):boolean11"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "class35"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "class36"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "toClassArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class35"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class36"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1384
      expression: "!ArrayUtils.isSameLength(classArray, toClassArray)"
      range: "(1384,13)-(1384,62)"
      evaluatedAs: false
    - lineNumber: 1387
      expression: "classArray == null"
      range: "(1387,13)-(1387,30)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "toClassArray == null"
      range: "(1390,13)-(1390,32)"
      evaluatedAs: false
    - lineNumber: 1393
      expression: "i < classArray.length"
      range: "(1393,25)-(1393,45)"
      evaluatedAs: true
    - lineNumber: 1394
      expression: "!isAssignable(classArray[i], toClassArray[i], autoboxing)"
      range: "(1394,17)-(1394,73)"
      evaluatedAs: true
  - testPathName: "isAssignable3WhenIsAssignableIIndexOfClassArrayIIndexOfToClassArrayAutoboxing"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classArray"
      valueUuid: "classArray"
    - type: "INPUT"
      name: "toClassArray"
      valueUuid: "toClassArray"
    - type: "INPUT"
      name: "autoboxing"
      valueUuid: "autoboxing"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignable(class35,class36,autoboxing):boolean11"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "class35"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "class36"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "toClassArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "autoboxing"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class35"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class36"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1384
      expression: "!ArrayUtils.isSameLength(classArray, toClassArray)"
      range: "(1384,13)-(1384,62)"
      evaluatedAs: false
    - lineNumber: 1387
      expression: "classArray == null"
      range: "(1387,13)-(1387,30)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "toClassArray == null"
      range: "(1390,13)-(1390,32)"
      evaluatedAs: false
    - lineNumber: 1393
      expression: "i < classArray.length"
      range: "(1393,25)-(1393,45)"
      evaluatedAs: true
    - lineNumber: 1394
      expression: "!isAssignable(classArray[i], toClassArray[i], autoboxing)"
      range: "(1394,17)-(1394,73)"
      evaluatedAs: false
- method:
    name: "isInnerClass"
    sourceCodeSignature: "boolean isInnerClass(final Class<?> cls)"
    returnType: "boolean"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "94B984CDBBF24DAAD66E011734C02802"
  paths:
  - testPathName: "isInnerClassWhenClsGetEnclosingClassIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getEnclosingClass() : java.lang.Class<?>"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1408
      expression: "cls != null"
      range: "(1408,16)-(1408,26)"
      evaluatedAs: true
    - lineNumber: 1408
      expression: "cls.getEnclosingClass() != null"
      range: "(1408,31)-(1408,61)"
      evaluatedAs: true
  - testPathName: "isInnerClassWhenClsGetEnclosingClassIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1408
      expression: "cls != null"
      range: "(1408,16)-(1408,26)"
      evaluatedAs: true
    - lineNumber: 1408
      expression: "cls.getEnclosingClass() != null"
      range: "(1408,31)-(1408,61)"
      evaluatedAs: false
- method:
    name: "isPrimitiveOrWrapper"
    sourceCodeSignature: "boolean isPrimitiveOrWrapper(final Class<?> type)"
    returnType: "boolean"
    parameters:
    - name: "type"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "20316363F6500E3DD18193D075B6711B"
  paths:
  - testPathName: "isPrimitiveOrWrapperWhenTypeIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1421
      expression: "type == null"
      range: "(1421,13)-(1421,24)"
      evaluatedAs: true
  - testPathName: "isPrimitiveOrWrapperWhenIsPrimitiveWrapperType"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPrimitiveWrapper(type):boolean11"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1421
      expression: "type == null"
      range: "(1421,13)-(1421,24)"
      evaluatedAs: false
    - lineNumber: 1424
      expression: "type.isPrimitive()"
      range: "(1424,16)-(1424,33)"
      evaluatedAs: false
    - lineNumber: 1424
      expression: "isPrimitiveWrapper(type)"
      range: "(1424,38)-(1424,61)"
      evaluatedAs: true
  - testPathName: "isPrimitiveOrWrapperWhenIsPrimitiveWrapperNotType"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPrimitiveWrapper(type):boolean11"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1421
      expression: "type == null"
      range: "(1421,13)-(1421,24)"
      evaluatedAs: false
    - lineNumber: 1424
      expression: "type.isPrimitive()"
      range: "(1424,16)-(1424,33)"
      evaluatedAs: false
    - lineNumber: 1424
      expression: "isPrimitiveWrapper(type)"
      range: "(1424,38)-(1424,61)"
      evaluatedAs: false
- method:
    name: "isPrimitiveWrapper"
    sourceCodeSignature: "boolean isPrimitiveWrapper(final Class<?> type)"
    returnType: "boolean"
    parameters:
    - name: "type"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "25C5D2C659E4BA3EE3753E5DB760CA57"
  paths:
  - testPathName: "isPrimitiveWrapperWhenWrapperPrimitiveMapContainsKeyType"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Map.containsKey(java.lang.Class<?>)\
        \ : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean10"
    branches:
    - lineNumber: 1436
      expression: "wrapperPrimitiveMap.containsKey(type)"
      range: "(1436,16)-(1436,52)"
      evaluatedAs: true
  - testPathName: "isPrimitiveWrapperWhenWrapperPrimitiveMapNotContainsKeyType"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "type"
      valueUuid: "type"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    branches:
    - lineNumber: 1436
      expression: "wrapperPrimitiveMap.containsKey(type)"
      range: "(1436,16)-(1436,52)"
      evaluatedAs: false
- method:
    name: "isPublic"
    sourceCodeSignature: "boolean isPublic(final Class<?> cls)"
    returnType: "boolean"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "EDC8845BD9FBE28B2941A7D8B73EE768"
  paths:
  - testPathName: "isPublicWhenModifierIsPublicClsGetModifiers"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean10"
    branches:
    - lineNumber: 1446
      expression: "Modifier.isPublic(cls.getModifiers())"
      range: "(1446,16)-(1446,52)"
      evaluatedAs: true
  - testPathName: "isPublicWhenModifierNotIsPublicClsGetModifiers"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean10"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.getModifiers() : int"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "cls"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    branches:
    - lineNumber: 1446
      expression: "Modifier.isPublic(cls.getModifiers())"
      range: "(1446,16)-(1446,52)"
      evaluatedAs: false
- method:
    name: "primitivesToWrappers"
    sourceCodeSignature: "Class<?>[] primitivesToWrappers(final Class<?>... classes)"
    returnType: "java.lang.Class[]"
    genericReturnType: "?"
    parameters:
    - name: "classes"
      type: "java.lang.Class[]"
      genericType: "?"
    instructionFingerprint: "C2CA4517F76482516435F1AE9DB9881C"
  paths:
  - testPathName: "primitivesToWrappersWhenClassesIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classes"
    - sapientType: "NULL"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1458
      expression: "classes == null"
      range: "(1458,13)-(1458,27)"
      evaluatedAs: true
  - testPathName: "primitivesToWrappersWhenClassesLengthEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "RESULT"
      name: "result"
      valueUuid: "classes"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classes"
    branches:
    - lineNumber: 1458
      expression: "classes == null"
      range: "(1458,13)-(1458,27)"
      evaluatedAs: false
    - lineNumber: 1462
      expression: "classes.length == 0"
      range: "(1462,13)-(1462,31)"
      evaluatedAs: true
  - testPathName: "primitivesToWrappersWhenClassesLengthNotEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "STATIC"
      name: "ClassUtils.class"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "primitiveToWrapper(class35):class36"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Arrays.setAll(java.lang.Class<?>[],java.util.function.IntFunction)\
        \ : void"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "class35"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class36"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "class35"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.Class"
            uuid: "classArrayItem0"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1458
      expression: "classes == null"
      range: "(1458,13)-(1458,27)"
      evaluatedAs: false
    - lineNumber: 1462
      expression: "classes.length == 0"
      range: "(1462,13)-(1462,31)"
      evaluatedAs: false
- method:
    name: "primitiveToWrapper"
    sourceCodeSignature: "Class<?> primitiveToWrapper(final Class<?> cls)"
    returnType: "java.lang.Class"
    genericReturnType: "?"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "FBB088607E2E2AE841863FF52B18AE3F"
  paths:
  - testPathName: "primitiveToWrapperWhenClsIsPrimitive"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls2"
    - type: "RESULT"
      name: "result"
      valueUuid: "class36"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isPrimitive() : boolean"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "cls2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class36"
    branches:
    - lineNumber: 1485
      expression: "cls != null"
      range: "(1485,13)-(1485,23)"
      evaluatedAs: true
    - lineNumber: 1485
      expression: "cls.isPrimitive()"
      range: "(1485,28)-(1485,44)"
      evaluatedAs: true
- method:
    name: "toClass"
    sourceCodeSignature: "Class<?>[] toClass(final Object... array)"
    returnType: "java.lang.Class[]"
    genericReturnType: "?"
    parameters:
    - name: "array"
      type: "java.lang.Object[]"
    instructionFingerprint: "340BB4A366B0507E3D31002174A41A75"
  paths:
  - testPathName: "toClassWhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "NULL"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1531
      expression: "array == null"
      range: "(1531,13)-(1531,25)"
      evaluatedAs: true
  - testPathName: "toClassWhenArrayLengthEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1531
      expression: "array == null"
      range: "(1531,13)-(1531,25)"
      evaluatedAs: false
    - lineNumber: 1534
      expression: "array.length == 0"
      range: "(1534,13)-(1534,29)"
      evaluatedAs: true
  - testPathName: "toClassWhenIIndexOfArrayIsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Arrays.setAll(java.lang.Class<?>[],java.util.function.IntFunction)\
        \ : void"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.Object"
            uuid: "object18"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.Class"
            uuid: "classArrayItem0"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1531
      expression: "array == null"
      range: "(1531,13)-(1531,25)"
      evaluatedAs: false
    - lineNumber: 1534
      expression: "array.length == 0"
      range: "(1534,13)-(1534,29)"
      evaluatedAs: false
    - lineNumber: 1538
      expression: "array[i] == null"
      range: "(1538,37)-(1538,52)"
      evaluatedAs: true
      internalMethodName: "lambda$toClass$7"
  - testPathName: "toClassWhenIIndexOfArrayIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Arrays.setAll(java.lang.Class<?>[],java.util.function.IntFunction)\
        \ : void"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "object18"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.Class"
            uuid: "classArrayItem0"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1531
      expression: "array == null"
      range: "(1531,13)-(1531,25)"
      evaluatedAs: false
    - lineNumber: 1534
      expression: "array.length == 0"
      range: "(1534,13)-(1534,29)"
      evaluatedAs: false
    - lineNumber: 1538
      expression: "array[i] == null"
      range: "(1538,37)-(1538,52)"
      evaluatedAs: false
      internalMethodName: "lambda$toClass$7"
- method:
    name: "wrappersToPrimitives"
    sourceCodeSignature: "Class<?>[] wrappersToPrimitives(final Class<?>... classes)"
    returnType: "java.lang.Class[]"
    genericReturnType: "?"
    parameters:
    - name: "classes"
      type: "java.lang.Class[]"
      genericType: "?"
    instructionFingerprint: "3F195F112D91F2362A127DB310A20DC0"
  paths:
  - testPathName: "wrappersToPrimitivesWhenClassesIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classes"
    - sapientType: "NULL"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1581
      expression: "classes == null"
      range: "(1581,13)-(1581,27)"
      evaluatedAs: true
  - testPathName: "wrappersToPrimitivesWhenClassesLengthEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "RESULT"
      name: "result"
      valueUuid: "classes"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classes"
    branches:
    - lineNumber: 1581
      expression: "classes == null"
      range: "(1581,13)-(1581,27)"
      evaluatedAs: false
    - lineNumber: 1585
      expression: "classes.length == 0"
      range: "(1585,13)-(1585,31)"
      evaluatedAs: true
  - testPathName: "wrappersToPrimitivesWhenClassesLengthNotEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classes"
      valueUuid: "classes"
    - type: "RESULT"
      name: "result"
      valueUuid: "classArray"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Arrays.setAll(java.lang.Class<?>[],java.util.function.IntFunction)\
        \ : void"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "cls"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classes"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.Class"
            uuid: "classArrayItem0"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    branches:
    - lineNumber: 1581
      expression: "classes == null"
      range: "(1581,13)-(1581,27)"
      evaluatedAs: false
    - lineNumber: 1585
      expression: "classes.length == 0"
      range: "(1585,13)-(1585,31)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.ClassUtils"
- method:
    name: "wrapperToPrimitive"
    sourceCodeSignature: "Class<?> wrapperToPrimitive(final Class<?> cls)"
    returnType: "java.lang.Class"
    genericReturnType: "?"
    parameters:
    - name: "cls"
      type: "java.lang.Class"
      genericType: "?"
    instructionFingerprint: "E8A1C902123398BD130ED447487233B9"
  paths:
  - testPathName: "wrapperToPrimitiveTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cls"
      valueUuid: "cls2"
    - type: "RESULT"
      name: "result"
      valueUuid: "class36"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "cls2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class36"
