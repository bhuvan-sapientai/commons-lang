---
targetClass:
  fullClassName: "org.apache.commons.lang3.StringUtils"
methods:
- method:
    name: "abbreviate"
    sourceCodeSignature: "String abbreviate(final String str, final int maxWidth)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "maxWidth"
      type: "int"
    instructionFingerprint: "B0C2D25C42CE75DD22DD288D9C519106"
  paths:
  - testPathName: "abbreviateTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "abbreviate(str,abbrevMarker,offset,maxWidth):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_abbreviate1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "..."
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
- method:
    name: "abbreviate"
    sourceCodeSignature: "String abbreviate(final String str, final int offset, final\
      \ int maxWidth)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "offset"
      type: "int"
    - name: "maxWidth"
      type: "int"
    instructionFingerprint: "4E995CD57E77E955B4BBEDF3371BB7D8"
  paths:
  - testPathName: "abbreviate1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "abbreviate(str,abbrevMarker,offset,maxWidth):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_abbreviate1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "..."
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
- method:
    name: "abbreviate"
    sourceCodeSignature: "String abbreviate(final String str, final String abbrevMarker,\
      \ final int maxWidth)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "abbrevMarker"
      type: "java.lang.String"
    - name: "maxWidth"
      type: "int"
    instructionFingerprint: "6E93325BD4BEF56FA9988CD0DD0C7244"
  paths:
  - testPathName: "abbreviate2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "abbreviate(str,abbrevMarker,offset,maxWidth):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "abbrevMarker1"
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_abbreviate1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
- method:
    name: "abbreviate"
    sourceCodeSignature: "String abbreviate(final String str, final String abbrevMarker,\
      \ int offset, final int maxWidth)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "abbrevMarker"
      type: "java.lang.String"
    - name: "offset"
      type: "int"
    - name: "maxWidth"
      type: "int"
    instructionFingerprint: "98766F59C0C5BDA8C866E1156174CC89"
  paths:
  - testPathName: "abbreviate3WhenMaxWidthGreaterThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "substring(str,start,maxWidth):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_substring1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "maxWidth > 0"
      range: "(341,62)-(341,73)"
      evaluatedAs: true
  - testPathName: "abbreviate3WhenMaxWidthNotGreaterThan0AndIsAnyEmptyStrAbbrevMarker"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "str1"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "abbrevMarker"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "maxWidth > 0"
      range: "(341,62)-(341,73)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "isAnyEmpty(str, abbrevMarker)"
      range: "(344,13)-(344,41)"
      evaluatedAs: true
  - testPathName: "abbreviate3WhenMaxWidthNotGreaterThan0AndIsAnyEmptyNotStrAbbrevMarkerAndMaxWidthLessThanMThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "str1"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "abbrevMarker"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Minimum abbreviation width is 1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "maxWidth > 0"
      range: "(341,62)-(341,73)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "isAnyEmpty(str, abbrevMarker)"
      range: "(344,13)-(344,41)"
      evaluatedAs: false
    - lineNumber: 351
      expression: "maxWidth < minAbbrevWidth"
      range: "(351,13)-(351,37)"
      evaluatedAs: true
  - testPathName: "abbreviate3WhenMaxWidthNotLessThanMinAbbrevWidthAndStrLenLessThanOrEqualsToMaxWidth"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "abbrevMarker"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "isAnyEmpty(str, abbrevMarker)"
      range: "(344,13)-(344,41)"
      evaluatedAs: false
    - lineNumber: 351
      expression: "maxWidth < minAbbrevWidth"
      range: "(351,13)-(351,37)"
      evaluatedAs: false
    - lineNumber: 355
      expression: "strLen <= maxWidth"
      range: "(355,13)-(355,30)"
      evaluatedAs: true
  - testPathName: "abbreviate3WhenStrLenMinusOffsetLessThanMaxWidthMinusAbbrevMarkerLengthAndOffsetLessThanOrEqualsToAbbrevMarkerLengthPlu2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "CBD"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 4
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "CBD"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "abbrevMarker"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CA"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "isAnyEmpty(str, abbrevMarker)"
      range: "(344,13)-(344,41)"
      evaluatedAs: false
    - lineNumber: 351
      expression: "maxWidth < minAbbrevWidth"
      range: "(351,13)-(351,37)"
      evaluatedAs: false
    - lineNumber: 355
      expression: "strLen <= maxWidth"
      range: "(355,13)-(355,30)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "offset > strLen"
      range: "(358,13)-(358,27)"
      evaluatedAs: true
    - lineNumber: 361
      expression: "strLen - offset < maxWidth - abbrevMarkerLength"
      range: "(361,13)-(361,59)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "offset <= abbrevMarkerLength + 1"
      range: "(364,13)-(364,42)"
      evaluatedAs: true
  - testPathName: "abbreviate3WhenOffsetGreaterThanAbbrevMarkerLengthPlus1AndMaxWidthLessThanMinAbbrevWidthO3ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "CBDE"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "CBDE"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "abbrevMarker"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Minimum abbreviation width with offset is 3"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "isAnyEmpty(str, abbrevMarker)"
      range: "(344,13)-(344,41)"
      evaluatedAs: false
    - lineNumber: 351
      expression: "maxWidth < minAbbrevWidth"
      range: "(351,13)-(351,37)"
      evaluatedAs: false
    - lineNumber: 355
      expression: "strLen <= maxWidth"
      range: "(355,13)-(355,30)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "offset > strLen"
      range: "(358,13)-(358,27)"
      evaluatedAs: true
    - lineNumber: 361
      expression: "strLen - offset < maxWidth - abbrevMarkerLength"
      range: "(361,13)-(361,59)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "offset <= abbrevMarkerLength + 1"
      range: "(364,13)-(364,42)"
      evaluatedAs: false
    - lineNumber: 367
      expression: "maxWidth < minAbbrevWidthOffset"
      range: "(367,13)-(367,43)"
      evaluatedAs: true
  - testPathName: "abbreviate3WhenMaxWidthNotLessThanMinAbbrevWidthOffsetAndOffsetPlusMaxWidthMinusAbbrevMarkerLengthNotLessThanStrLen2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "CBDEF"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 6
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "CBDEF"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "abbrevMarker"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AEF"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "isAnyEmpty(str, abbrevMarker)"
      range: "(344,13)-(344,41)"
      evaluatedAs: false
    - lineNumber: 351
      expression: "maxWidth < minAbbrevWidth"
      range: "(351,13)-(351,37)"
      evaluatedAs: false
    - lineNumber: 355
      expression: "strLen <= maxWidth"
      range: "(355,13)-(355,30)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "offset > strLen"
      range: "(358,13)-(358,27)"
      evaluatedAs: true
    - lineNumber: 361
      expression: "strLen - offset < maxWidth - abbrevMarkerLength"
      range: "(361,13)-(361,59)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "offset <= abbrevMarkerLength + 1"
      range: "(364,13)-(364,42)"
      evaluatedAs: false
    - lineNumber: 367
      expression: "maxWidth < minAbbrevWidthOffset"
      range: "(367,13)-(367,43)"
      evaluatedAs: false
    - lineNumber: 370
      expression: "offset + maxWidth - abbrevMarkerLength < strLen"
      range: "(370,13)-(370,59)"
      evaluatedAs: false
  - testPathName: "abbreviate3WhenMaxWidthNotLessThanMinAbbrevWidthOffsetAndOffsetPlusMaxWidthMinusAbbrevMarkerLengthLessThanStrLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "abbrevMarker"
      valueUuid: "abbrevMarker"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean3"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "abbreviate(string,abbrevMarker,int11):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "CBDEFG"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "abbrevMarker"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "CBDEFG"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "abbrevMarker"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "H"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "EFG"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AH"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 341
      expression: "isNotEmpty(str)"
      range: "(341,13)-(341,27)"
      evaluatedAs: true
    - lineNumber: 341
      expression: "EMPTY.equals(abbrevMarker)"
      range: "(341,32)-(341,57)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "isAnyEmpty(str, abbrevMarker)"
      range: "(344,13)-(344,41)"
      evaluatedAs: false
    - lineNumber: 351
      expression: "maxWidth < minAbbrevWidth"
      range: "(351,13)-(351,37)"
      evaluatedAs: false
    - lineNumber: 355
      expression: "strLen <= maxWidth"
      range: "(355,13)-(355,30)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "offset > strLen"
      range: "(358,13)-(358,27)"
      evaluatedAs: false
    - lineNumber: 361
      expression: "strLen - offset < maxWidth - abbrevMarkerLength"
      range: "(361,13)-(361,59)"
      evaluatedAs: false
    - lineNumber: 364
      expression: "offset <= abbrevMarkerLength + 1"
      range: "(364,13)-(364,42)"
      evaluatedAs: false
    - lineNumber: 367
      expression: "maxWidth < minAbbrevWidthOffset"
      range: "(367,13)-(367,43)"
      evaluatedAs: false
    - lineNumber: 370
      expression: "offset + maxWidth - abbrevMarkerLength < strLen"
      range: "(370,13)-(370,59)"
      evaluatedAs: true
- method:
    name: "abbreviateMiddle"
    sourceCodeSignature: "String abbreviateMiddle(final String str, final String middle,\
      \ final int length)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "middle"
      type: "java.lang.String"
    - name: "length"
      type: "int"
    instructionFingerprint: "327C464562D58EB41C87462573546E53"
  paths:
  - testPathName: "abbreviateMiddleWhenLengthLessThanMiddleLengthPlus2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "middle"
      valueUuid: "middle"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "middle"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "length"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "middle"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    branches:
    - lineNumber: 406
      expression: "isAnyEmpty(str, middle)"
      range: "(406,13)-(406,35)"
      evaluatedAs: false
    - lineNumber: 406
      expression: "length >= str.length()"
      range: "(406,40)-(406,61)"
      evaluatedAs: false
    - lineNumber: 406
      expression: "length < middle.length() + 2"
      range: "(406,66)-(406,91)"
      evaluatedAs: true
  - testPathName: "abbreviateMiddleWhenLengthNotLessThanMiddleLengthPlus2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "middle"
      valueUuid: "middle"
    - type: "INPUT"
      name: "length"
      valueUuid: "length"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(charSequenceArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "CBE"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "middle"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "length"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "CBE"
            valueType: "java.lang.String"
            uuid: "str"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "middle"
      valueType: "java.lang.CharSequence[]"
      uuid: "charSequenceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CE"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 406
      expression: "isAnyEmpty(str, middle)"
      range: "(406,13)-(406,35)"
      evaluatedAs: false
    - lineNumber: 406
      expression: "length >= str.length()"
      range: "(406,40)-(406,61)"
      evaluatedAs: false
    - lineNumber: 406
      expression: "length < middle.length() + 2"
      range: "(406,66)-(406,91)"
      evaluatedAs: false
- method:
    name: "appendIfMissing"
    sourceCodeSignature: "String appendIfMissing(final String str, final CharSequence\
      \ suffix, final CharSequence... suffixes)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "suffix"
      type: "java.lang.CharSequence"
    - name: "suffixes"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "F50384A1288B559FD10F8413FB625EB0"
  paths:
  - testPathName: "appendIfMissing1WhenEndsWithStrSuffixIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "suffix"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenArrayUtilsNotIsNotEmptySuffixes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
      nameForMock: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Asuffix1"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenCharSequenceUtilsRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLengthAndEndsWithStrSuffixIgnoreCa"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenEndsWithNotStrSuffixIgnoreCaseAndArrayUtilsNotIsNotEmptySuffixes"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
      nameForMock: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Asuffix"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenEndsWithStrSIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "charSequence"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenEndsWithNotStrSIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenSuffixLengthGreaterThanStrLengthAndEndsWithNotStrSIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenCharSequenceUtilsRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLengthAndEndsWithStrSIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissing1WhenCharSequenceUtilsNotRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLengtThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "appendIfMissingIgnoreCase"
    sourceCodeSignature: "String appendIfMissingIgnoreCase(final String str, final\
      \ CharSequence suffix, final CharSequence... suffixes)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "suffix"
      type: "java.lang.CharSequence"
    - name: "suffixes"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "7960C28EF4270E2518923DA7B78E907A"
  paths:
  - testPathName: "appendIfMissingIgnoreCaseWhenEndsWithStrSuffixIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "suffix"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenArrayUtilsNotIsNotEmptySuffixes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
      nameForMock: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Asuffix1"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenCharSequenceUtilsRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLengthAndEndsWithStrSuffi"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenEndsWithNotStrSuffixIgnoreCaseAndArrayUtilsNotIsNotEmptySuffixes"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
      nameForMock: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Asuffix"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenEndsWithStrSIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "charSequence"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenEndsWithNotStrSIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenSuffixLengthGreaterThanStrLengthAndEndsWithNotStrSIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenCharSequenceUtilsRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLengthAndEndsWithStrSIgno"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "appendIfMissingIgnoreCaseWhenCharSequenceUtilsNotRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffixes"
      valueUuid: "suffixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(suffix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "suffixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 431
      expression: "str == null"
      range: "(431,13)-(431,23)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 431
      expression: "isEmpty(suffix)"
      range: "(431,28)-(431,42)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 431
      expression: "endsWith(str, suffix, ignoreCase)"
      range: "(431,47)-(431,79)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    - lineNumber: 434
      expression: "ArrayUtils.isNotEmpty(suffixes)"
      range: "(434,13)-(434,43)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 435
      expression: "for-each(suffixes)"
      range: "(435,41)-(435,48)"
      evaluatedAs: true
      internalMethodName: "appendIfMissing"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 436
      expression: "endsWith(str, s, ignoreCase)"
      range: "(436,21)-(436,48)"
      evaluatedAs: false
      internalMethodName: "appendIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "capitalize"
    sourceCodeSignature: "String capitalize(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "5F41DDBE66BE8FDEB3779AE61D370328"
  paths:
  - testPathName: "capitalizeWhenStrLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 543
      expression: "strLen == 0"
      range: "(543,13)-(543,23)"
      evaluatedAs: true
  - testPathName: "capitalizeWhenFirstCodepointEqualsNewCodePoint"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 543
      expression: "strLen == 0"
      range: "(543,13)-(543,23)"
      evaluatedAs: false
    - lineNumber: 549
      expression: "firstCodepoint == newCodePoint"
      range: "(549,13)-(549,42)"
      evaluatedAs: true
  - testPathName: "capitalizeWhenInOffsetLessThanStrLen"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 543
      expression: "strLen == 0"
      range: "(543,13)-(543,23)"
      evaluatedAs: false
    - lineNumber: 549
      expression: "firstCodepoint == newCodePoint"
      range: "(549,13)-(549,42)"
      evaluatedAs: false
    - lineNumber: 557
      expression: "inOffset < strLen"
      range: "(557,66)-(557,82)"
      evaluatedAs: true
- method:
    name: "center"
    sourceCodeSignature: "String center(final String str, final int size)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    instructionFingerprint: "C35F0DFE6D41C3BAF0AF679B532DDA47"
  paths:
  - testPathName: "centerTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "center(str,size,padChar):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_center1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: " "
      valueType: "char"
      uuid: "padChar"
- method:
    name: "center"
    sourceCodeSignature: "String center(String str, final int size, final char padChar)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "216A05EAFAD3E129F3A32EE57A7FF8E4"
  paths:
  - testPathName: "center1WhenSizeLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    branches:
    - lineNumber: 617
      expression: "str == null"
      range: "(617,13)-(617,23)"
      evaluatedAs: false
    - lineNumber: 617
      expression: "size <= 0"
      range: "(617,28)-(617,36)"
      evaluatedAs: true
  - testPathName: "center1WhenPadsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    branches:
    - lineNumber: 617
      expression: "str == null"
      range: "(617,13)-(617,23)"
      evaluatedAs: false
    - lineNumber: 617
      expression: "size <= 0"
      range: "(617,28)-(617,36)"
      evaluatedAs: false
    - lineNumber: 622
      expression: "pads <= 0"
      range: "(622,13)-(622,21)"
      evaluatedAs: true
  - testPathName: "center1WhenPadsGreaterThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "leftPad(str,int4,padChar):string"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "rightPad(string,size,padChar):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_leftPad1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_rightPad1"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 617
      expression: "str == null"
      range: "(617,13)-(617,23)"
      evaluatedAs: false
    - lineNumber: 617
      expression: "size <= 0"
      range: "(617,28)-(617,36)"
      evaluatedAs: false
    - lineNumber: 622
      expression: "pads <= 0"
      range: "(622,13)-(622,21)"
      evaluatedAs: false
- method:
    name: "center"
    sourceCodeSignature: "String center(String str, final int size, String padStr)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    - name: "padStr"
      type: "java.lang.String"
    instructionFingerprint: "6B9E389190B31CBAB71DEC2C553BB09C"
  paths:
  - testPathName: "center2WhenSizeLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    branches:
    - lineNumber: 657
      expression: "str == null"
      range: "(657,13)-(657,23)"
      evaluatedAs: false
    - lineNumber: 657
      expression: "size <= 0"
      range: "(657,28)-(657,36)"
      evaluatedAs: true
  - testPathName: "center2WhenPadsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 657
      expression: "str == null"
      range: "(657,13)-(657,23)"
      evaluatedAs: false
    - lineNumber: 657
      expression: "size <= 0"
      range: "(657,28)-(657,36)"
      evaluatedAs: false
    - lineNumber: 660
      expression: "isEmpty(padStr)"
      range: "(660,13)-(660,27)"
      evaluatedAs: true
    - lineNumber: 665
      expression: "pads <= 0"
      range: "(665,13)-(665,21)"
      evaluatedAs: true
  - testPathName: "center2WhenPadsGreaterThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "leftPad(str,int4,string):string2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "rightPad(string2,size,string):string3"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_leftPad1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int4"
    - sapientType: "BASIC"
      content: !<regular>
        value: " "
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_rightPad1"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 657
      expression: "str == null"
      range: "(657,13)-(657,23)"
      evaluatedAs: false
    - lineNumber: 657
      expression: "size <= 0"
      range: "(657,28)-(657,36)"
      evaluatedAs: false
    - lineNumber: 660
      expression: "isEmpty(padStr)"
      range: "(660,13)-(660,27)"
      evaluatedAs: true
    - lineNumber: 665
      expression: "pads <= 0"
      range: "(665,13)-(665,21)"
      evaluatedAs: false
- method:
    name: "chomp"
    sourceCodeSignature: "String chomp(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "E26875A6836379DE46434E10597FC242"
  paths:
  - testPathName: "chompWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 699
      expression: "isEmpty(str)"
      range: "(699,13)-(699,24)"
      evaluatedAs: true
  - testPathName: "chompWhenChEqualsCharUtilsLF"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\n"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 699
      expression: "isEmpty(str)"
      range: "(699,13)-(699,24)"
      evaluatedAs: false
    - lineNumber: 703
      expression: "str.length() == 1"
      range: "(703,13)-(703,29)"
      evaluatedAs: true
    - lineNumber: 705
      expression: "ch == CharUtils.CR"
      range: "(705,17)-(705,34)"
      evaluatedAs: false
    - lineNumber: 705
      expression: "ch == CharUtils.LF"
      range: "(705,39)-(705,56)"
      evaluatedAs: true
  - testPathName: "chompWhenChNotEqualsCharUtilsLF"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 699
      expression: "isEmpty(str)"
      range: "(699,13)-(699,24)"
      evaluatedAs: false
    - lineNumber: 703
      expression: "str.length() == 1"
      range: "(703,13)-(703,29)"
      evaluatedAs: true
    - lineNumber: 705
      expression: "ch == CharUtils.CR"
      range: "(705,17)-(705,34)"
      evaluatedAs: false
    - lineNumber: 705
      expression: "ch == CharUtils.LF"
      range: "(705,39)-(705,56)"
      evaluatedAs: false
  - testPathName: "chompWhenStrCharAtLastIdxMinus1EqualsCharUtilsCR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\r\\n"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 699
      expression: "isEmpty(str)"
      range: "(699,13)-(699,24)"
      evaluatedAs: false
    - lineNumber: 703
      expression: "str.length() == 1"
      range: "(703,13)-(703,29)"
      evaluatedAs: false
    - lineNumber: 714
      expression: "last == CharUtils.LF"
      range: "(714,13)-(714,32)"
      evaluatedAs: true
    - lineNumber: 715
      expression: "str.charAt(lastIdx - 1) == CharUtils.CR"
      range: "(715,17)-(715,55)"
      evaluatedAs: true
  - testPathName: "chompWhenLastNotEqualsCharUtilsCR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "CB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CB"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 699
      expression: "isEmpty(str)"
      range: "(699,13)-(699,24)"
      evaluatedAs: false
    - lineNumber: 703
      expression: "str.length() == 1"
      range: "(703,13)-(703,29)"
      evaluatedAs: false
    - lineNumber: 714
      expression: "last == CharUtils.LF"
      range: "(714,13)-(714,32)"
      evaluatedAs: false
    - lineNumber: 718
      expression: "last != CharUtils.CR"
      range: "(718,20)-(718,39)"
      evaluatedAs: true
- method:
    name: "chomp"
    sourceCodeSignature: "String chomp(final String str, final String separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "F9E7CA4FC8729A766517457F38B4F427"
  paths:
  - testPathName: "chomp1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "removeEnd(str,separator):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_removeEnd1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "chop"
    sourceCodeSignature: "String chop(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "9634F54C42AF2ACF31ECF45F6B0F53CB"
  paths:
  - testPathName: "chopWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 780
      expression: "str == null"
      range: "(780,13)-(780,23)"
      evaluatedAs: true
  - testPathName: "chopWhenStrLenLessThan2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 780
      expression: "str == null"
      range: "(780,13)-(780,23)"
      evaluatedAs: false
    - lineNumber: 784
      expression: "strLen < 2"
      range: "(784,13)-(784,22)"
      evaluatedAs: true
  - testPathName: "chopWhenRetCharAtLastIdxMinus1EqualsCharUtilsCR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\r\\n"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 780
      expression: "str == null"
      range: "(780,13)-(780,23)"
      evaluatedAs: false
    - lineNumber: 784
      expression: "strLen < 2"
      range: "(784,13)-(784,22)"
      evaluatedAs: false
    - lineNumber: 790
      expression: "last == CharUtils.LF"
      range: "(790,13)-(790,32)"
      evaluatedAs: true
    - lineNumber: 790
      expression: "ret.charAt(lastIdx - 1) == CharUtils.CR"
      range: "(790,37)-(790,75)"
      evaluatedAs: true
  - testPathName: "chopWhenRetCharAtLastIdxMinus1NotEqualsCharUtilsCR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A\\n"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 780
      expression: "str == null"
      range: "(780,13)-(780,23)"
      evaluatedAs: false
    - lineNumber: 784
      expression: "strLen < 2"
      range: "(784,13)-(784,22)"
      evaluatedAs: false
    - lineNumber: 790
      expression: "last == CharUtils.LF"
      range: "(790,13)-(790,32)"
      evaluatedAs: true
    - lineNumber: 790
      expression: "ret.charAt(lastIdx - 1) == CharUtils.CR"
      range: "(790,37)-(790,75)"
      evaluatedAs: false
- method:
    name: "compare"
    sourceCodeSignature: "int compare(final String str1, final String str2)"
    returnType: "int"
    parameters:
    - name: "str1"
      type: "java.lang.String"
    - name: "str2"
      type: "java.lang.String"
    instructionFingerprint: "3404E51F1F2D7B190F292A902EE0C5C9"
  paths:
  - testPathName: "compareTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "compare(str1,str2,nullIsLess):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "nullIsLess"
- method:
    name: "compare"
    sourceCodeSignature: "int compare(final String str1, final String str2, final\
      \ boolean nullIsLess)"
    returnType: "int"
    parameters:
    - name: "str1"
      type: "java.lang.String"
    - name: "str2"
      type: "java.lang.String"
    - name: "nullIsLess"
      type: "boolean"
    instructionFingerprint: "F8BB9ED80FA8D87438658EA98F4F5726"
  paths:
  - testPathName: "compare1WhenStr1EqualsStr2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str1"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 867
      expression: "str1 == str2"
      range: "(867,13)-(867,24)"
      evaluatedAs: true
  - testPathName: "compare1WhenNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 867
      expression: "str1 == str2"
      range: "(867,13)-(867,24)"
      evaluatedAs: false
    - lineNumber: 870
      expression: "str1 == null"
      range: "(870,13)-(870,24)"
      evaluatedAs: true
    - lineNumber: 871
      expression: "nullIsLess"
      range: "(871,20)-(871,29)"
      evaluatedAs: true
  - testPathName: "compare1WhenNotNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 867
      expression: "str1 == str2"
      range: "(867,13)-(867,24)"
      evaluatedAs: false
    - lineNumber: 870
      expression: "str1 == null"
      range: "(870,13)-(870,24)"
      evaluatedAs: true
    - lineNumber: 871
      expression: "nullIsLess"
      range: "(871,20)-(871,29)"
      evaluatedAs: false
  - testPathName: "compare1WhenStr2IsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 867
      expression: "str1 == str2"
      range: "(867,13)-(867,24)"
      evaluatedAs: false
    - lineNumber: 870
      expression: "str1 == null"
      range: "(870,13)-(870,24)"
      evaluatedAs: false
    - lineNumber: 873
      expression: "str2 == null"
      range: "(873,13)-(873,24)"
      evaluatedAs: false
  - testPathName: "compare1WhenStr2IsNullAndNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 867
      expression: "str1 == str2"
      range: "(867,13)-(867,24)"
      evaluatedAs: false
    - lineNumber: 870
      expression: "str1 == null"
      range: "(870,13)-(870,24)"
      evaluatedAs: false
    - lineNumber: 873
      expression: "str2 == null"
      range: "(873,13)-(873,24)"
      evaluatedAs: true
    - lineNumber: 874
      expression: "nullIsLess"
      range: "(874,20)-(874,29)"
      evaluatedAs: true
  - testPathName: "compare1WhenStr2IsNullAndNotNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 867
      expression: "str1 == str2"
      range: "(867,13)-(867,24)"
      evaluatedAs: false
    - lineNumber: 870
      expression: "str1 == null"
      range: "(870,13)-(870,24)"
      evaluatedAs: false
    - lineNumber: 873
      expression: "str2 == null"
      range: "(873,13)-(873,24)"
      evaluatedAs: true
    - lineNumber: 874
      expression: "nullIsLess"
      range: "(874,20)-(874,29)"
      evaluatedAs: false
- method:
    name: "compareIgnoreCase"
    sourceCodeSignature: "int compareIgnoreCase(final String str1, final String str2)"
    returnType: "int"
    parameters:
    - name: "str1"
      type: "java.lang.String"
    - name: "str2"
      type: "java.lang.String"
    instructionFingerprint: "B1AA63697077D884FD8202471F64D626"
  paths:
  - testPathName: "compareIgnoreCaseTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "compareIgnoreCase(str1,str2,nullIsLess):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "nullIsLess"
- method:
    name: "compareIgnoreCase"
    sourceCodeSignature: "int compareIgnoreCase(final String str1, final String str2,\
      \ final boolean nullIsLess)"
    returnType: "int"
    parameters:
    - name: "str1"
      type: "java.lang.String"
    - name: "str2"
      type: "java.lang.String"
    - name: "nullIsLess"
      type: "boolean"
    instructionFingerprint: "CCA29448D9BE74B7B14EC03EFB235B08"
  paths:
  - testPathName: "compareIgnoreCase1WhenStr1EqualsStr2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str1"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 960
      expression: "str1 == str2"
      range: "(960,13)-(960,24)"
      evaluatedAs: true
  - testPathName: "compareIgnoreCase1WhenNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 960
      expression: "str1 == str2"
      range: "(960,13)-(960,24)"
      evaluatedAs: false
    - lineNumber: 963
      expression: "str1 == null"
      range: "(963,13)-(963,24)"
      evaluatedAs: true
    - lineNumber: 964
      expression: "nullIsLess"
      range: "(964,20)-(964,29)"
      evaluatedAs: true
  - testPathName: "compareIgnoreCase1WhenNotNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 960
      expression: "str1 == str2"
      range: "(960,13)-(960,24)"
      evaluatedAs: false
    - lineNumber: 963
      expression: "str1 == null"
      range: "(963,13)-(963,24)"
      evaluatedAs: true
    - lineNumber: 964
      expression: "nullIsLess"
      range: "(964,20)-(964,29)"
      evaluatedAs: false
  - testPathName: "compareIgnoreCase1WhenStr2IsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 960
      expression: "str1 == str2"
      range: "(960,13)-(960,24)"
      evaluatedAs: false
    - lineNumber: 963
      expression: "str1 == null"
      range: "(963,13)-(963,24)"
      evaluatedAs: false
    - lineNumber: 966
      expression: "str2 == null"
      range: "(966,13)-(966,24)"
      evaluatedAs: false
  - testPathName: "compareIgnoreCase1WhenStr2IsNullAndNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 960
      expression: "str1 == str2"
      range: "(960,13)-(960,24)"
      evaluatedAs: false
    - lineNumber: 963
      expression: "str1 == null"
      range: "(963,13)-(963,24)"
      evaluatedAs: false
    - lineNumber: 966
      expression: "str2 == null"
      range: "(966,13)-(966,24)"
      evaluatedAs: true
    - lineNumber: 967
      expression: "nullIsLess"
      range: "(967,20)-(967,29)"
      evaluatedAs: true
  - testPathName: "compareIgnoreCase1WhenStr2IsNullAndNotNullIsLess"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "INPUT"
      name: "nullIsLess"
      valueUuid: "nullIsLess"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "nullIsLess"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 960
      expression: "str1 == str2"
      range: "(960,13)-(960,24)"
      evaluatedAs: false
    - lineNumber: 963
      expression: "str1 == null"
      range: "(963,13)-(963,24)"
      evaluatedAs: false
    - lineNumber: 966
      expression: "str2 == null"
      range: "(966,13)-(966,24)"
      evaluatedAs: true
    - lineNumber: 967
      expression: "nullIsLess"
      range: "(967,20)-(967,29)"
      evaluatedAs: false
- method:
    name: "contains"
    sourceCodeSignature: "boolean contains(final CharSequence seq, final CharSequence\
      \ searchSeq)"
    returnType: "boolean"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchSeq"
      type: "java.lang.CharSequence"
    instructionFingerprint: "2D0B702C0482EDB7B4D27B70A5E45285"
  paths:
  - testPathName: "containsWhenSearchSeqIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 995
      expression: "seq == null"
      range: "(995,13)-(995,23)"
      evaluatedAs: false
    - lineNumber: 995
      expression: "searchSeq == null"
      range: "(995,28)-(995,44)"
      evaluatedAs: true
  - testPathName: "containsWhenCharSequenceUtilsIndexOfSeqSearchSeq0GreaterThanOrEqualsTo0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchSeq1"
      valueType: "java.lang.String"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 995
      expression: "seq == null"
      range: "(995,13)-(995,23)"
      evaluatedAs: false
    - lineNumber: 995
      expression: "searchSeq == null"
      range: "(995,28)-(995,44)"
      evaluatedAs: false
    - lineNumber: 998
      expression: "CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0"
      range: "(998,16)-(998,64)"
      evaluatedAs: true
  - testPathName: "containsWhenCharSequenceUtilsIndexOfSeqSearchSeq0LessThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchSeq1"
      valueType: "java.lang.String"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 995
      expression: "seq == null"
      range: "(995,13)-(995,23)"
      evaluatedAs: false
    - lineNumber: 995
      expression: "searchSeq == null"
      range: "(995,28)-(995,44)"
      evaluatedAs: false
    - lineNumber: 998
      expression: "CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0"
      range: "(998,16)-(998,64)"
      evaluatedAs: false
- method:
    name: "contains"
    sourceCodeSignature: "boolean contains(final CharSequence seq, final int searchChar)"
    returnType: "boolean"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchChar"
      type: "int"
    instructionFingerprint: "6C0594752A8F00C38F45B8B4689B7886"
  paths:
  - testPathName: "contains1WhenIsEmptySeq"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1022
      expression: "isEmpty(seq)"
      range: "(1022,13)-(1022,24)"
      evaluatedAs: true
  - testPathName: "contains1WhenCharSequenceUtilsIndexOfSeqSearchChar0GreaterThanOrEqualsTo0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,int,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1022
      expression: "isEmpty(seq)"
      range: "(1022,13)-(1022,24)"
      evaluatedAs: false
    - lineNumber: 1025
      expression: "CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0"
      range: "(1025,16)-(1025,65)"
      evaluatedAs: true
  - testPathName: "contains1WhenCharSequenceUtilsIndexOfSeqSearchChar0LessThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,int,int)\
        \ : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1022
      expression: "isEmpty(seq)"
      range: "(1022,13)-(1022,24)"
      evaluatedAs: false
    - lineNumber: 1025
      expression: "CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0"
      range: "(1025,16)-(1025,65)"
      evaluatedAs: false
- method:
    name: "containsAny"
    sourceCodeSignature: "boolean containsAny(final CharSequence cs, final char...\
      \ searchChars)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchChars"
      type: "char[]"
    instructionFingerprint: "07CC49EFE462DCFD628DF0AFD9E2BE1A"
  paths:
  - testPathName: "containsAnyWhenArrayUtilsIsEmptySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1054
      expression: "isEmpty(cs)"
      range: "(1054,13)-(1054,23)"
      evaluatedAs: false
    - lineNumber: 1054
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(1054,28)-(1054,58)"
      evaluatedAs: true
  - testPathName: "containsAnyWhenCharacterNotIsHighSurrogateCh"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1054
      expression: "isEmpty(cs)"
      range: "(1054,13)-(1054,23)"
      evaluatedAs: false
    - lineNumber: 1054
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(1054,28)-(1054,58)"
      evaluatedAs: false
    - lineNumber: 1061
      expression: "i < csLength"
      range: "(1061,25)-(1061,36)"
      evaluatedAs: true
    - lineNumber: 1063
      expression: "j < searchLength"
      range: "(1063,29)-(1063,44)"
      evaluatedAs: true
    - lineNumber: 1064
      expression: "searchChars[j] == ch"
      range: "(1064,21)-(1064,40)"
      evaluatedAs: true
    - lineNumber: 1065
      expression: "!Character.isHighSurrogate(ch)"
      range: "(1065,25)-(1065,54)"
      evaluatedAs: true
  - testPathName: "containsAnyWhenJEqualsSearchLast"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1054
      expression: "isEmpty(cs)"
      range: "(1054,13)-(1054,23)"
      evaluatedAs: false
    - lineNumber: 1054
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(1054,28)-(1054,58)"
      evaluatedAs: false
    - lineNumber: 1061
      expression: "i < csLength"
      range: "(1061,25)-(1061,36)"
      evaluatedAs: true
    - lineNumber: 1063
      expression: "j < searchLength"
      range: "(1063,29)-(1063,44)"
      evaluatedAs: true
    - lineNumber: 1064
      expression: "searchChars[j] == ch"
      range: "(1064,21)-(1064,40)"
      evaluatedAs: true
    - lineNumber: 1065
      expression: "!Character.isHighSurrogate(ch)"
      range: "(1065,25)-(1065,54)"
      evaluatedAs: false
    - lineNumber: 1069
      expression: "j == searchLast"
      range: "(1069,25)-(1069,39)"
      evaluatedAs: true
  - testPathName: "containsAnyWhenJPlus1IndexOfSearchCharsEqualsCsCharAtIPlus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1054
      expression: "isEmpty(cs)"
      range: "(1054,13)-(1054,23)"
      evaluatedAs: false
    - lineNumber: 1054
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(1054,28)-(1054,58)"
      evaluatedAs: false
    - lineNumber: 1061
      expression: "i < csLength"
      range: "(1061,25)-(1061,36)"
      evaluatedAs: true
    - lineNumber: 1063
      expression: "j < searchLength"
      range: "(1063,29)-(1063,44)"
      evaluatedAs: true
    - lineNumber: 1064
      expression: "searchChars[j] == ch"
      range: "(1064,21)-(1064,40)"
      evaluatedAs: true
    - lineNumber: 1065
      expression: "!Character.isHighSurrogate(ch)"
      range: "(1065,25)-(1065,54)"
      evaluatedAs: false
    - lineNumber: 1069
      expression: "j == searchLast"
      range: "(1069,25)-(1069,39)"
      evaluatedAs: false
    - lineNumber: 1073
      expression: "i < csLast"
      range: "(1073,25)-(1073,34)"
      evaluatedAs: true
    - lineNumber: 1073
      expression: "searchChars[j + 1] == cs.charAt(i + 1)"
      range: "(1073,39)-(1073,76)"
      evaluatedAs: true
  - testPathName: "containsAnyWhenJPlus1IndexOfSearchCharsNotEqualsCsCharAtIPlus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1054
      expression: "isEmpty(cs)"
      range: "(1054,13)-(1054,23)"
      evaluatedAs: false
    - lineNumber: 1054
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(1054,28)-(1054,58)"
      evaluatedAs: false
    - lineNumber: 1061
      expression: "i < csLength"
      range: "(1061,25)-(1061,36)"
      evaluatedAs: true
    - lineNumber: 1063
      expression: "j < searchLength"
      range: "(1063,29)-(1063,44)"
      evaluatedAs: true
    - lineNumber: 1064
      expression: "searchChars[j] == ch"
      range: "(1064,21)-(1064,40)"
      evaluatedAs: true
    - lineNumber: 1065
      expression: "!Character.isHighSurrogate(ch)"
      range: "(1065,25)-(1065,54)"
      evaluatedAs: false
    - lineNumber: 1069
      expression: "j == searchLast"
      range: "(1069,25)-(1069,39)"
      evaluatedAs: false
    - lineNumber: 1073
      expression: "i < csLast"
      range: "(1073,25)-(1073,34)"
      evaluatedAs: true
    - lineNumber: 1073
      expression: "searchChars[j + 1] == cs.charAt(i + 1)"
      range: "(1073,39)-(1073,76)"
      evaluatedAs: false
- method:
    name: "containsAny"
    sourceCodeSignature: "boolean containsAny(final CharSequence cs, final CharSequence\
      \ searchChars)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchChars"
      type: "java.lang.CharSequence"
    instructionFingerprint: "9A91E82E92E3761BB8F63AA05B299C74"
  paths:
  - testPathName: "containsAny1WhenSearchCharsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1112
      expression: "searchChars == null"
      range: "(1112,13)-(1112,31)"
      evaluatedAs: true
  - testPathName: "containsAny1WhenContainsAnyCsCharSequenceUtilsToCharArraySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "containsAny(cs,charArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "s"
            valueType: "char"
            uuid: "charArray-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "e"
            valueType: "char"
            uuid: "charArray-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "a"
            valueType: "char"
            uuid: "charArray-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: "r"
            valueType: "char"
            uuid: "charArray-item3"
          4:
            sapientType: "BASIC"
            content: !<regular>
              value: "c"
            valueType: "char"
            uuid: "charArray-item4"
          5:
            sapientType: "BASIC"
            content: !<regular>
              value: "h"
            valueType: "char"
            uuid: "charArray-item5"
          6:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "char"
            uuid: "charArray-item6"
          7:
            sapientType: "BASIC"
            content: !<regular>
              value: "h"
            valueType: "char"
            uuid: "charArray-item7"
          8:
            sapientType: "BASIC"
            content: !<regular>
              value: "a"
            valueType: "char"
            uuid: "charArray-item8"
          9:
            sapientType: "BASIC"
            content: !<regular>
              value: "r"
            valueType: "char"
            uuid: "charArray-item9"
          10:
            sapientType: "BASIC"
            content: !<regular>
              value: "s"
            valueType: "char"
            uuid: "charArray-item10"
          11:
            sapientType: "BASIC"
            content: !<regular>
              value: "1"
            valueType: "char"
            uuid: "charArray-item11"
      valueType: "char[]"
      uuid: "charArray"
    branches:
    - lineNumber: 1112
      expression: "searchChars == null"
      range: "(1112,13)-(1112,31)"
      evaluatedAs: false
    - lineNumber: 1115
      expression: "containsAny(cs, CharSequenceUtils.toCharArray(searchChars))"
      range: "(1115,16)-(1115,74)"
      evaluatedAs: true
  - testPathName: "containsAny1WhenContainsAnyNotCsCharSequenceUtilsToCharArraySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "containsAny(cs,charArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "s"
            valueType: "char"
            uuid: "charArray-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "e"
            valueType: "char"
            uuid: "charArray-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "a"
            valueType: "char"
            uuid: "charArray-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: "r"
            valueType: "char"
            uuid: "charArray-item3"
          4:
            sapientType: "BASIC"
            content: !<regular>
              value: "c"
            valueType: "char"
            uuid: "charArray-item4"
          5:
            sapientType: "BASIC"
            content: !<regular>
              value: "h"
            valueType: "char"
            uuid: "charArray-item5"
          6:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "char"
            uuid: "charArray-item6"
          7:
            sapientType: "BASIC"
            content: !<regular>
              value: "h"
            valueType: "char"
            uuid: "charArray-item7"
          8:
            sapientType: "BASIC"
            content: !<regular>
              value: "a"
            valueType: "char"
            uuid: "charArray-item8"
          9:
            sapientType: "BASIC"
            content: !<regular>
              value: "r"
            valueType: "char"
            uuid: "charArray-item9"
          10:
            sapientType: "BASIC"
            content: !<regular>
              value: "s"
            valueType: "char"
            uuid: "charArray-item10"
          11:
            sapientType: "BASIC"
            content: !<regular>
              value: "1"
            valueType: "char"
            uuid: "charArray-item11"
      valueType: "char[]"
      uuid: "charArray"
    branches:
    - lineNumber: 1112
      expression: "searchChars == null"
      range: "(1112,13)-(1112,31)"
      evaluatedAs: false
    - lineNumber: 1115
      expression: "containsAny(cs, CharSequenceUtils.toCharArray(searchChars))"
      range: "(1115,16)-(1115,74)"
      evaluatedAs: false
- method:
    name: "containsAny"
    sourceCodeSignature: "boolean containsAny(final CharSequence cs, final CharSequence...\
      \ searchCharSequences)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchCharSequences"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "6ECBE5ADD189A6DD010B6AE957A5ED6B"
  paths:
  - testPathName: "containsAny2WhenArrayUtilsIsEmptySearchCharSequences"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchCharSequences"
      valueUuid: "searchCharSequences"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "searchCharSequences"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1162
      expression: "isEmpty(cs)"
      range: "(1162,13)-(1162,23)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1162
      expression: "ArrayUtils.isEmpty(searchCharSequences)"
      range: "(1162,28)-(1162,66)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "containsAny2WhenTestApplyAsBooleanCsSearchCharSequence"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchCharSequences"
      valueUuid: "searchCharSequences"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.CharSequence[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchCharSequences"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1162
      expression: "isEmpty(cs)"
      range: "(1162,13)-(1162,23)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1162
      expression: "ArrayUtils.isEmpty(searchCharSequences)"
      range: "(1162,28)-(1162,66)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1165
      expression: "for-each(searchCharSequences)"
      range: "(1165,54)-(1165,72)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    - lineNumber: 1166
      expression: "test.applyAsBoolean(cs, searchCharSequence)"
      range: "(1166,17)-(1166,59)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "containsAny2WhenTestNotApplyAsBooleanCsSearchCharSequence"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchCharSequences"
      valueUuid: "searchCharSequences"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchCharSequences"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1162
      expression: "isEmpty(cs)"
      range: "(1162,13)-(1162,23)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1162
      expression: "ArrayUtils.isEmpty(searchCharSequences)"
      range: "(1162,28)-(1162,66)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1165
      expression: "for-each(searchCharSequences)"
      range: "(1165,54)-(1165,72)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    - lineNumber: 1166
      expression: "test.applyAsBoolean(cs, searchCharSequence)"
      range: "(1166,17)-(1166,59)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "containsAnyIgnoreCase"
    sourceCodeSignature: "boolean containsAnyIgnoreCase(final CharSequence cs, final\
      \ CharSequence... searchCharSequences)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchCharSequences"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "DDD31F249C4EF0DB9DECAF4F3CF0CD64"
  paths:
  - testPathName: "containsAnyIgnoreCaseWhenArrayUtilsIsEmptySearchCharSequences"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchCharSequences"
      valueUuid: "searchCharSequences"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "searchCharSequences"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1162
      expression: "isEmpty(cs)"
      range: "(1162,13)-(1162,23)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1162
      expression: "ArrayUtils.isEmpty(searchCharSequences)"
      range: "(1162,28)-(1162,66)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "containsAnyIgnoreCaseWhenTestApplyAsBooleanCsSearchCharSequence"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchCharSequences"
      valueUuid: "searchCharSequences"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.CharSequence[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchCharSequences"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1162
      expression: "isEmpty(cs)"
      range: "(1162,13)-(1162,23)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1162
      expression: "ArrayUtils.isEmpty(searchCharSequences)"
      range: "(1162,28)-(1162,66)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1165
      expression: "for-each(searchCharSequences)"
      range: "(1165,54)-(1165,72)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    - lineNumber: 1166
      expression: "test.applyAsBoolean(cs, searchCharSequence)"
      range: "(1166,17)-(1166,59)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "containsAnyIgnoreCaseWhenTestNotApplyAsBooleanCsSearchCharSequence"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchCharSequences"
      valueUuid: "searchCharSequences"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchCharSequences"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1162
      expression: "isEmpty(cs)"
      range: "(1162,13)-(1162,23)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1162
      expression: "ArrayUtils.isEmpty(searchCharSequences)"
      range: "(1162,28)-(1162,66)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    - lineNumber: 1165
      expression: "for-each(searchCharSequences)"
      range: "(1165,54)-(1165,72)"
      evaluatedAs: true
      internalMethodName: "containsAny"
    - lineNumber: 1166
      expression: "test.applyAsBoolean(cs, searchCharSequence)"
      range: "(1166,17)-(1166,59)"
      evaluatedAs: false
      internalMethodName: "containsAny"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "containsIgnoreCase"
    sourceCodeSignature: "boolean containsIgnoreCase(final CharSequence str, final\
      \ CharSequence searchStr)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStr"
      type: "java.lang.CharSequence"
    instructionFingerprint: "19AD4B0497B61B4390C06494065D16E0"
  paths:
  - testPathName: "containsIgnoreCaseWhenSearchStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1228
      expression: "str == null"
      range: "(1228,13)-(1228,23)"
      evaluatedAs: false
    - lineNumber: 1228
      expression: "searchStr == null"
      range: "(1228,28)-(1228,44)"
      evaluatedAs: true
  - testPathName: "containsIgnoreCaseWhenCharSequenceUtilsRegionMatchesStrTrueISearchStr0Len"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1228
      expression: "str == null"
      range: "(1228,13)-(1228,23)"
      evaluatedAs: false
    - lineNumber: 1228
      expression: "searchStr == null"
      range: "(1228,28)-(1228,44)"
      evaluatedAs: false
    - lineNumber: 1233
      expression: "i <= max"
      range: "(1233,25)-(1233,32)"
      evaluatedAs: true
    - lineNumber: 1234
      expression: "CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)"
      range: "(1234,17)-(1234,80)"
      evaluatedAs: true
  - testPathName: "containsIgnoreCaseWhenCharSequenceUtilsNotRegionMatchesStrTrueISearchStr0Len"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1228
      expression: "str == null"
      range: "(1228,13)-(1228,23)"
      evaluatedAs: false
    - lineNumber: 1228
      expression: "searchStr == null"
      range: "(1228,28)-(1228,44)"
      evaluatedAs: false
    - lineNumber: 1233
      expression: "i <= max"
      range: "(1233,25)-(1233,32)"
      evaluatedAs: true
    - lineNumber: 1234
      expression: "CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)"
      range: "(1234,17)-(1234,80)"
      evaluatedAs: false
- method:
    name: "containsNone"
    sourceCodeSignature: "boolean containsNone(final CharSequence cs, final char...\
      \ searchChars)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchChars"
      type: "char[]"
    instructionFingerprint: "181C68277988F381E755224620119948"
  paths:
  - testPathName: "containsNoneWhenSearchCharsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1265
      expression: "cs == null"
      range: "(1265,13)-(1265,22)"
      evaluatedAs: false
    - lineNumber: 1265
      expression: "searchChars == null"
      range: "(1265,27)-(1265,45)"
      evaluatedAs: true
  - testPathName: "containsNoneWhenCharacterNotIsHighSurrogateCh"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1265
      expression: "cs == null"
      range: "(1265,13)-(1265,22)"
      evaluatedAs: false
    - lineNumber: 1265
      expression: "searchChars == null"
      range: "(1265,27)-(1265,45)"
      evaluatedAs: false
    - lineNumber: 1272
      expression: "i < csLen"
      range: "(1272,25)-(1272,33)"
      evaluatedAs: true
    - lineNumber: 1274
      expression: "j < searchLen"
      range: "(1274,29)-(1274,41)"
      evaluatedAs: true
    - lineNumber: 1275
      expression: "searchChars[j] == ch"
      range: "(1275,21)-(1275,40)"
      evaluatedAs: true
    - lineNumber: 1276
      expression: "!Character.isHighSurrogate(ch)"
      range: "(1276,25)-(1276,54)"
      evaluatedAs: true
  - testPathName: "containsNoneWhenJEqualsSearchLast"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1265
      expression: "cs == null"
      range: "(1265,13)-(1265,22)"
      evaluatedAs: false
    - lineNumber: 1265
      expression: "searchChars == null"
      range: "(1265,27)-(1265,45)"
      evaluatedAs: false
    - lineNumber: 1272
      expression: "i < csLen"
      range: "(1272,25)-(1272,33)"
      evaluatedAs: true
    - lineNumber: 1274
      expression: "j < searchLen"
      range: "(1274,29)-(1274,41)"
      evaluatedAs: true
    - lineNumber: 1275
      expression: "searchChars[j] == ch"
      range: "(1275,21)-(1275,40)"
      evaluatedAs: true
    - lineNumber: 1276
      expression: "!Character.isHighSurrogate(ch)"
      range: "(1276,25)-(1276,54)"
      evaluatedAs: false
    - lineNumber: 1280
      expression: "j == searchLast"
      range: "(1280,25)-(1280,39)"
      evaluatedAs: true
  - testPathName: "containsNoneWhenJPlus1IndexOfSearchCharsNotEqualsCsCharAtIPlus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1265
      expression: "cs == null"
      range: "(1265,13)-(1265,22)"
      evaluatedAs: false
    - lineNumber: 1265
      expression: "searchChars == null"
      range: "(1265,27)-(1265,45)"
      evaluatedAs: false
    - lineNumber: 1272
      expression: "i < csLen"
      range: "(1272,25)-(1272,33)"
      evaluatedAs: true
    - lineNumber: 1274
      expression: "j < searchLen"
      range: "(1274,29)-(1274,41)"
      evaluatedAs: true
    - lineNumber: 1275
      expression: "searchChars[j] == ch"
      range: "(1275,21)-(1275,40)"
      evaluatedAs: true
    - lineNumber: 1276
      expression: "!Character.isHighSurrogate(ch)"
      range: "(1276,25)-(1276,54)"
      evaluatedAs: false
    - lineNumber: 1280
      expression: "j == searchLast"
      range: "(1280,25)-(1280,39)"
      evaluatedAs: false
    - lineNumber: 1284
      expression: "i < csLast"
      range: "(1284,25)-(1284,34)"
      evaluatedAs: true
    - lineNumber: 1284
      expression: "searchChars[j + 1] == cs.charAt(i + 1)"
      range: "(1284,39)-(1284,76)"
      evaluatedAs: false
- method:
    name: "containsNone"
    sourceCodeSignature: "boolean containsNone(final CharSequence cs, final String\
      \ invalidChars)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "invalidChars"
      type: "java.lang.String"
    instructionFingerprint: "161BA4D2CB1CB9386021AC1FFECA5DDF"
  paths:
  - testPathName: "containsNone1WhenInvalidCharsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "invalidChars"
      valueUuid: "invalidChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "invalidChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1317
      expression: "invalidChars == null"
      range: "(1317,13)-(1317,32)"
      evaluatedAs: true
  - testPathName: "containsNone1WhenContainsNoneCsInvalidCharsToCharArray"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "invalidChars"
      valueUuid: "invalidChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "containsNone(cs,charArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "invalidChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charArray-item0"
      valueType: "char[]"
      uuid: "charArray"
    branches:
    - lineNumber: 1317
      expression: "invalidChars == null"
      range: "(1317,13)-(1317,32)"
      evaluatedAs: false
    - lineNumber: 1320
      expression: "containsNone(cs, invalidChars.toCharArray())"
      range: "(1320,16)-(1320,59)"
      evaluatedAs: true
  - testPathName: "containsNone1WhenContainsNoneNotCsInvalidCharsToCharArray"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "invalidChars"
      valueUuid: "invalidChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "containsNone(cs,charArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "invalidChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charArray-item0"
      valueType: "char[]"
      uuid: "charArray"
    branches:
    - lineNumber: 1317
      expression: "invalidChars == null"
      range: "(1317,13)-(1317,32)"
      evaluatedAs: false
    - lineNumber: 1320
      expression: "containsNone(cs, invalidChars.toCharArray())"
      range: "(1320,16)-(1320,59)"
      evaluatedAs: false
- method:
    name: "containsOnly"
    sourceCodeSignature: "boolean containsOnly(final CharSequence cs, final char...\
      \ valid)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "valid"
      type: "char[]"
    instructionFingerprint: "59EBFBCF2D25CD7160266BE66791356D"
  paths:
  - testPathName: "containsOnlyWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "valid"
      valueUuid: "valid"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "valid"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1347
      expression: "valid == null"
      range: "(1347,13)-(1347,25)"
      evaluatedAs: false
    - lineNumber: 1347
      expression: "cs == null"
      range: "(1347,30)-(1347,39)"
      evaluatedAs: true
  - testPathName: "containsOnlyWhenCsLengthEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "valid"
      valueUuid: "valid"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "valid"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1347
      expression: "valid == null"
      range: "(1347,13)-(1347,25)"
      evaluatedAs: false
    - lineNumber: 1347
      expression: "cs == null"
      range: "(1347,30)-(1347,39)"
      evaluatedAs: false
    - lineNumber: 1350
      expression: "cs.length() == 0"
      range: "(1350,13)-(1350,28)"
      evaluatedAs: true
  - testPathName: "containsOnlyWhenValidLengthEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "valid"
      valueUuid: "valid"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "valid"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1347
      expression: "valid == null"
      range: "(1347,13)-(1347,25)"
      evaluatedAs: false
    - lineNumber: 1347
      expression: "cs == null"
      range: "(1347,30)-(1347,39)"
      evaluatedAs: false
    - lineNumber: 1350
      expression: "cs.length() == 0"
      range: "(1350,13)-(1350,28)"
      evaluatedAs: false
    - lineNumber: 1353
      expression: "valid.length == 0"
      range: "(1353,13)-(1353,29)"
      evaluatedAs: true
  - testPathName: "containsOnlyWhenIndexOfAnyButCsValidEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "valid"
      valueUuid: "valid"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfAnyBut(cs,valid):int3"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "validItem0"
      valueType: "char[]"
      uuid: "valid"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int3"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1347
      expression: "valid == null"
      range: "(1347,13)-(1347,25)"
      evaluatedAs: false
    - lineNumber: 1347
      expression: "cs == null"
      range: "(1347,30)-(1347,39)"
      evaluatedAs: false
    - lineNumber: 1350
      expression: "cs.length() == 0"
      range: "(1350,13)-(1350,28)"
      evaluatedAs: false
    - lineNumber: 1353
      expression: "valid.length == 0"
      range: "(1353,13)-(1353,29)"
      evaluatedAs: false
    - lineNumber: 1356
      expression: "indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND"
      range: "(1356,16)-(1356,58)"
      evaluatedAs: true
  - testPathName: "containsOnlyWhenIndexOfAnyButCsValidNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "valid"
      valueUuid: "valid"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfAnyBut(cs,valid):int3"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "validItem0"
      valueType: "char[]"
      uuid: "valid"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1347
      expression: "valid == null"
      range: "(1347,13)-(1347,25)"
      evaluatedAs: false
    - lineNumber: 1347
      expression: "cs == null"
      range: "(1347,30)-(1347,39)"
      evaluatedAs: false
    - lineNumber: 1350
      expression: "cs.length() == 0"
      range: "(1350,13)-(1350,28)"
      evaluatedAs: false
    - lineNumber: 1353
      expression: "valid.length == 0"
      range: "(1353,13)-(1353,29)"
      evaluatedAs: false
    - lineNumber: 1356
      expression: "indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND"
      range: "(1356,16)-(1356,58)"
      evaluatedAs: false
- method:
    name: "containsOnly"
    sourceCodeSignature: "boolean containsOnly(final CharSequence cs, final String\
      \ validChars)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "validChars"
      type: "java.lang.String"
    instructionFingerprint: "148F7F933F473915681260374CC5AAA7"
  paths:
  - testPathName: "containsOnly1WhenValidCharsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "validChars"
      valueUuid: "validChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "validChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1383
      expression: "cs == null"
      range: "(1383,13)-(1383,22)"
      evaluatedAs: false
    - lineNumber: 1383
      expression: "validChars == null"
      range: "(1383,27)-(1383,44)"
      evaluatedAs: true
  - testPathName: "containsOnly1WhenContainsOnlyCsValidCharsToCharArray"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "validChars"
      valueUuid: "validChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "containsOnly(cs,charArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "validChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charArray-item0"
      valueType: "char[]"
      uuid: "charArray"
    branches:
    - lineNumber: 1383
      expression: "cs == null"
      range: "(1383,13)-(1383,22)"
      evaluatedAs: false
    - lineNumber: 1383
      expression: "validChars == null"
      range: "(1383,27)-(1383,44)"
      evaluatedAs: false
    - lineNumber: 1386
      expression: "containsOnly(cs, validChars.toCharArray())"
      range: "(1386,16)-(1386,57)"
      evaluatedAs: true
  - testPathName: "containsOnly1WhenContainsOnlyNotCsValidCharsToCharArray"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "validChars"
      valueUuid: "validChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "containsOnly(cs,charArray):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "validChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charArray-item0"
      valueType: "char[]"
      uuid: "charArray"
    branches:
    - lineNumber: 1383
      expression: "cs == null"
      range: "(1383,13)-(1383,22)"
      evaluatedAs: false
    - lineNumber: 1383
      expression: "validChars == null"
      range: "(1383,27)-(1383,44)"
      evaluatedAs: false
    - lineNumber: 1386
      expression: "containsOnly(cs, validChars.toCharArray())"
      range: "(1386,16)-(1386,57)"
      evaluatedAs: false
- method:
    name: "containsWhitespace"
    sourceCodeSignature: "boolean containsWhitespace(final CharSequence seq)"
    returnType: "boolean"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    instructionFingerprint: "C82B2775E5A5FB6CE2FCE33B85A792F6"
  paths:
  - testPathName: "containsWhitespaceWhenIsEmptySeq"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1401
      expression: "isEmpty(seq)"
      range: "(1401,13)-(1401,24)"
      evaluatedAs: true
  - testPathName: "containsWhitespaceWhenCharacterIsWhitespaceSeqCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1401
      expression: "isEmpty(seq)"
      range: "(1401,13)-(1401,24)"
      evaluatedAs: false
    - lineNumber: 1405
      expression: "i < strLen"
      range: "(1405,25)-(1405,34)"
      evaluatedAs: true
    - lineNumber: 1406
      expression: "Character.isWhitespace(seq.charAt(i))"
      range: "(1406,17)-(1406,53)"
      evaluatedAs: true
  - testPathName: "containsWhitespaceWhenCharacterNotIsWhitespaceSeqCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1401
      expression: "isEmpty(seq)"
      range: "(1401,13)-(1401,24)"
      evaluatedAs: false
    - lineNumber: 1405
      expression: "i < strLen"
      range: "(1405,25)-(1405,34)"
      evaluatedAs: true
    - lineNumber: 1406
      expression: "Character.isWhitespace(seq.charAt(i))"
      range: "(1406,17)-(1406,53)"
      evaluatedAs: false
- method:
    name: "countMatches"
    sourceCodeSignature: "int countMatches(final CharSequence str, final char ch)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "ch"
      type: "char"
    instructionFingerprint: "52A43CE6BDAA29B9D1F8472098174C14"
  paths:
  - testPathName: "countMatchesWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1443
      expression: "isEmpty(str)"
      range: "(1443,13)-(1443,24)"
      evaluatedAs: true
  - testPathName: "countMatchesWhenChEqualsStrCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int4"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int4"
    branches:
    - lineNumber: 1443
      expression: "isEmpty(str)"
      range: "(1443,13)-(1443,24)"
      evaluatedAs: false
    - lineNumber: 1448
      expression: "i < str.length()"
      range: "(1448,25)-(1448,40)"
      evaluatedAs: true
    - lineNumber: 1449
      expression: "ch == str.charAt(i)"
      range: "(1449,17)-(1449,35)"
      evaluatedAs: true
- method:
    name: "countMatches"
    sourceCodeSignature: "int countMatches(final CharSequence str, final CharSequence\
      \ sub)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "sub"
      type: "java.lang.CharSequence"
    instructionFingerprint: "95DC353B68E52BDABFBE6B71751E844A"
  paths:
  - testPathName: "countMatches1WhenIsEmptySub"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "sub"
      valueUuid: "sub"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sub):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "sub1"
      valueType: "java.lang.String"
      uuid: "sub"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1479
      expression: "isEmpty(str)"
      range: "(1479,13)-(1479,24)"
      evaluatedAs: false
    - lineNumber: 1479
      expression: "isEmpty(sub)"
      range: "(1479,29)-(1479,40)"
      evaluatedAs: true
  - testPathName: "countMatches1WhenIdxAssignedCharSequenceUtilsIndexOfStrSubIdxNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "sub"
      valueUuid: "sub"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sub):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int4"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "sub1"
      valueType: "java.lang.String"
      uuid: "sub"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int4"
    branches:
    - lineNumber: 1479
      expression: "isEmpty(str)"
      range: "(1479,13)-(1479,24)"
      evaluatedAs: false
    - lineNumber: 1479
      expression: "isEmpty(sub)"
      range: "(1479,29)-(1479,40)"
      evaluatedAs: false
    - lineNumber: 1484
      expression: "(idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND"
      range: "(1484,16)-(1484,82)"
      evaluatedAs: true
- method:
    name: "defaultIfBlank"
    sourceCodeSignature: "<T extends CharSequence> T defaultIfBlank(final T str, final\
      \ T defaultStr)"
    returnType: "java.lang.CharSequence"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "defaultStr"
      type: "java.lang.CharSequence"
    instructionFingerprint: "8889363B79DADAC114FE72716BB0152A"
  paths:
  - testPathName: "defaultIfBlankWhenIsBlankStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultStr"
      valueUuid: "defaultStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultStr"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "defaultStr1"
      valueType: "java.lang.String"
      uuid: "defaultStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1512
      expression: "isBlank(str)"
      range: "(1512,16)-(1512,27)"
      evaluatedAs: true
  - testPathName: "defaultIfBlankWhenIsBlankNotStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultStr"
      valueUuid: "defaultStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "defaultStr1"
      valueType: "java.lang.String"
      uuid: "defaultStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1512
      expression: "isBlank(str)"
      range: "(1512,16)-(1512,27)"
      evaluatedAs: false
- method:
    name: "defaultIfEmpty"
    sourceCodeSignature: "<T extends CharSequence> T defaultIfEmpty(final T str, final\
      \ T defaultStr)"
    returnType: "java.lang.CharSequence"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "defaultStr"
      type: "java.lang.CharSequence"
    instructionFingerprint: "F29118638EC130D933CF9F51724A68CE"
  paths:
  - testPathName: "defaultIfEmptyWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultStr"
      valueUuid: "defaultStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultStr"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "defaultStr1"
      valueType: "java.lang.String"
      uuid: "defaultStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1534
      expression: "isEmpty(str)"
      range: "(1534,16)-(1534,27)"
      evaluatedAs: true
  - testPathName: "defaultIfEmptyWhenIsEmptyNotStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultStr"
      valueUuid: "defaultStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "defaultStr1"
      valueType: "java.lang.String"
      uuid: "defaultStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1534
      expression: "isEmpty(str)"
      range: "(1534,16)-(1534,27)"
      evaluatedAs: false
- method:
    name: "defaultString"
    sourceCodeSignature: "String defaultString(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "2A42EB3D78BEF6FEEB07845E0C6BFC7F"
  paths:
  - testPathName: "defaultStringTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "defaultString"
    sourceCodeSignature: "String defaultString(final String str, final String nullDefault)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "nullDefault"
      type: "java.lang.String"
    instructionFingerprint: "F44DC6698B64221A3D491DD964F06E8E"
  paths:
  - testPathName: "defaultString1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "nullDefault"
      valueUuid: "nullDefault"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "nullDefault"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "deleteWhitespace"
    sourceCodeSignature: "String deleteWhitespace(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "1CE5F9D1571EDECB72CA758BAFC27284"
  paths:
  - testPathName: "deleteWhitespaceWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1603
      expression: "isEmpty(str)"
      range: "(1603,13)-(1603,24)"
      evaluatedAs: true
  - testPathName: "deleteWhitespaceWhenCharacterNotIsWhitespaceStrCharAtIAndCountEqualsSz"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1603
      expression: "isEmpty(str)"
      range: "(1603,13)-(1603,24)"
      evaluatedAs: false
    - lineNumber: 1609
      expression: "i < sz"
      range: "(1609,25)-(1609,30)"
      evaluatedAs: true
    - lineNumber: 1610
      expression: "!Character.isWhitespace(str.charAt(i))"
      range: "(1610,17)-(1610,54)"
      evaluatedAs: true
    - lineNumber: 1614
      expression: "count == sz"
      range: "(1614,13)-(1614,23)"
      evaluatedAs: true
  - testPathName: "deleteWhitespaceWhenCountNotEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1603
      expression: "isEmpty(str)"
      range: "(1603,13)-(1603,24)"
      evaluatedAs: false
    - lineNumber: 1609
      expression: "i < sz"
      range: "(1609,25)-(1609,30)"
      evaluatedAs: true
    - lineNumber: 1610
      expression: "!Character.isWhitespace(str.charAt(i))"
      range: "(1610,17)-(1610,54)"
      evaluatedAs: true
    - lineNumber: 1614
      expression: "count == sz"
      range: "(1614,13)-(1614,23)"
      evaluatedAs: false
    - lineNumber: 1617
      expression: "count == 0"
      range: "(1617,13)-(1617,22)"
      evaluatedAs: false
  - testPathName: "deleteWhitespaceWhenCountEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1603
      expression: "isEmpty(str)"
      range: "(1603,13)-(1603,24)"
      evaluatedAs: false
    - lineNumber: 1609
      expression: "i < sz"
      range: "(1609,25)-(1609,30)"
      evaluatedAs: true
    - lineNumber: 1610
      expression: "!Character.isWhitespace(str.charAt(i))"
      range: "(1610,17)-(1610,54)"
      evaluatedAs: false
    - lineNumber: 1614
      expression: "count == sz"
      range: "(1614,13)-(1614,23)"
      evaluatedAs: false
    - lineNumber: 1617
      expression: "count == 0"
      range: "(1617,13)-(1617,22)"
      evaluatedAs: true
- method:
    name: "difference"
    sourceCodeSignature: "String difference(final String str1, final String str2)"
    returnType: "java.lang.String"
    parameters:
    - name: "str1"
      type: "java.lang.String"
    - name: "str2"
      type: "java.lang.String"
    instructionFingerprint: "6E259ACA24982954A1420B2D6F6004F4"
  paths:
  - testPathName: "differenceWhenStr1IsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str2"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    branches:
    - lineNumber: 1652
      expression: "str1 == null"
      range: "(1652,13)-(1652,24)"
      evaluatedAs: true
  - testPathName: "differenceWhenStr2IsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str2"
    branches:
    - lineNumber: 1652
      expression: "str1 == null"
      range: "(1652,13)-(1652,24)"
      evaluatedAs: false
    - lineNumber: 1655
      expression: "str2 == null"
      range: "(1655,13)-(1655,24)"
      evaluatedAs: true
  - testPathName: "differenceWhenAtEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfDifference(str1,str2):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str2"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1652
      expression: "str1 == null"
      range: "(1652,13)-(1652,24)"
      evaluatedAs: false
    - lineNumber: 1655
      expression: "str2 == null"
      range: "(1655,13)-(1655,24)"
      evaluatedAs: false
    - lineNumber: 1659
      expression: "at == INDEX_NOT_FOUND"
      range: "(1659,13)-(1659,33)"
      evaluatedAs: true
  - testPathName: "differenceWhenAtNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str1"
      valueUuid: "str1"
    - type: "INPUT"
      name: "str2"
      valueUuid: "str2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfDifference(str1,str2):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str2"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1652
      expression: "str1 == null"
      range: "(1652,13)-(1652,24)"
      evaluatedAs: false
    - lineNumber: 1655
      expression: "str2 == null"
      range: "(1655,13)-(1655,24)"
      evaluatedAs: false
    - lineNumber: 1659
      expression: "at == INDEX_NOT_FOUND"
      range: "(1659,13)-(1659,33)"
      evaluatedAs: false
- method:
    name: "endsWith"
    sourceCodeSignature: "boolean endsWith(final CharSequence str, final CharSequence\
      \ suffix)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "suffix"
      type: "java.lang.CharSequence"
    instructionFingerprint: "268F20D322896D07784C1F3EA8317989"
  paths:
  - testPathName: "endsWithWhenSuffixIsNullAndStrEqualsSuffix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithWhenSuffixIsNullAndStrNotEqualsSuffix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithWhenSuffixLengthGreaterThanStrLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithWhenCharSequenceUtilsRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithWhenCharSequenceUtilsNotRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "endsWithAny"
    sourceCodeSignature: "boolean endsWithAny(final CharSequence sequence, final CharSequence...\
      \ searchStrings)"
    returnType: "boolean"
    parameters:
    - name: "sequence"
      type: "java.lang.CharSequence"
    - name: "searchStrings"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "FE06424FA6F90E2B87BE49AFBB2187F4"
  paths:
  - testPathName: "endsWithAnyWhenArrayUtilsIsEmptySearchStrings"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sequence"
      valueUuid: "sequence"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sequence):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "sequence1"
      valueType: "java.lang.String"
      uuid: "sequence"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1737
      expression: "isEmpty(sequence)"
      range: "(1737,13)-(1737,29)"
      evaluatedAs: false
    - lineNumber: 1737
      expression: "ArrayUtils.isEmpty(searchStrings)"
      range: "(1737,34)-(1737,66)"
      evaluatedAs: true
  - testPathName: "endsWithAnyWhenEndsWithSequenceSearchString"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sequence"
      valueUuid: "sequence"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sequence):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWith(sequence,charSequence):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "sequence1"
      valueType: "java.lang.String"
      uuid: "sequence"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1737
      expression: "isEmpty(sequence)"
      range: "(1737,13)-(1737,29)"
      evaluatedAs: false
    - lineNumber: 1737
      expression: "ArrayUtils.isEmpty(searchStrings)"
      range: "(1737,34)-(1737,66)"
      evaluatedAs: false
    - lineNumber: 1740
      expression: "for-each(searchStrings)"
      range: "(1740,48)-(1740,60)"
      evaluatedAs: true
    - lineNumber: 1741
      expression: "endsWith(sequence, searchString)"
      range: "(1741,17)-(1741,48)"
      evaluatedAs: true
  - testPathName: "endsWithAnyWhenEndsWithNotSequenceSearchString"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sequence"
      valueUuid: "sequence"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sequence):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWith(sequence,charSequence):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "sequence1"
      valueType: "java.lang.String"
      uuid: "sequence"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1737
      expression: "isEmpty(sequence)"
      range: "(1737,13)-(1737,29)"
      evaluatedAs: false
    - lineNumber: 1737
      expression: "ArrayUtils.isEmpty(searchStrings)"
      range: "(1737,34)-(1737,66)"
      evaluatedAs: false
    - lineNumber: 1740
      expression: "for-each(searchStrings)"
      range: "(1740,48)-(1740,60)"
      evaluatedAs: true
    - lineNumber: 1741
      expression: "endsWith(sequence, searchString)"
      range: "(1741,17)-(1741,48)"
      evaluatedAs: false
- method:
    name: "endsWithIgnoreCase"
    sourceCodeSignature: "boolean endsWithIgnoreCase(final CharSequence str, final\
      \ CharSequence suffix)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "suffix"
      type: "java.lang.CharSequence"
    instructionFingerprint: "BE41ED3F18CF47C73EE36EBFA18B671B"
  paths:
  - testPathName: "endsWithIgnoreCaseWhenSuffixIsNullAndStrEqualsSuffix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "suffix"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithIgnoreCaseWhenSuffixIsNullAndStrNotEqualsSuffix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    - lineNumber: 1706
      expression: "str == suffix"
      range: "(1706,20)-(1706,32)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithIgnoreCaseWhenSuffixLengthGreaterThanStrLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithIgnoreCaseWhenCharSequenceUtilsRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: true
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "endsWithIgnoreCaseWhenCharSequenceUtilsNotRegionMatchesStrIgnoreCaseStrOffsetSuffix0SuffixLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "suffix"
      valueUuid: "suffix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "suffix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1705
      expression: "str == null"
      range: "(1705,13)-(1705,23)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1705
      expression: "suffix == null"
      range: "(1705,28)-(1705,41)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1708
      expression: "suffix.length() > str.length()"
      range: "(1708,13)-(1708,42)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    - lineNumber: 1712
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix,\
        \ 0, suffix.length())"
      range: "(1712,16)-(1712,102)"
      evaluatedAs: false
      internalMethodName: "endsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "equals"
    sourceCodeSignature: "boolean equals(final CharSequence cs1, final CharSequence\
      \ cs2)"
    returnType: "boolean"
    parameters:
    - name: "cs1"
      type: "java.lang.CharSequence"
    - name: "cs2"
      type: "java.lang.CharSequence"
    instructionFingerprint: "0E0EF8C7D6B8A4CC52518892C232F88F"
  paths:
  - testPathName: "equalsWhenCs1EqualsCs2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1798
      expression: "cs1 == cs2"
      range: "(1798,13)-(1798,22)"
      evaluatedAs: true
  - testPathName: "equalsWhenCs2IsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1798
      expression: "cs1 == cs2"
      range: "(1798,13)-(1798,22)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs1 == null"
      range: "(1801,13)-(1801,23)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs2 == null"
      range: "(1801,28)-(1801,38)"
      evaluatedAs: true
  - testPathName: "equalsWhenCs1LengthNotEqualsCs2Length"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1798
      expression: "cs1 == cs2"
      range: "(1798,13)-(1798,22)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs1 == null"
      range: "(1801,13)-(1801,23)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs2 == null"
      range: "(1801,28)-(1801,38)"
      evaluatedAs: false
    - lineNumber: 1804
      expression: "cs1.length() != cs2.length()"
      range: "(1804,13)-(1804,40)"
      evaluatedAs: true
  - testPathName: "equalsWhenCs2InstanceOfStringAndCs1EqualsCs2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    branches:
    - lineNumber: 1798
      expression: "cs1 == cs2"
      range: "(1798,13)-(1798,22)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs1 == null"
      range: "(1801,13)-(1801,23)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs2 == null"
      range: "(1801,28)-(1801,38)"
      evaluatedAs: false
    - lineNumber: 1804
      expression: "cs1.length() != cs2.length()"
      range: "(1804,13)-(1804,40)"
      evaluatedAs: false
    - lineNumber: 1807
      expression: "cs1 instanceof String"
      range: "(1807,13)-(1807,33)"
      evaluatedAs: true
    - lineNumber: 1807
      expression: "cs2 instanceof String"
      range: "(1807,38)-(1807,58)"
      evaluatedAs: true
    - lineNumber: 1808
      expression: "cs1.equals(cs2)"
      range: "(1808,20)-(1808,34)"
      evaluatedAs: true
  - testPathName: "equalsWhenCs1NotEqualsCs2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean3"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    branches:
    - lineNumber: 1798
      expression: "cs1 == cs2"
      range: "(1798,13)-(1798,22)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs1 == null"
      range: "(1801,13)-(1801,23)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs2 == null"
      range: "(1801,28)-(1801,38)"
      evaluatedAs: false
    - lineNumber: 1804
      expression: "cs1.length() != cs2.length()"
      range: "(1804,13)-(1804,40)"
      evaluatedAs: false
    - lineNumber: 1807
      expression: "cs1 instanceof String"
      range: "(1807,13)-(1807,33)"
      evaluatedAs: true
    - lineNumber: 1807
      expression: "cs2 instanceof String"
      range: "(1807,38)-(1807,58)"
      evaluatedAs: true
    - lineNumber: 1808
      expression: "cs1.equals(cs2)"
      range: "(1808,20)-(1808,34)"
      evaluatedAs: false
  - testPathName: "equalsWhenCs1CharAtINotEqualsCs2CharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1798
      expression: "cs1 == cs2"
      range: "(1798,13)-(1798,22)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs1 == null"
      range: "(1801,13)-(1801,23)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs2 == null"
      range: "(1801,28)-(1801,38)"
      evaluatedAs: false
    - lineNumber: 1804
      expression: "cs1.length() != cs2.length()"
      range: "(1804,13)-(1804,40)"
      evaluatedAs: false
    - lineNumber: 1807
      expression: "cs1 instanceof String"
      range: "(1807,13)-(1807,33)"
      evaluatedAs: true
    - lineNumber: 1807
      expression: "cs2 instanceof String"
      range: "(1807,38)-(1807,58)"
      evaluatedAs: false
    - lineNumber: 1812
      expression: "i < length"
      range: "(1812,25)-(1812,34)"
      evaluatedAs: true
    - lineNumber: 1813
      expression: "cs1.charAt(i) != cs2.charAt(i)"
      range: "(1813,17)-(1813,46)"
      evaluatedAs: true
  - testPathName: "equalsWhenILessThanLengthAndCs1CharAtIEqualsCs2CharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1798
      expression: "cs1 == cs2"
      range: "(1798,13)-(1798,22)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs1 == null"
      range: "(1801,13)-(1801,23)"
      evaluatedAs: false
    - lineNumber: 1801
      expression: "cs2 == null"
      range: "(1801,28)-(1801,38)"
      evaluatedAs: false
    - lineNumber: 1804
      expression: "cs1.length() != cs2.length()"
      range: "(1804,13)-(1804,40)"
      evaluatedAs: false
    - lineNumber: 1807
      expression: "cs1 instanceof String"
      range: "(1807,13)-(1807,33)"
      evaluatedAs: true
    - lineNumber: 1807
      expression: "cs2 instanceof String"
      range: "(1807,38)-(1807,58)"
      evaluatedAs: false
    - lineNumber: 1812
      expression: "i < length"
      range: "(1812,25)-(1812,34)"
      evaluatedAs: true
    - lineNumber: 1813
      expression: "cs1.charAt(i) != cs2.charAt(i)"
      range: "(1813,17)-(1813,46)"
      evaluatedAs: false
- method:
    name: "equalsAny"
    sourceCodeSignature: "boolean equalsAny(final CharSequence string, final CharSequence...\
      \ searchStrings)"
    returnType: "boolean"
    parameters:
    - name: "string"
      type: "java.lang.CharSequence"
    - name: "searchStrings"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "5C3A5015F05B1CF5D6C945444CE52D1C"
  paths:
  - testPathName: "equalsAnyWhenEqualsStringNext"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "equals(string,charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1840
      expression: "ArrayUtils.isNotEmpty(searchStrings)"
      range: "(1840,13)-(1840,48)"
      evaluatedAs: true
    - lineNumber: 1841
      expression: "for-each(searchStrings)"
      range: "(1841,44)-(1841,56)"
      evaluatedAs: true
    - lineNumber: 1842
      expression: "equals(string, next)"
      range: "(1842,21)-(1842,40)"
      evaluatedAs: true
  - testPathName: "equalsAnyWhenEqualsNotStringNext"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "equals(string,charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1840
      expression: "ArrayUtils.isNotEmpty(searchStrings)"
      range: "(1840,13)-(1840,48)"
      evaluatedAs: true
    - lineNumber: 1841
      expression: "for-each(searchStrings)"
      range: "(1841,44)-(1841,56)"
      evaluatedAs: true
    - lineNumber: 1842
      expression: "equals(string, next)"
      range: "(1842,21)-(1842,40)"
      evaluatedAs: false
- method:
    name: "equalsAnyIgnoreCase"
    sourceCodeSignature: "boolean equalsAnyIgnoreCase(final CharSequence string, final\
      \ CharSequence... searchStrings)"
    returnType: "boolean"
    parameters:
    - name: "string"
      type: "java.lang.CharSequence"
    - name: "searchStrings"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "555003D044D09AFFD0E36EA94625E569"
  paths:
  - testPathName: "equalsAnyIgnoreCaseWhenEqualsIgnoreCaseStringNext"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "equalsIgnoreCase(string,charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1870
      expression: "ArrayUtils.isNotEmpty(searchStrings)"
      range: "(1870,13)-(1870,48)"
      evaluatedAs: true
    - lineNumber: 1871
      expression: "for-each(searchStrings)"
      range: "(1871,44)-(1871,56)"
      evaluatedAs: true
    - lineNumber: 1872
      expression: "equalsIgnoreCase(string, next)"
      range: "(1872,21)-(1872,50)"
      evaluatedAs: true
  - testPathName: "equalsAnyIgnoreCaseWhenEqualsIgnoreCaseNotStringNext"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "equalsIgnoreCase(string,charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1870
      expression: "ArrayUtils.isNotEmpty(searchStrings)"
      range: "(1870,13)-(1870,48)"
      evaluatedAs: true
    - lineNumber: 1871
      expression: "for-each(searchStrings)"
      range: "(1871,44)-(1871,56)"
      evaluatedAs: true
    - lineNumber: 1872
      expression: "equalsIgnoreCase(string, next)"
      range: "(1872,21)-(1872,50)"
      evaluatedAs: false
- method:
    name: "equalsIgnoreCase"
    sourceCodeSignature: "boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence\
      \ cs2)"
    returnType: "boolean"
    parameters:
    - name: "cs1"
      type: "java.lang.CharSequence"
    - name: "cs2"
      type: "java.lang.CharSequence"
    instructionFingerprint: "332CAC72DB48E9B54FBCE8020F916A3D"
  paths:
  - testPathName: "equalsIgnoreCaseWhenCs1EqualsCs2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1902
      expression: "cs1 == cs2"
      range: "(1902,13)-(1902,22)"
      evaluatedAs: true
  - testPathName: "equalsIgnoreCaseWhenCs2IsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1902
      expression: "cs1 == cs2"
      range: "(1902,13)-(1902,22)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs1 == null"
      range: "(1905,13)-(1905,23)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs2 == null"
      range: "(1905,28)-(1905,38)"
      evaluatedAs: true
  - testPathName: "equalsIgnoreCaseWhenCs1LengthNotEqualsCs2Length"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1902
      expression: "cs1 == cs2"
      range: "(1902,13)-(1902,22)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs1 == null"
      range: "(1905,13)-(1905,23)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs2 == null"
      range: "(1905,28)-(1905,38)"
      evaluatedAs: false
    - lineNumber: 1908
      expression: "cs1.length() != cs2.length()"
      range: "(1908,13)-(1908,40)"
      evaluatedAs: true
  - testPathName: "equalsIgnoreCaseWhenCharSequenceUtilsRegionMatchesCs1True0Cs20Cs1Length"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1902
      expression: "cs1 == cs2"
      range: "(1902,13)-(1902,22)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs1 == null"
      range: "(1905,13)-(1905,23)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs2 == null"
      range: "(1905,28)-(1905,38)"
      evaluatedAs: false
    - lineNumber: 1908
      expression: "cs1.length() != cs2.length()"
      range: "(1908,13)-(1908,40)"
      evaluatedAs: false
    - lineNumber: 1911
      expression: "CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, cs1.length())"
      range: "(1911,16)-(1911,82)"
      evaluatedAs: true
  - testPathName: "equalsIgnoreCaseWhenCharSequenceUtilsNotRegionMatchesCs1True0Cs20Cs1Length"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 1902
      expression: "cs1 == cs2"
      range: "(1902,13)-(1902,22)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs1 == null"
      range: "(1905,13)-(1905,23)"
      evaluatedAs: false
    - lineNumber: 1905
      expression: "cs2 == null"
      range: "(1905,28)-(1905,38)"
      evaluatedAs: false
    - lineNumber: 1908
      expression: "cs1.length() != cs2.length()"
      range: "(1908,13)-(1908,40)"
      evaluatedAs: false
    - lineNumber: 1911
      expression: "CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, cs1.length())"
      range: "(1911,16)-(1911,82)"
      evaluatedAs: false
- method:
    name: "firstNonBlank"
    sourceCodeSignature: "<T extends CharSequence> T firstNonBlank(final T... values)"
    returnType: "java.lang.CharSequence"
    parameters:
    - name: "values"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "B5A631846F316B6AA3D52310310A758E"
  paths:
  - testPathName: "firstNonBlankWhenIsNotBlankVal"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "values"
      valueUuid: "values"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotBlank(charSequence):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    branches:
    - lineNumber: 1941
      expression: "values != null"
      range: "(1941,13)-(1941,26)"
      evaluatedAs: true
    - lineNumber: 1942
      expression: "for-each(values)"
      range: "(1942,32)-(1942,37)"
      evaluatedAs: true
    - lineNumber: 1943
      expression: "isNotBlank(val)"
      range: "(1943,21)-(1943,35)"
      evaluatedAs: true
  - testPathName: "firstNonBlankWhenIsNotBlankNotVal"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "values"
      valueUuid: "values"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotBlank(charSequence):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence3"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "charSequence3"
    branches:
    - lineNumber: 1941
      expression: "values != null"
      range: "(1941,13)-(1941,26)"
      evaluatedAs: true
    - lineNumber: 1942
      expression: "for-each(values)"
      range: "(1942,32)-(1942,37)"
      evaluatedAs: true
    - lineNumber: 1943
      expression: "isNotBlank(val)"
      range: "(1943,21)-(1943,35)"
      evaluatedAs: false
- method:
    name: "firstNonEmpty"
    sourceCodeSignature: "<T extends CharSequence> T firstNonEmpty(final T... values)"
    returnType: "java.lang.CharSequence"
    parameters:
    - name: "values"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "44B1B346A83ED08ADE4F0444C7E11459"
  paths:
  - testPathName: "firstNonEmptyWhenIsNotEmptyVal"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "values"
      valueUuid: "values"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(charSequence):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    branches:
    - lineNumber: 1976
      expression: "values != null"
      range: "(1976,13)-(1976,26)"
      evaluatedAs: true
    - lineNumber: 1977
      expression: "for-each(values)"
      range: "(1977,32)-(1977,37)"
      evaluatedAs: true
    - lineNumber: 1978
      expression: "isNotEmpty(val)"
      range: "(1978,21)-(1978,35)"
      evaluatedAs: true
  - testPathName: "firstNonEmptyWhenIsNotEmptyNotVal"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "values"
      valueUuid: "values"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(charSequence):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence3"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "charSequence3"
    branches:
    - lineNumber: 1976
      expression: "values != null"
      range: "(1976,13)-(1976,26)"
      evaluatedAs: true
    - lineNumber: 1977
      expression: "for-each(values)"
      range: "(1977,32)-(1977,37)"
      evaluatedAs: true
    - lineNumber: 1978
      expression: "isNotEmpty(val)"
      range: "(1978,21)-(1978,35)"
      evaluatedAs: false
- method:
    name: "getBytes"
    sourceCodeSignature: "byte[] getBytes(final String string, final Charset charset)"
    returnType: "byte[]"
    parameters:
    - name: "string"
      type: "java.lang.String"
    - name: "charset"
      type: "java.nio.charset.Charset"
    instructionFingerprint: "98BF670D81426955FB56190B6B98338C"
  paths:
  - testPathName: "getBytesWhenStringIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "charset"
      valueUuid: "charset"
    - type: "RESULT"
      name: "result"
      valueUuid: "byteArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "charset"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray"
    branches:
    - lineNumber: 1996
      expression: "string == null"
      range: "(1996,16)-(1996,29)"
      evaluatedAs: true
  - testPathName: "getBytesWhenStringIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "charset"
      valueUuid: "charset"
    - type: "RESULT"
      name: "result"
      valueUuid: "byteArray"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.Charsets.toCharset(java.nio.charset.Charset)\
        \ : java.nio.charset.Charset"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "charset"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray"
    branches:
    - lineNumber: 1996
      expression: "string == null"
      range: "(1996,16)-(1996,29)"
      evaluatedAs: false
- method:
    name: "getBytes"
    sourceCodeSignature: "byte[] getBytes(final String string, final String charset)"
    returnType: "byte[]"
    throwsExceptions:
    - "java.io.UnsupportedEncodingException"
    parameters:
    - name: "string"
      type: "java.lang.String"
    - name: "charset"
      type: "java.lang.String"
    instructionFingerprint: "34CB1CB31D4922F58E87B7340ACBD52D"
  paths:
  - testPathName: "getBytes1WhenStringIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "charset"
      valueUuid: "charset"
    - type: "RESULT"
      name: "result"
      valueUuid: "byteArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charset1"
      valueType: "java.lang.String"
      uuid: "charset"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray"
    branches:
    - lineNumber: 2010
      expression: "string == null"
      range: "(2010,16)-(2010,29)"
      evaluatedAs: true
  - testPathName: "getBytes1WhenStringIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "string"
      valueUuid: "string"
    - type: "INPUT"
      name: "charset"
      valueUuid: "charset"
    - type: "RESULT"
      name: "result"
      valueUuid: "byteArray"
    disabled: true
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "charset"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray"
    branches:
    - lineNumber: 2010
      expression: "string == null"
      range: "(2010,16)-(2010,29)"
      evaluatedAs: false
- method:
    name: "getCommonPrefix"
    sourceCodeSignature: "String getCommonPrefix(final String... strs)"
    returnType: "java.lang.String"
    parameters:
    - name: "strs"
      type: "java.lang.String[]"
    instructionFingerprint: "ADC8A6F520331E08B6FD36E8CCF8388B"
  paths:
  - testPathName: "getCommonPrefixWhenArrayUtilsIsEmptyStrs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2047
      expression: "ArrayUtils.isEmpty(strs)"
      range: "(2047,13)-(2047,36)"
      evaluatedAs: true
  - testPathName: "getCommonPrefixWhen0IndexOfStrsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfDifference(strs):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2047
      expression: "ArrayUtils.isEmpty(strs)"
      range: "(2047,13)-(2047,36)"
      evaluatedAs: false
    - lineNumber: 2051
      expression: "smallestIndexOfDiff == INDEX_NOT_FOUND"
      range: "(2051,13)-(2051,50)"
      evaluatedAs: true
    - lineNumber: 2053
      expression: "strs[0] == null"
      range: "(2053,17)-(2053,31)"
      evaluatedAs: true
  - testPathName: "getCommonPrefixWhen0IndexOfStrsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfDifference(strs):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "strsItem1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "strsItem1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 2047
      expression: "ArrayUtils.isEmpty(strs)"
      range: "(2047,13)-(2047,36)"
      evaluatedAs: false
    - lineNumber: 2051
      expression: "smallestIndexOfDiff == INDEX_NOT_FOUND"
      range: "(2051,13)-(2051,50)"
      evaluatedAs: true
    - lineNumber: 2053
      expression: "strs[0] == null"
      range: "(2053,17)-(2053,31)"
      evaluatedAs: false
  - testPathName: "getCommonPrefixWhenSmallestIndexOfDiffEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfDifference(strs):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2047
      expression: "ArrayUtils.isEmpty(strs)"
      range: "(2047,13)-(2047,36)"
      evaluatedAs: false
    - lineNumber: 2051
      expression: "smallestIndexOfDiff == INDEX_NOT_FOUND"
      range: "(2051,13)-(2051,50)"
      evaluatedAs: false
    - lineNumber: 2058
      expression: "smallestIndexOfDiff == 0"
      range: "(2058,13)-(2058,36)"
      evaluatedAs: true
  - testPathName: "getCommonPrefixWhenSmallestIndexOfDiffNotEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfDifference(strs):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 2047
      expression: "ArrayUtils.isEmpty(strs)"
      range: "(2047,13)-(2047,36)"
      evaluatedAs: false
    - lineNumber: 2051
      expression: "smallestIndexOfDiff == INDEX_NOT_FOUND"
      range: "(2051,13)-(2051,50)"
      evaluatedAs: false
    - lineNumber: 2058
      expression: "smallestIndexOfDiff == 0"
      range: "(2058,13)-(2058,36)"
      evaluatedAs: false
- method:
    name: "getDigits"
    sourceCodeSignature: "String getDigits(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "FBF5CACDBAA3553F7DADC58AF39D70D0"
  paths:
  - testPathName: "getDigitsWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 2089
      expression: "isEmpty(str)"
      range: "(2089,13)-(2089,24)"
      evaluatedAs: true
  - testPathName: "getDigitsWhenCharacterIsDigitTempChar"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 2089
      expression: "isEmpty(str)"
      range: "(2089,13)-(2089,24)"
      evaluatedAs: false
    - lineNumber: 2094
      expression: "i < sz"
      range: "(2094,25)-(2094,30)"
      evaluatedAs: true
    - lineNumber: 2096
      expression: "Character.isDigit(tempChar)"
      range: "(2096,17)-(2096,43)"
      evaluatedAs: true
- method:
    name: "getFuzzyDistance"
    sourceCodeSignature: "int getFuzzyDistance(final CharSequence term, final CharSequence\
      \ query, final Locale locale)"
    returnType: "int"
    parameters:
    - name: "term"
      type: "java.lang.CharSequence"
    - name: "query"
      type: "java.lang.CharSequence"
    - name: "locale"
      type: "java.util.Locale"
    instructionFingerprint: "786C8EA7B7AC60CBBA47AC5D8748EBF2"
  paths:
  - testPathName: "getFuzzyDistanceWhenQueryIsNullThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "term"
      valueUuid: "term"
    - type: "INPUT"
      name: "query"
      valueUuid: "query"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "term1"
      valueType: "java.lang.String"
      uuid: "term"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "query"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Strings must not be null"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 2134
      expression: "term == null"
      range: "(2134,13)-(2134,24)"
      evaluatedAs: false
    - lineNumber: 2134
      expression: "query == null"
      range: "(2134,29)-(2134,41)"
      evaluatedAs: true
  - testPathName: "getFuzzyDistanceWhenLocaleIsNullThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "term"
      valueUuid: "term"
    - type: "INPUT"
      name: "query"
      valueUuid: "query"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "term1"
      valueType: "java.lang.String"
      uuid: "term"
    - sapientType: "BASIC"
      content: !<regular>
        value: "query1"
      valueType: "java.lang.String"
      uuid: "query"
    - sapientType: "NULL"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Locale must not be null"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 2134
      expression: "term == null"
      range: "(2134,13)-(2134,24)"
      evaluatedAs: false
    - lineNumber: 2134
      expression: "query == null"
      range: "(2134,29)-(2134,41)"
      evaluatedAs: false
    - lineNumber: 2137
      expression: "locale == null"
      range: "(2137,13)-(2137,26)"
      evaluatedAs: true
  - testPathName: "getFuzzyDistanceWhenPreviousMatchingCharacterIndexPlus1NotEqualsTermIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "term"
      valueUuid: "term"
    - type: "INPUT"
      name: "query"
      valueUuid: "query"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "RESULT"
      name: "result"
      valueUuid: "int19"
    disabled: true
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "term1"
      valueType: "java.lang.String"
      uuid: "term"
      nameForMock: "term"
    - sapientType: "BASIC"
      content: !<regular>
        value: "query1"
      valueType: "java.lang.String"
      uuid: "query"
      nameForMock: "query"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "BASIC"
      content: !<regular>
        value: 4
      valueType: "int"
      uuid: "int19"
    branches:
    - lineNumber: 2134
      expression: "term == null"
      range: "(2134,13)-(2134,24)"
      evaluatedAs: false
    - lineNumber: 2134
      expression: "query == null"
      range: "(2134,29)-(2134,41)"
      evaluatedAs: false
    - lineNumber: 2137
      expression: "locale == null"
      range: "(2137,13)-(2137,26)"
      evaluatedAs: false
    - lineNumber: 2158
      expression: "queryIndex < queryLowerCase.length()"
      range: "(2158,34)-(2158,69)"
      evaluatedAs: true
    - lineNumber: 2162
      expression: "termIndex < termLowerCase.length()"
      range: "(2162,20)-(2162,53)"
      evaluatedAs: true
    - lineNumber: 2162
      expression: "!termCharacterMatchFound"
      range: "(2162,58)-(2162,81)"
      evaluatedAs: true
    - lineNumber: 2165
      expression: "queryChar == termChar"
      range: "(2165,21)-(2165,41)"
      evaluatedAs: true
    - lineNumber: 2171
      expression: "previousMatchingCharacterIndex + 1 == termIndex"
      range: "(2171,25)-(2171,71)"
      evaluatedAs: false
- method:
    name: "getIfBlank"
    sourceCodeSignature: "<T extends CharSequence> T getIfBlank(final T str, final\
      \ Supplier<T> defaultSupplier)"
    returnType: "java.lang.CharSequence"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "defaultSupplier"
      type: "java.util.function.Supplier"
      genericType: "java.lang.CharSequence"
    instructionFingerprint: "BE0FF9BF1DAE696B0AC1D5F5F71AD315"
  paths:
  - testPathName: "getIfBlankWhenIsBlankStr"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultSupplier"
      valueUuid: "defaultSupplier"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.function.Suppliers.get(java.util.function.Supplier<java.lang.CharSequence>)\
        \ : java.lang.CharSequence"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "defaultSupplier"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    branches:
    - lineNumber: 2213
      expression: "isBlank(str)"
      range: "(2213,16)-(2213,27)"
      evaluatedAs: true
  - testPathName: "getIfBlankWhenIsBlankNotStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultSupplier"
      valueUuid: "defaultSupplier"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "defaultSupplier"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 2213
      expression: "isBlank(str)"
      range: "(2213,16)-(2213,27)"
      evaluatedAs: false
- method:
    name: "getIfEmpty"
    sourceCodeSignature: "<T extends CharSequence> T getIfEmpty(final T str, final\
      \ Supplier<T> defaultSupplier)"
    returnType: "java.lang.CharSequence"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "defaultSupplier"
      type: "java.util.function.Supplier"
      genericType: "java.lang.CharSequence"
    instructionFingerprint: "D8872134D714A9119268D75C16D7ECBB"
  paths:
  - testPathName: "getIfEmptyWhenIsEmptyStr"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultSupplier"
      valueUuid: "defaultSupplier"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.function.Suppliers.get(java.util.function.Supplier<java.lang.CharSequence>)\
        \ : java.lang.CharSequence"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "defaultSupplier"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    branches:
    - lineNumber: 2241
      expression: "isEmpty(str)"
      range: "(2241,16)-(2241,27)"
      evaluatedAs: true
  - testPathName: "getIfEmptyWhenIsEmptyNotStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultSupplier"
      valueUuid: "defaultSupplier"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "defaultSupplier"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 2241
      expression: "isEmpty(str)"
      range: "(2241,16)-(2241,27)"
      evaluatedAs: false
- method:
    name: "getJaroWinklerDistance"
    sourceCodeSignature: "double getJaroWinklerDistance(final CharSequence first,\
      \ final CharSequence second)"
    returnType: "double"
    parameters:
    - name: "first"
      type: "java.lang.CharSequence"
    - name: "second"
      type: "java.lang.CharSequence"
    instructionFingerprint: "D200C9E1076106855C7408C58B303F83"
  paths:
  - testPathName: "getJaroWinklerDistanceWhenSecondIsNullThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "first"
      valueUuid: "first"
    - type: "INPUT"
      name: "second"
      valueUuid: "second"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "first1"
      valueType: "java.lang.String"
      uuid: "first"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "second"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Strings must not be null"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 2283
      expression: "first == null"
      range: "(2283,13)-(2283,25)"
      evaluatedAs: false
    - lineNumber: 2283
      expression: "second == null"
      range: "(2283,30)-(2283,43)"
      evaluatedAs: true
  - testPathName: "getJaroWinklerDistanceWhenMiLessThanMinLengthAndFirstCharAtMiNotEqualsSecondCharAtMiAndMEquals02"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "first"
      valueUuid: "first"
    - type: "INPUT"
      name: "second"
      valueUuid: "second"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "first1"
      valueType: "java.lang.String"
      uuid: "first"
    - sapientType: "BASIC"
      content: !<regular>
        value: "second1"
      valueType: "java.lang.String"
      uuid: "second"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2283
      expression: "first == null"
      range: "(2283,13)-(2283,25)"
      evaluatedAs: false
    - lineNumber: 2283
      expression: "second == null"
      range: "(2283,30)-(2283,43)"
      evaluatedAs: false
    - lineNumber: 5345
      expression: "first.length() > second.length()"
      range: "(5345,13)-(5345,44)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5357
      expression: "mi < min.length()"
      range: "(5357,26)-(5357,42)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5359
      expression: "xi < xn"
      range: "(5359,97)-(5359,103)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5360
      expression: "!matchFlags[xi]"
      range: "(5360,21)-(5360,35)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5360
      expression: "c1 == max.charAt(xi)"
      range: "(5360,40)-(5360,59)"
      evaluatedAs: false
      internalMethodName: "matches"
    - lineNumber: 5370
      expression: "i < min.length()"
      range: "(5370,33)-(5370,48)"
      evaluatedAs: false
      internalMethodName: "matches"
    - lineNumber: 5376
      expression: "i < max.length()"
      range: "(5376,33)-(5376,48)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5377
      expression: "matchFlags[i]"
      range: "(5377,17)-(5377,29)"
      evaluatedAs: false
      internalMethodName: "matches"
    - lineNumber: 5383
      expression: "mi < ms1.length"
      range: "(5383,26)-(5383,40)"
      evaluatedAs: false
      internalMethodName: "matches"
    - lineNumber: 5389
      expression: "mi < min.length()"
      range: "(5389,26)-(5389,42)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5390
      expression: "first.charAt(mi) != second.charAt(mi)"
      range: "(5390,17)-(5390,53)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 2289
      expression: "m == 0"
      range: "(2289,13)-(2289,18)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "getJaroWinklerDistanceWhenJLessThan0_7D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "first"
      valueUuid: "first"
    - type: "INPUT"
      name: "second"
      valueUuid: "second"
    - type: "RESULT"
      name: "result"
      valueUuid: "double16"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "first1"
      valueType: "java.lang.String"
      uuid: "first"
    - sapientType: "BASIC"
      content: !<regular>
        value: "second1"
      valueType: "java.lang.String"
      uuid: "second"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "double16"
    branches:
    - lineNumber: 2283
      expression: "first == null"
      range: "(2283,13)-(2283,25)"
      evaluatedAs: false
    - lineNumber: 2283
      expression: "second == null"
      range: "(2283,30)-(2283,43)"
      evaluatedAs: false
    - lineNumber: 5345
      expression: "first.length() > second.length()"
      range: "(5345,13)-(5345,44)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5357
      expression: "mi < min.length()"
      range: "(5357,26)-(5357,42)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5359
      expression: "xi < xn"
      range: "(5359,97)-(5359,103)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5360
      expression: "!matchFlags[xi]"
      range: "(5360,21)-(5360,35)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5360
      expression: "c1 == max.charAt(xi)"
      range: "(5360,40)-(5360,59)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5370
      expression: "i < min.length()"
      range: "(5370,33)-(5370,48)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5371
      expression: "matchIndexes[i] != -1"
      range: "(5371,17)-(5371,37)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5376
      expression: "i < max.length()"
      range: "(5376,33)-(5376,48)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5377
      expression: "matchFlags[i]"
      range: "(5377,17)-(5377,29)"
      evaluatedAs: false
      internalMethodName: "matches"
    - lineNumber: 5383
      expression: "mi < ms1.length"
      range: "(5383,26)-(5383,40)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5384
      expression: "ms1[mi] != ms2[mi]"
      range: "(5384,17)-(5384,34)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5389
      expression: "mi < min.length()"
      range: "(5389,26)-(5389,42)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5390
      expression: "first.charAt(mi) != second.charAt(mi)"
      range: "(5390,17)-(5390,53)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 2289
      expression: "m == 0"
      range: "(2289,13)-(2289,18)"
      evaluatedAs: false
    - lineNumber: 2293
      expression: "j < 0.7D"
      range: "(2293,27)-(2293,34)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "getJaroWinklerDistanceWhenMiIndexOfMs1NotEqualsMiIndexOfMs2AndMiLessThanMinLengthAndFirstCharAtMiEqualsSecondCharAtMiAn"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "first"
      valueUuid: "first"
    - type: "INPUT"
      name: "second"
      valueUuid: "second"
    - type: "RESULT"
      name: "result"
      valueUuid: "double24"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "first1"
      valueType: "java.lang.String"
      uuid: "first"
    - sapientType: "BASIC"
      content: !<regular>
        value: "second1"
      valueType: "java.lang.String"
      uuid: "second"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "double"
      uuid: "double24"
    branches:
    - lineNumber: 2283
      expression: "first == null"
      range: "(2283,13)-(2283,25)"
      evaluatedAs: false
    - lineNumber: 2283
      expression: "second == null"
      range: "(2283,30)-(2283,43)"
      evaluatedAs: false
    - lineNumber: 5345
      expression: "first.length() > second.length()"
      range: "(5345,13)-(5345,44)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5357
      expression: "mi < min.length()"
      range: "(5357,26)-(5357,42)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5359
      expression: "xi < xn"
      range: "(5359,97)-(5359,103)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5360
      expression: "!matchFlags[xi]"
      range: "(5360,21)-(5360,35)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5360
      expression: "c1 == max.charAt(xi)"
      range: "(5360,40)-(5360,59)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5370
      expression: "i < min.length()"
      range: "(5370,33)-(5370,48)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5371
      expression: "matchIndexes[i] != -1"
      range: "(5371,17)-(5371,37)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5376
      expression: "i < max.length()"
      range: "(5376,33)-(5376,48)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5377
      expression: "matchFlags[i]"
      range: "(5377,17)-(5377,29)"
      evaluatedAs: false
      internalMethodName: "matches"
    - lineNumber: 5383
      expression: "mi < ms1.length"
      range: "(5383,26)-(5383,40)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5384
      expression: "ms1[mi] != ms2[mi]"
      range: "(5384,17)-(5384,34)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5389
      expression: "mi < min.length()"
      range: "(5389,26)-(5389,42)"
      evaluatedAs: true
      internalMethodName: "matches"
    - lineNumber: 5390
      expression: "first.charAt(mi) != second.charAt(mi)"
      range: "(5390,17)-(5390,53)"
      evaluatedAs: false
      internalMethodName: "matches"
    - lineNumber: 2289
      expression: "m == 0"
      range: "(2289,13)-(2289,18)"
      evaluatedAs: false
    - lineNumber: 2293
      expression: "j < 0.7D"
      range: "(2293,27)-(2293,34)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "getLevenshteinDistance"
    sourceCodeSignature: "int getLevenshteinDistance(CharSequence s, CharSequence\
      \ t)"
    returnType: "int"
    parameters:
    - name: "s"
      type: "java.lang.CharSequence"
    - name: "t"
      type: "java.lang.CharSequence"
    instructionFingerprint: "DA1B502D5DC407A4B0A74525614A644E"
  paths:
  - testPathName: "getLevenshteinDistanceWhenTIsNullThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "t"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Strings must not be null"
            valueType: "java.lang.String"
            uuid: "s2"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 2334
      expression: "s == null"
      range: "(2334,13)-(2334,21)"
      evaluatedAs: false
    - lineNumber: 2334
      expression: "t == null"
      range: "(2334,26)-(2334,34)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistanceWhenNEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 2334
      expression: "s == null"
      range: "(2334,13)-(2334,21)"
      evaluatedAs: false
    - lineNumber: 2334
      expression: "t == null"
      range: "(2334,26)-(2334,34)"
      evaluatedAs: false
    - lineNumber: 2341
      expression: "n == 0"
      range: "(2341,13)-(2341,18)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistanceWhenMEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 2334
      expression: "s == null"
      range: "(2334,13)-(2334,21)"
      evaluatedAs: false
    - lineNumber: 2334
      expression: "t == null"
      range: "(2334,26)-(2334,34)"
      evaluatedAs: false
    - lineNumber: 2341
      expression: "n == 0"
      range: "(2341,13)-(2341,18)"
      evaluatedAs: false
    - lineNumber: 2344
      expression: "m == 0"
      range: "(2344,13)-(2344,18)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistanceWhenSCharAtIMinus1EqualsJOfT"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "RESULT"
      name: "result"
      valueUuid: "int24"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int24"
    branches:
    - lineNumber: 2334
      expression: "s == null"
      range: "(2334,13)-(2334,21)"
      evaluatedAs: false
    - lineNumber: 2334
      expression: "t == null"
      range: "(2334,26)-(2334,34)"
      evaluatedAs: false
    - lineNumber: 2341
      expression: "n == 0"
      range: "(2341,13)-(2341,18)"
      evaluatedAs: false
    - lineNumber: 2344
      expression: "m == 0"
      range: "(2344,13)-(2344,18)"
      evaluatedAs: false
    - lineNumber: 2348
      expression: "n > m"
      range: "(2348,13)-(2348,17)"
      evaluatedAs: true
    - lineNumber: 2367
      expression: "i <= n"
      range: "(2367,21)-(2367,26)"
      evaluatedAs: true
    - lineNumber: 2371
      expression: "j <= m"
      range: "(2371,21)-(2371,26)"
      evaluatedAs: true
    - lineNumber: 2376
      expression: "i <= n"
      range: "(2376,25)-(2376,30)"
      evaluatedAs: true
    - lineNumber: 2378
      expression: "s.charAt(i - 1) == jOfT"
      range: "(2378,24)-(2378,46)"
      evaluatedAs: true
- method:
    name: "getLevenshteinDistance"
    sourceCodeSignature: "int getLevenshteinDistance(CharSequence s, CharSequence\
      \ t, final int threshold)"
    returnType: "int"
    parameters:
    - name: "s"
      type: "java.lang.CharSequence"
    - name: "t"
      type: "java.lang.CharSequence"
    - name: "threshold"
      type: "int"
    instructionFingerprint: "99A6FF6902D48C482655AE5844CD1DB1"
  paths:
  - testPathName: "getLevenshteinDistance1WhenTIsNullThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "threshold"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Strings must not be null"
            valueType: "java.lang.String"
            uuid: "s2"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistance1WhenThresholdLessThan0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2147483648
      valueType: "int"
      uuid: "threshold"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Threshold must not be negative"
            valueType: "java.lang.String"
            uuid: "s2"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistance1WhenMLessThanOrEqualsToThreshold"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "threshold"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: false
    - lineNumber: 2480
      expression: "n == 0"
      range: "(2480,13)-(2480,18)"
      evaluatedAs: true
    - lineNumber: 2481
      expression: "m <= threshold"
      range: "(2481,20)-(2481,33)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistance1WhenMGreaterThanThreshold"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "threshold"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: false
    - lineNumber: 2480
      expression: "n == 0"
      range: "(2480,13)-(2480,18)"
      evaluatedAs: true
    - lineNumber: 2481
      expression: "m <= threshold"
      range: "(2481,20)-(2481,33)"
      evaluatedAs: false
  - testPathName: "getLevenshteinDistance1WhenNLessThanOrEqualsToThreshold"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "threshold"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: false
    - lineNumber: 2480
      expression: "n == 0"
      range: "(2480,13)-(2480,18)"
      evaluatedAs: false
    - lineNumber: 2483
      expression: "m == 0"
      range: "(2483,13)-(2483,18)"
      evaluatedAs: true
    - lineNumber: 2484
      expression: "n <= threshold"
      range: "(2484,20)-(2484,33)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistance1WhenMathAbsNMinusMGreaterThanThreshold"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "threshold"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: false
    - lineNumber: 2480
      expression: "n == 0"
      range: "(2480,13)-(2480,18)"
      evaluatedAs: false
    - lineNumber: 2483
      expression: "m == 0"
      range: "(2483,13)-(2483,18)"
      evaluatedAs: false
    - lineNumber: 2486
      expression: "Math.abs(n - m) > threshold"
      range: "(2486,13)-(2486,39)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistance1WhenMinGreaterThanMax"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "threshold"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: false
    - lineNumber: 2480
      expression: "n == 0"
      range: "(2480,13)-(2480,18)"
      evaluatedAs: false
    - lineNumber: 2483
      expression: "m == 0"
      range: "(2483,13)-(2483,18)"
      evaluatedAs: false
    - lineNumber: 2486
      expression: "Math.abs(n - m) > threshold"
      range: "(2486,13)-(2486,39)"
      evaluatedAs: false
    - lineNumber: 2491
      expression: "n > m"
      range: "(2491,13)-(2491,17)"
      evaluatedAs: true
    - lineNumber: 2506
      expression: "i < boundary"
      range: "(2506,25)-(2506,36)"
      evaluatedAs: true
    - lineNumber: 2515
      expression: "j <= m"
      range: "(2515,25)-(2515,30)"
      evaluatedAs: true
    - lineNumber: 2521
      expression: "j > Integer.MAX_VALUE - threshold"
      range: "(2521,29)-(2521,61)"
      evaluatedAs: false
    - lineNumber: 2524
      expression: "min > max"
      range: "(2524,17)-(2524,25)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistance1WhenILessThanOrEqualsToMaxAndSCharAtIMinus1NotEqualsJOfTAndNIndexOfPLessThanOrEqualsToThreshold"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "int32"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7579
      valueType: "int"
      uuid: "threshold"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int32"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: false
    - lineNumber: 2480
      expression: "n == 0"
      range: "(2480,13)-(2480,18)"
      evaluatedAs: false
    - lineNumber: 2483
      expression: "m == 0"
      range: "(2483,13)-(2483,18)"
      evaluatedAs: false
    - lineNumber: 2486
      expression: "Math.abs(n - m) > threshold"
      range: "(2486,13)-(2486,39)"
      evaluatedAs: false
    - lineNumber: 2491
      expression: "n > m"
      range: "(2491,13)-(2491,17)"
      evaluatedAs: true
    - lineNumber: 2506
      expression: "i < boundary"
      range: "(2506,25)-(2506,36)"
      evaluatedAs: true
    - lineNumber: 2515
      expression: "j <= m"
      range: "(2515,25)-(2515,30)"
      evaluatedAs: true
    - lineNumber: 2521
      expression: "j > Integer.MAX_VALUE - threshold"
      range: "(2521,29)-(2521,61)"
      evaluatedAs: false
    - lineNumber: 2524
      expression: "min > max"
      range: "(2524,17)-(2524,25)"
      evaluatedAs: false
    - lineNumber: 2529
      expression: "min > 1"
      range: "(2529,17)-(2529,23)"
      evaluatedAs: false
    - lineNumber: 2534
      expression: "i <= max"
      range: "(2534,31)-(2534,38)"
      evaluatedAs: true
    - lineNumber: 2535
      expression: "s.charAt(i - 1) == jOfT"
      range: "(2535,21)-(2535,43)"
      evaluatedAs: false
    - lineNumber: 2552
      expression: "p[n] <= threshold"
      range: "(2552,13)-(2552,29)"
      evaluatedAs: true
  - testPathName: "getLevenshteinDistance1WhenMinGreaterThan1AndILessThanOrEqualsToMaxAndSCharAtIMinus1EqualsJOfTAndNIndexOfPLessThanOrEqu"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "s"
      valueUuid: "s"
    - type: "INPUT"
      name: "t"
      valueUuid: "t"
    - type: "INPUT"
      name: "threshold"
      valueUuid: "threshold"
    - type: "RESULT"
      name: "result"
      valueUuid: "int24"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "s1"
      valueType: "java.lang.String"
      uuid: "s"
    - sapientType: "BASIC"
      content: !<regular>
        value: "t1"
      valueType: "java.lang.String"
      uuid: "t"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "threshold"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int24"
    branches:
    - lineNumber: 2425
      expression: "s == null"
      range: "(2425,13)-(2425,21)"
      evaluatedAs: false
    - lineNumber: 2425
      expression: "t == null"
      range: "(2425,26)-(2425,34)"
      evaluatedAs: false
    - lineNumber: 2428
      expression: "threshold < 0"
      range: "(2428,13)-(2428,25)"
      evaluatedAs: false
    - lineNumber: 2480
      expression: "n == 0"
      range: "(2480,13)-(2480,18)"
      evaluatedAs: false
    - lineNumber: 2483
      expression: "m == 0"
      range: "(2483,13)-(2483,18)"
      evaluatedAs: false
    - lineNumber: 2486
      expression: "Math.abs(n - m) > threshold"
      range: "(2486,13)-(2486,39)"
      evaluatedAs: false
    - lineNumber: 2491
      expression: "n > m"
      range: "(2491,13)-(2491,17)"
      evaluatedAs: true
    - lineNumber: 2506
      expression: "i < boundary"
      range: "(2506,25)-(2506,36)"
      evaluatedAs: false
    - lineNumber: 2515
      expression: "j <= m"
      range: "(2515,25)-(2515,30)"
      evaluatedAs: true
    - lineNumber: 2521
      expression: "j > Integer.MAX_VALUE - threshold"
      range: "(2521,29)-(2521,61)"
      evaluatedAs: true
    - lineNumber: 2524
      expression: "min > max"
      range: "(2524,17)-(2524,25)"
      evaluatedAs: false
    - lineNumber: 2529
      expression: "min > 1"
      range: "(2529,17)-(2529,23)"
      evaluatedAs: true
    - lineNumber: 2534
      expression: "i <= max"
      range: "(2534,31)-(2534,38)"
      evaluatedAs: true
    - lineNumber: 2535
      expression: "s.charAt(i - 1) == jOfT"
      range: "(2535,21)-(2535,43)"
      evaluatedAs: true
    - lineNumber: 2552
      expression: "p[n] <= threshold"
      range: "(2552,13)-(2552,29)"
      evaluatedAs: true
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final CharSequence seq, final CharSequence searchSeq)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchSeq"
      type: "java.lang.CharSequence"
    instructionFingerprint: "69DB85495776FDDE8D3EA07AF4D0C30A"
  paths:
  - testPathName: "indexOfWhenSearchSeqIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2583
      expression: "seq == null"
      range: "(2583,13)-(2583,23)"
      evaluatedAs: false
    - lineNumber: 2583
      expression: "searchSeq == null"
      range: "(2583,28)-(2583,44)"
      evaluatedAs: true
  - testPathName: "indexOfWhenSearchSeqIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchSeq1"
      valueType: "java.lang.String"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 2583
      expression: "seq == null"
      range: "(2583,13)-(2583,23)"
      evaluatedAs: false
    - lineNumber: 2583
      expression: "searchSeq == null"
      range: "(2583,28)-(2583,44)"
      evaluatedAs: false
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final CharSequence seq, final CharSequence searchSeq,\
      \ final int startPos)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchSeq"
      type: "java.lang.CharSequence"
    - name: "startPos"
      type: "int"
    instructionFingerprint: "5BEED3456001E04062B64F9AE776591F"
  paths:
  - testPathName: "indexOf1WhenSearchSeqIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2623
      expression: "seq == null"
      range: "(2623,13)-(2623,23)"
      evaluatedAs: false
    - lineNumber: 2623
      expression: "searchSeq == null"
      range: "(2623,28)-(2623,44)"
      evaluatedAs: true
  - testPathName: "indexOf1WhenSearchSeqIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchSeq1"
      valueType: "java.lang.String"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 2623
      expression: "seq == null"
      range: "(2623,13)-(2623,23)"
      evaluatedAs: false
    - lineNumber: 2623
      expression: "searchSeq == null"
      range: "(2623,28)-(2623,44)"
      evaluatedAs: false
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final CharSequence seq, final int searchChar)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchChar"
      type: "int"
    instructionFingerprint: "74D0AAEC01BF115D840127AB6B625C91"
  paths:
  - testPathName: "indexOf2WhenIsEmptySeq"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2667
      expression: "isEmpty(seq)"
      range: "(2667,13)-(2667,24)"
      evaluatedAs: true
  - testPathName: "indexOf2WhenIsEmptyNotSeq"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,int,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 2667
      expression: "isEmpty(seq)"
      range: "(2667,13)-(2667,24)"
      evaluatedAs: false
- method:
    name: "indexOf"
    sourceCodeSignature: "int indexOf(final CharSequence seq, final int searchChar,\
      \ final int startPos)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchChar"
      type: "int"
    - name: "startPos"
      type: "int"
    instructionFingerprint: "CC9B1EF882DABB8F24B897437CB9A15C"
  paths:
  - testPathName: "indexOf3WhenIsEmptySeq"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2726
      expression: "isEmpty(seq)"
      range: "(2726,13)-(2726,24)"
      evaluatedAs: true
  - testPathName: "indexOf3WhenIsEmptyNotSeq"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,int,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 2726
      expression: "isEmpty(seq)"
      range: "(2726,13)-(2726,24)"
      evaluatedAs: false
- method:
    name: "indexOfAny"
    sourceCodeSignature: "int indexOfAny(final CharSequence cs, final char... searchChars)"
    returnType: "int"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchChars"
      type: "char[]"
    instructionFingerprint: "50FCBB0C7E27C40286FBD28834BAA154"
  paths:
  - testPathName: "indexOfAnyWhenArrayUtilsIsEmptySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2756
      expression: "isEmpty(cs)"
      range: "(2756,13)-(2756,23)"
      evaluatedAs: false
    - lineNumber: 2756
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2756,28)-(2756,58)"
      evaluatedAs: true
  - testPathName: "indexOfAnyWhenCharacterNotIsHighSurrogateCh"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "searchCharsItem1"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 2756
      expression: "isEmpty(cs)"
      range: "(2756,13)-(2756,23)"
      evaluatedAs: false
    - lineNumber: 2756
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2756,28)-(2756,58)"
      evaluatedAs: false
    - lineNumber: 2763
      expression: "i < csLen"
      range: "(2763,25)-(2763,33)"
      evaluatedAs: true
    - lineNumber: 2765
      expression: "j < searchLen"
      range: "(2765,29)-(2765,41)"
      evaluatedAs: true
    - lineNumber: 2766
      expression: "searchChars[j] == ch"
      range: "(2766,21)-(2766,40)"
      evaluatedAs: true
    - lineNumber: 2767
      expression: "i >= csLast"
      range: "(2767,25)-(2767,35)"
      evaluatedAs: false
    - lineNumber: 2767
      expression: "j >= searchLast"
      range: "(2767,40)-(2767,54)"
      evaluatedAs: false
    - lineNumber: 2767
      expression: "!Character.isHighSurrogate(ch)"
      range: "(2767,59)-(2767,88)"
      evaluatedAs: true
  - testPathName: "indexOfAnyWhenJPlus1IndexOfSearchCharsEqualsCsCharAtIPlus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 2756
      expression: "isEmpty(cs)"
      range: "(2756,13)-(2756,23)"
      evaluatedAs: false
    - lineNumber: 2756
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2756,28)-(2756,58)"
      evaluatedAs: false
    - lineNumber: 2763
      expression: "i < csLen"
      range: "(2763,25)-(2763,33)"
      evaluatedAs: true
    - lineNumber: 2765
      expression: "j < searchLen"
      range: "(2765,29)-(2765,41)"
      evaluatedAs: true
    - lineNumber: 2766
      expression: "searchChars[j] == ch"
      range: "(2766,21)-(2766,40)"
      evaluatedAs: true
    - lineNumber: 2767
      expression: "i >= csLast"
      range: "(2767,25)-(2767,35)"
      evaluatedAs: false
    - lineNumber: 2767
      expression: "j >= searchLast"
      range: "(2767,40)-(2767,54)"
      evaluatedAs: false
    - lineNumber: 2767
      expression: "!Character.isHighSurrogate(ch)"
      range: "(2767,59)-(2767,88)"
      evaluatedAs: false
    - lineNumber: 2771
      expression: "searchChars[j + 1] == cs.charAt(i + 1)"
      range: "(2771,25)-(2771,62)"
      evaluatedAs: true
  - testPathName: "indexOfAnyWhenJPlus1IndexOfSearchCharsNotEqualsCsCharAtIPlus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2756
      expression: "isEmpty(cs)"
      range: "(2756,13)-(2756,23)"
      evaluatedAs: false
    - lineNumber: 2756
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2756,28)-(2756,58)"
      evaluatedAs: false
    - lineNumber: 2763
      expression: "i < csLen"
      range: "(2763,25)-(2763,33)"
      evaluatedAs: true
    - lineNumber: 2765
      expression: "j < searchLen"
      range: "(2765,29)-(2765,41)"
      evaluatedAs: true
    - lineNumber: 2766
      expression: "searchChars[j] == ch"
      range: "(2766,21)-(2766,40)"
      evaluatedAs: true
    - lineNumber: 2767
      expression: "i >= csLast"
      range: "(2767,25)-(2767,35)"
      evaluatedAs: false
    - lineNumber: 2767
      expression: "j >= searchLast"
      range: "(2767,40)-(2767,54)"
      evaluatedAs: false
    - lineNumber: 2767
      expression: "!Character.isHighSurrogate(ch)"
      range: "(2767,59)-(2767,88)"
      evaluatedAs: false
    - lineNumber: 2771
      expression: "searchChars[j + 1] == cs.charAt(i + 1)"
      range: "(2771,25)-(2771,62)"
      evaluatedAs: false
- method:
    name: "indexOfAny"
    sourceCodeSignature: "int indexOfAny(final CharSequence str, final CharSequence...\
      \ searchStrs)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStrs"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "3AB873BFB838F305CFF9B87EDAEBB9A8"
  paths:
  - testPathName: "indexOfAny1WhenSearchStrsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStrs"
      valueUuid: "searchStrs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrs"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2808
      expression: "str == null"
      range: "(2808,13)-(2808,23)"
      evaluatedAs: false
    - lineNumber: 2808
      expression: "searchStrs == null"
      range: "(2808,28)-(2808,45)"
      evaluatedAs: true
  - testPathName: "indexOfAny1WhenSearchIsNullAndRetEqualsIntegerMAX_VALUE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStrs"
      valueUuid: "searchStrs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrs"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2808
      expression: "str == null"
      range: "(2808,13)-(2808,23)"
      evaluatedAs: false
    - lineNumber: 2808
      expression: "searchStrs == null"
      range: "(2808,28)-(2808,45)"
      evaluatedAs: false
    - lineNumber: 2816
      expression: "for-each(searchStrs)"
      range: "(2816,42)-(2816,51)"
      evaluatedAs: true
    - lineNumber: 2817
      expression: "search == null"
      range: "(2817,17)-(2817,30)"
      evaluatedAs: true
    - lineNumber: 2830
      expression: "ret == Integer.MAX_VALUE"
      range: "(2830,16)-(2830,39)"
      evaluatedAs: true
  - testPathName: "indexOfAny1WhenTmpEqualsINDEX_NOT_FOUNDAndRetEqualsIntegerMAX_VALUE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStrs"
      valueUuid: "searchStrs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrs"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2808
      expression: "str == null"
      range: "(2808,13)-(2808,23)"
      evaluatedAs: false
    - lineNumber: 2808
      expression: "searchStrs == null"
      range: "(2808,28)-(2808,45)"
      evaluatedAs: false
    - lineNumber: 2816
      expression: "for-each(searchStrs)"
      range: "(2816,42)-(2816,51)"
      evaluatedAs: true
    - lineNumber: 2817
      expression: "search == null"
      range: "(2817,17)-(2817,30)"
      evaluatedAs: false
    - lineNumber: 2821
      expression: "tmp == INDEX_NOT_FOUND"
      range: "(2821,17)-(2821,38)"
      evaluatedAs: true
    - lineNumber: 2830
      expression: "ret == Integer.MAX_VALUE"
      range: "(2830,16)-(2830,39)"
      evaluatedAs: true
  - testPathName: "indexOfAny1WhenRetNotEqualsIntegerMAX_VALUE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStrs"
      valueUuid: "searchStrs"
    - type: "RESULT"
      name: "result"
      valueUuid: "int4"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrs"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    branches:
    - lineNumber: 2808
      expression: "str == null"
      range: "(2808,13)-(2808,23)"
      evaluatedAs: false
    - lineNumber: 2808
      expression: "searchStrs == null"
      range: "(2808,28)-(2808,45)"
      evaluatedAs: false
    - lineNumber: 2816
      expression: "for-each(searchStrs)"
      range: "(2816,42)-(2816,51)"
      evaluatedAs: true
    - lineNumber: 2817
      expression: "search == null"
      range: "(2817,17)-(2817,30)"
      evaluatedAs: false
    - lineNumber: 2821
      expression: "tmp == INDEX_NOT_FOUND"
      range: "(2821,17)-(2821,38)"
      evaluatedAs: false
    - lineNumber: 2825
      expression: "tmp < ret"
      range: "(2825,17)-(2825,25)"
      evaluatedAs: true
    - lineNumber: 2830
      expression: "ret == Integer.MAX_VALUE"
      range: "(2830,16)-(2830,39)"
      evaluatedAs: false
- method:
    name: "indexOfAny"
    sourceCodeSignature: "int indexOfAny(final CharSequence cs, final String searchChars)"
    returnType: "int"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchChars"
      type: "java.lang.String"
    instructionFingerprint: "04F7A0CDF7BA242F4961971A3383BC59"
  paths:
  - testPathName: "indexOfAny2WhenIsEmptySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2857
      expression: "isEmpty(cs)"
      range: "(2857,13)-(2857,23)"
      evaluatedAs: false
    - lineNumber: 2857
      expression: "isEmpty(searchChars)"
      range: "(2857,28)-(2857,47)"
      evaluatedAs: true
  - testPathName: "indexOfAny2WhenIsEmptyNotSearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfAny(cs,charArray):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charArray-item0"
      valueType: "char[]"
      uuid: "charArray"
    branches:
    - lineNumber: 2857
      expression: "isEmpty(cs)"
      range: "(2857,13)-(2857,23)"
      evaluatedAs: false
    - lineNumber: 2857
      expression: "isEmpty(searchChars)"
      range: "(2857,28)-(2857,47)"
      evaluatedAs: false
- method:
    name: "indexOfAnyBut"
    sourceCodeSignature: "int indexOfAnyBut(final CharSequence cs, final char... searchChars)"
    returnType: "int"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    - name: "searchChars"
      type: "char[]"
    instructionFingerprint: "68A2E47B306F7F93B5FBCF507DC5C995"
  paths:
  - testPathName: "indexOfAnyButWhenArrayUtilsIsEmptySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2888
      expression: "isEmpty(cs)"
      range: "(2888,13)-(2888,23)"
      evaluatedAs: false
    - lineNumber: 2888
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2888,28)-(2888,58)"
      evaluatedAs: true
  - testPathName: "indexOfAnyButWhenCharacterNotIsHighSurrogateCh"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "searchCharsItem1"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2888
      expression: "isEmpty(cs)"
      range: "(2888,13)-(2888,23)"
      evaluatedAs: false
    - lineNumber: 2888
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2888,28)-(2888,58)"
      evaluatedAs: false
    - lineNumber: 2896
      expression: "i < csLen"
      range: "(2896,25)-(2896,33)"
      evaluatedAs: true
    - lineNumber: 2898
      expression: "j < searchLen"
      range: "(2898,29)-(2898,41)"
      evaluatedAs: true
    - lineNumber: 2899
      expression: "searchChars[j] == ch"
      range: "(2899,21)-(2899,40)"
      evaluatedAs: true
    - lineNumber: 2900
      expression: "i >= csLast"
      range: "(2900,25)-(2900,35)"
      evaluatedAs: false
    - lineNumber: 2900
      expression: "j >= searchLast"
      range: "(2900,40)-(2900,54)"
      evaluatedAs: false
    - lineNumber: 2900
      expression: "!Character.isHighSurrogate(ch)"
      range: "(2900,59)-(2900,88)"
      evaluatedAs: true
  - testPathName: "indexOfAnyButWhenJPlus1IndexOfSearchCharsEqualsCsCharAtIPlus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2888
      expression: "isEmpty(cs)"
      range: "(2888,13)-(2888,23)"
      evaluatedAs: false
    - lineNumber: 2888
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2888,28)-(2888,58)"
      evaluatedAs: false
    - lineNumber: 2896
      expression: "i < csLen"
      range: "(2896,25)-(2896,33)"
      evaluatedAs: true
    - lineNumber: 2898
      expression: "j < searchLen"
      range: "(2898,29)-(2898,41)"
      evaluatedAs: true
    - lineNumber: 2899
      expression: "searchChars[j] == ch"
      range: "(2899,21)-(2899,40)"
      evaluatedAs: true
    - lineNumber: 2900
      expression: "i >= csLast"
      range: "(2900,25)-(2900,35)"
      evaluatedAs: false
    - lineNumber: 2900
      expression: "j >= searchLast"
      range: "(2900,40)-(2900,54)"
      evaluatedAs: false
    - lineNumber: 2900
      expression: "!Character.isHighSurrogate(ch)"
      range: "(2900,59)-(2900,88)"
      evaluatedAs: false
    - lineNumber: 2903
      expression: "searchChars[j + 1] == cs.charAt(i + 1)"
      range: "(2903,25)-(2903,62)"
      evaluatedAs: true
  - testPathName: "indexOfAnyButWhenJPlus1IndexOfSearchCharsNotEqualsCsCharAtIPlus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char3"
      valueType: "char[]"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 2888
      expression: "isEmpty(cs)"
      range: "(2888,13)-(2888,23)"
      evaluatedAs: false
    - lineNumber: 2888
      expression: "ArrayUtils.isEmpty(searchChars)"
      range: "(2888,28)-(2888,58)"
      evaluatedAs: false
    - lineNumber: 2896
      expression: "i < csLen"
      range: "(2896,25)-(2896,33)"
      evaluatedAs: true
    - lineNumber: 2898
      expression: "j < searchLen"
      range: "(2898,29)-(2898,41)"
      evaluatedAs: true
    - lineNumber: 2899
      expression: "searchChars[j] == ch"
      range: "(2899,21)-(2899,40)"
      evaluatedAs: true
    - lineNumber: 2900
      expression: "i >= csLast"
      range: "(2900,25)-(2900,35)"
      evaluatedAs: false
    - lineNumber: 2900
      expression: "j >= searchLast"
      range: "(2900,40)-(2900,54)"
      evaluatedAs: false
    - lineNumber: 2900
      expression: "!Character.isHighSurrogate(ch)"
      range: "(2900,59)-(2900,88)"
      evaluatedAs: false
    - lineNumber: 2903
      expression: "searchChars[j + 1] == cs.charAt(i + 1)"
      range: "(2903,25)-(2903,62)"
      evaluatedAs: false
- method:
    name: "indexOfAnyBut"
    sourceCodeSignature: "int indexOfAnyBut(final CharSequence seq, final CharSequence\
      \ searchChars)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchChars"
      type: "java.lang.CharSequence"
    instructionFingerprint: "8B00F2ACCDC5FF7898194BA9ABFD5B00"
  paths:
  - testPathName: "indexOfAnyBut1WhenIsEmptySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2937
      expression: "isEmpty(seq)"
      range: "(2937,13)-(2937,24)"
      evaluatedAs: false
    - lineNumber: 2937
      expression: "isEmpty(searchChars)"
      range: "(2937,29)-(2937,48)"
      evaluatedAs: true
  - testPathName: "indexOfAnyBut1WhenNotChFound"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 2937
      expression: "isEmpty(seq)"
      range: "(2937,13)-(2937,24)"
      evaluatedAs: false
    - lineNumber: 2937
      expression: "isEmpty(searchChars)"
      range: "(2937,29)-(2937,48)"
      evaluatedAs: false
    - lineNumber: 2941
      expression: "i < strLen"
      range: "(2941,25)-(2941,34)"
      evaluatedAs: true
    - lineNumber: 2943
      expression: "CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0"
      range: "(2943,37)-(2943,86)"
      evaluatedAs: false
    - lineNumber: 2944
      expression: "i + 1 < strLen"
      range: "(2944,17)-(2944,30)"
      evaluatedAs: true
    - lineNumber: 2944
      expression: "Character.isHighSurrogate(ch)"
      range: "(2944,35)-(2944,63)"
      evaluatedAs: false
    - lineNumber: 2949
      expression: "!chFound"
      range: "(2949,24)-(2949,31)"
      evaluatedAs: true
  - testPathName: "indexOfAnyBut1WhenCharSequenceUtilsIndexOfSearchCharsCh20LessThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 2937
      expression: "isEmpty(seq)"
      range: "(2937,13)-(2937,24)"
      evaluatedAs: false
    - lineNumber: 2937
      expression: "isEmpty(searchChars)"
      range: "(2937,29)-(2937,48)"
      evaluatedAs: false
    - lineNumber: 2941
      expression: "i < strLen"
      range: "(2941,25)-(2941,34)"
      evaluatedAs: true
    - lineNumber: 2943
      expression: "CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0"
      range: "(2943,37)-(2943,86)"
      evaluatedAs: true
    - lineNumber: 2944
      expression: "i + 1 < strLen"
      range: "(2944,17)-(2944,30)"
      evaluatedAs: true
    - lineNumber: 2944
      expression: "Character.isHighSurrogate(ch)"
      range: "(2944,35)-(2944,63)"
      evaluatedAs: true
    - lineNumber: 2946
      expression: "chFound"
      range: "(2946,21)-(2946,27)"
      evaluatedAs: true
    - lineNumber: 2946
      expression: "CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0"
      range: "(2946,32)-(2946,81)"
      evaluatedAs: true
  - testPathName: "indexOfAnyBut1WhenCharSequenceUtilsIndexOfSearchCharsCh20NotLessThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2937
      expression: "isEmpty(seq)"
      range: "(2937,13)-(2937,24)"
      evaluatedAs: false
    - lineNumber: 2937
      expression: "isEmpty(searchChars)"
      range: "(2937,29)-(2937,48)"
      evaluatedAs: false
    - lineNumber: 2941
      expression: "i < strLen"
      range: "(2941,25)-(2941,34)"
      evaluatedAs: true
    - lineNumber: 2943
      expression: "CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0"
      range: "(2943,37)-(2943,86)"
      evaluatedAs: true
    - lineNumber: 2944
      expression: "i + 1 < strLen"
      range: "(2944,17)-(2944,30)"
      evaluatedAs: true
    - lineNumber: 2944
      expression: "Character.isHighSurrogate(ch)"
      range: "(2944,35)-(2944,63)"
      evaluatedAs: true
    - lineNumber: 2946
      expression: "chFound"
      range: "(2946,21)-(2946,27)"
      evaluatedAs: true
    - lineNumber: 2946
      expression: "CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0"
      range: "(2946,32)-(2946,81)"
      evaluatedAs: false
- method:
    name: "indexOfDifference"
    sourceCodeSignature: "int indexOfDifference(final CharSequence... css)"
    returnType: "int"
    parameters:
    - name: "css"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "1CB8E7E73DF49420A99DBE33BF7349B2"
  paths:
  - testPathName: "indexOfDifferenceWhenArrayUtilsGetLengthCssLessThanOrEqualsTo1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2989
      expression: "ArrayUtils.getLength(css) <= 1"
      range: "(2989,13)-(2989,42)"
      evaluatedAs: true
  - testPathName: "indexOfDifferenceWhenCsIsNullAndAllStringsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.getLength(java.lang.CharSequence[])\
        \ : int"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2989
      expression: "ArrayUtils.getLength(css) <= 1"
      range: "(2989,13)-(2989,42)"
      evaluatedAs: false
    - lineNumber: 3001
      expression: "for-each(css)"
      range: "(3001,38)-(3001,40)"
      evaluatedAs: true
    - lineNumber: 3002
      expression: "cs == null"
      range: "(3002,17)-(3002,26)"
      evaluatedAs: true
    - lineNumber: 3013
      expression: "allStringsNull"
      range: "(3013,13)-(3013,26)"
      evaluatedAs: true
  - testPathName: "indexOfDifferenceWhenNotAnyStringNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.getLength(java.lang.CharSequence[])\
        \ : int"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2989
      expression: "ArrayUtils.getLength(css) <= 1"
      range: "(2989,13)-(2989,42)"
      evaluatedAs: false
    - lineNumber: 3001
      expression: "for-each(css)"
      range: "(3001,38)-(3001,40)"
      evaluatedAs: true
    - lineNumber: 3002
      expression: "cs == null"
      range: "(3002,17)-(3002,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "allStringsNull"
      range: "(3013,13)-(3013,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "longestStrLen == 0"
      range: "(3013,31)-(3013,48)"
      evaluatedAs: true
    - lineNumber: 3013
      expression: "!anyStringNull"
      range: "(3013,53)-(3013,66)"
      evaluatedAs: true
  - testPathName: "indexOfDifferenceWhenShortestStrLenEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.getLength(java.lang.CharSequence[])\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 2989
      expression: "ArrayUtils.getLength(css) <= 1"
      range: "(2989,13)-(2989,42)"
      evaluatedAs: false
    - lineNumber: 3001
      expression: "for-each(css)"
      range: "(3001,38)-(3001,40)"
      evaluatedAs: true
    - lineNumber: 3002
      expression: "cs == null"
      range: "(3002,17)-(3002,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "allStringsNull"
      range: "(3013,13)-(3013,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "longestStrLen == 0"
      range: "(3013,31)-(3013,48)"
      evaluatedAs: false
    - lineNumber: 3018
      expression: "shortestStrLen == 0"
      range: "(3018,13)-(3018,31)"
      evaluatedAs: true
  - testPathName: "indexOfDifferenceWhenFirstDiffNotEqualsMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "int16"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.getLength(java.lang.CharSequence[])\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence3"
            valueType: "java.lang.String"
            uuid: "charSequence3"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int16"
    branches:
    - lineNumber: 2989
      expression: "ArrayUtils.getLength(css) <= 1"
      range: "(2989,13)-(2989,42)"
      evaluatedAs: false
    - lineNumber: 3001
      expression: "for-each(css)"
      range: "(3001,38)-(3001,40)"
      evaluatedAs: true
    - lineNumber: 3002
      expression: "cs == null"
      range: "(3002,17)-(3002,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "allStringsNull"
      range: "(3013,13)-(3013,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "longestStrLen == 0"
      range: "(3013,31)-(3013,48)"
      evaluatedAs: false
    - lineNumber: 3018
      expression: "shortestStrLen == 0"
      range: "(3018,13)-(3018,31)"
      evaluatedAs: false
    - lineNumber: 3024
      expression: "stringPos < shortestStrLen"
      range: "(3024,33)-(3024,58)"
      evaluatedAs: true
    - lineNumber: 3026
      expression: "arrayPos < arrayLen"
      range: "(3026,36)-(3026,54)"
      evaluatedAs: true
    - lineNumber: 3027
      expression: "css[arrayPos].charAt(stringPos) != comparisonChar"
      range: "(3027,21)-(3027,69)"
      evaluatedAs: true
    - lineNumber: 3032
      expression: "firstDiff != -1"
      range: "(3032,17)-(3032,31)"
      evaluatedAs: true
    - lineNumber: 3037
      expression: "firstDiff == -1"
      range: "(3037,13)-(3037,27)"
      evaluatedAs: false
  - testPathName: "indexOfDifferenceWhenFirstDiffEqualsMinus1AndFirstDiffEqualsMinus1AndShortestStrLenNotEqualsLongestStrLen"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "int11"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.getLength(java.lang.CharSequence[])\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence3"
            valueType: "java.lang.String"
            uuid: "charSequence3"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int11"
    branches:
    - lineNumber: 2989
      expression: "ArrayUtils.getLength(css) <= 1"
      range: "(2989,13)-(2989,42)"
      evaluatedAs: false
    - lineNumber: 3001
      expression: "for-each(css)"
      range: "(3001,38)-(3001,40)"
      evaluatedAs: true
    - lineNumber: 3002
      expression: "cs == null"
      range: "(3002,17)-(3002,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "allStringsNull"
      range: "(3013,13)-(3013,26)"
      evaluatedAs: false
    - lineNumber: 3013
      expression: "longestStrLen == 0"
      range: "(3013,31)-(3013,48)"
      evaluatedAs: false
    - lineNumber: 3018
      expression: "shortestStrLen == 0"
      range: "(3018,13)-(3018,31)"
      evaluatedAs: false
    - lineNumber: 3024
      expression: "stringPos < shortestStrLen"
      range: "(3024,33)-(3024,58)"
      evaluatedAs: true
    - lineNumber: 3026
      expression: "arrayPos < arrayLen"
      range: "(3026,36)-(3026,54)"
      evaluatedAs: true
    - lineNumber: 3027
      expression: "css[arrayPos].charAt(stringPos) != comparisonChar"
      range: "(3027,21)-(3027,69)"
      evaluatedAs: false
    - lineNumber: 3032
      expression: "firstDiff != -1"
      range: "(3032,17)-(3032,31)"
      evaluatedAs: false
    - lineNumber: 3037
      expression: "firstDiff == -1"
      range: "(3037,13)-(3037,27)"
      evaluatedAs: true
    - lineNumber: 3037
      expression: "shortestStrLen != longestStrLen"
      range: "(3037,32)-(3037,62)"
      evaluatedAs: true
- method:
    name: "indexOfDifference"
    sourceCodeSignature: "int indexOfDifference(final CharSequence cs1, final CharSequence\
      \ cs2)"
    returnType: "int"
    parameters:
    - name: "cs1"
      type: "java.lang.CharSequence"
    - name: "cs2"
      type: "java.lang.CharSequence"
    instructionFingerprint: "79294FE2DC35DE7273ADD0E74328D9E4"
  paths:
  - testPathName: "indexOfDifference1WhenCs1EqualsCs2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3072
      expression: "cs1 == cs2"
      range: "(3072,13)-(3072,22)"
      evaluatedAs: true
  - testPathName: "indexOfDifference1WhenCs2IsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3072
      expression: "cs1 == cs2"
      range: "(3072,13)-(3072,22)"
      evaluatedAs: false
    - lineNumber: 3075
      expression: "cs1 == null"
      range: "(3075,13)-(3075,23)"
      evaluatedAs: false
    - lineNumber: 3075
      expression: "cs2 == null"
      range: "(3075,28)-(3075,38)"
      evaluatedAs: true
  - testPathName: "indexOfDifference1WhenINotLessThanCs1Length"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3072
      expression: "cs1 == cs2"
      range: "(3072,13)-(3072,22)"
      evaluatedAs: false
    - lineNumber: 3075
      expression: "cs1 == null"
      range: "(3075,13)-(3075,23)"
      evaluatedAs: false
    - lineNumber: 3075
      expression: "cs2 == null"
      range: "(3075,28)-(3075,38)"
      evaluatedAs: false
    - lineNumber: 3079
      expression: "i < cs1.length()"
      range: "(3079,21)-(3079,36)"
      evaluatedAs: true
    - lineNumber: 3079
      expression: "i < cs2.length()"
      range: "(3079,41)-(3079,56)"
      evaluatedAs: true
    - lineNumber: 3080
      expression: "cs1.charAt(i) != cs2.charAt(i)"
      range: "(3080,17)-(3080,46)"
      evaluatedAs: true
    - lineNumber: 3084
      expression: "i < cs2.length()"
      range: "(3084,13)-(3084,28)"
      evaluatedAs: false
    - lineNumber: 3084
      expression: "i < cs1.length()"
      range: "(3084,33)-(3084,48)"
      evaluatedAs: false
  - testPathName: "indexOfDifference1WhenINotLessThanCs2LengthAndILessThanCs1Length"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs1"
      valueUuid: "cs1"
    - type: "INPUT"
      name: "cs2"
      valueUuid: "cs2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int4"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs2"
      valueType: "java.lang.String"
      uuid: "cs2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int4"
    branches:
    - lineNumber: 3072
      expression: "cs1 == cs2"
      range: "(3072,13)-(3072,22)"
      evaluatedAs: false
    - lineNumber: 3075
      expression: "cs1 == null"
      range: "(3075,13)-(3075,23)"
      evaluatedAs: false
    - lineNumber: 3075
      expression: "cs2 == null"
      range: "(3075,28)-(3075,38)"
      evaluatedAs: false
    - lineNumber: 3079
      expression: "i < cs1.length()"
      range: "(3079,21)-(3079,36)"
      evaluatedAs: true
    - lineNumber: 3079
      expression: "i < cs2.length()"
      range: "(3079,41)-(3079,56)"
      evaluatedAs: true
    - lineNumber: 3080
      expression: "cs1.charAt(i) != cs2.charAt(i)"
      range: "(3080,17)-(3080,46)"
      evaluatedAs: false
    - lineNumber: 3084
      expression: "i < cs2.length()"
      range: "(3084,13)-(3084,28)"
      evaluatedAs: false
    - lineNumber: 3084
      expression: "i < cs1.length()"
      range: "(3084,33)-(3084,48)"
      evaluatedAs: true
- method:
    name: "indexOfIgnoreCase"
    sourceCodeSignature: "int indexOfIgnoreCase(final CharSequence str, final CharSequence\
      \ searchStr)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStr"
      type: "java.lang.CharSequence"
    instructionFingerprint: "7475259B25D963BD3E9823F8BBE94B86"
  paths:
  - testPathName: "indexOfIgnoreCaseTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfIgnoreCase(str,searchStr,startPos):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
- method:
    name: "indexOfIgnoreCase"
    sourceCodeSignature: "int indexOfIgnoreCase(final CharSequence str, final CharSequence\
      \ searchStr, int startPos)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStr"
      type: "java.lang.CharSequence"
    - name: "startPos"
      type: "int"
    instructionFingerprint: "C6B034A6242AC14F5B08F1CC6B8AF35F"
  paths:
  - testPathName: "indexOfIgnoreCase1WhenSearchStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3153
      expression: "str == null"
      range: "(3153,13)-(3153,23)"
      evaluatedAs: false
    - lineNumber: 3153
      expression: "searchStr == null"
      range: "(3153,28)-(3153,44)"
      evaluatedAs: true
  - testPathName: "indexOfIgnoreCase1WhenStartPosGreaterThanEndLimit"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3153
      expression: "str == null"
      range: "(3153,13)-(3153,23)"
      evaluatedAs: false
    - lineNumber: 3153
      expression: "searchStr == null"
      range: "(3153,28)-(3153,44)"
      evaluatedAs: false
    - lineNumber: 3156
      expression: "startPos < 0"
      range: "(3156,13)-(3156,24)"
      evaluatedAs: true
    - lineNumber: 3160
      expression: "startPos > endLimit"
      range: "(3160,13)-(3160,31)"
      evaluatedAs: true
  - testPathName: "indexOfIgnoreCase1WhenSearchStrLengthEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 3153
      expression: "str == null"
      range: "(3153,13)-(3153,23)"
      evaluatedAs: false
    - lineNumber: 3153
      expression: "searchStr == null"
      range: "(3153,28)-(3153,44)"
      evaluatedAs: false
    - lineNumber: 3156
      expression: "startPos < 0"
      range: "(3156,13)-(3156,24)"
      evaluatedAs: true
    - lineNumber: 3160
      expression: "startPos > endLimit"
      range: "(3160,13)-(3160,31)"
      evaluatedAs: false
    - lineNumber: 3163
      expression: "searchStr.length() == 0"
      range: "(3163,13)-(3163,35)"
      evaluatedAs: true
  - testPathName: "indexOfIgnoreCase1WhenCharSequenceUtilsRegionMatchesStrTrueISearchStr0SearchStrLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 3153
      expression: "str == null"
      range: "(3153,13)-(3153,23)"
      evaluatedAs: false
    - lineNumber: 3153
      expression: "searchStr == null"
      range: "(3153,28)-(3153,44)"
      evaluatedAs: false
    - lineNumber: 3156
      expression: "startPos < 0"
      range: "(3156,13)-(3156,24)"
      evaluatedAs: true
    - lineNumber: 3160
      expression: "startPos > endLimit"
      range: "(3160,13)-(3160,31)"
      evaluatedAs: false
    - lineNumber: 3163
      expression: "searchStr.length() == 0"
      range: "(3163,13)-(3163,35)"
      evaluatedAs: false
    - lineNumber: 3166
      expression: "i < endLimit"
      range: "(3166,32)-(3166,43)"
      evaluatedAs: true
    - lineNumber: 3167
      expression: "CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())"
      range: "(3167,17)-(3167,95)"
      evaluatedAs: true
  - testPathName: "indexOfIgnoreCase1WhenCharSequenceUtilsNotRegionMatchesStrTrueISearchStr0SearchStrLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3153
      expression: "str == null"
      range: "(3153,13)-(3153,23)"
      evaluatedAs: false
    - lineNumber: 3153
      expression: "searchStr == null"
      range: "(3153,28)-(3153,44)"
      evaluatedAs: false
    - lineNumber: 3156
      expression: "startPos < 0"
      range: "(3156,13)-(3156,24)"
      evaluatedAs: true
    - lineNumber: 3160
      expression: "startPos > endLimit"
      range: "(3160,13)-(3160,31)"
      evaluatedAs: false
    - lineNumber: 3163
      expression: "searchStr.length() == 0"
      range: "(3163,13)-(3163,35)"
      evaluatedAs: false
    - lineNumber: 3166
      expression: "i < endLimit"
      range: "(3166,32)-(3166,43)"
      evaluatedAs: true
    - lineNumber: 3167
      expression: "CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())"
      range: "(3167,17)-(3167,95)"
      evaluatedAs: false
- method:
    name: "isAllBlank"
    sourceCodeSignature: "boolean isAllBlank(final CharSequence... css)"
    returnType: "boolean"
    parameters:
    - name: "css"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "50BBA398C0347ECECC6D93070C26AC63"
  paths:
  - testPathName: "isAllBlankWhenArrayUtilsIsEmptyCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3196
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3196,13)-(3196,35)"
      evaluatedAs: true
  - testPathName: "isAllBlankWhenIsNotBlankCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotBlank(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3196
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3196,13)-(3196,35)"
      evaluatedAs: false
    - lineNumber: 3199
      expression: "for-each(css)"
      range: "(3199,38)-(3199,40)"
      evaluatedAs: true
    - lineNumber: 3200
      expression: "isNotBlank(cs)"
      range: "(3200,17)-(3200,30)"
      evaluatedAs: true
  - testPathName: "isAllBlankWhenIsNotBlankNotCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotBlank(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3196
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3196,13)-(3196,35)"
      evaluatedAs: false
    - lineNumber: 3199
      expression: "for-each(css)"
      range: "(3199,38)-(3199,40)"
      evaluatedAs: true
    - lineNumber: 3200
      expression: "isNotBlank(cs)"
      range: "(3200,17)-(3200,30)"
      evaluatedAs: false
- method:
    name: "isAllEmpty"
    sourceCodeSignature: "boolean isAllEmpty(final CharSequence... css)"
    returnType: "boolean"
    parameters:
    - name: "css"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "7A8E7AB081C19AC3B6DAF9D5BB9AF02D"
  paths:
  - testPathName: "isAllEmptyWhenArrayUtilsIsEmptyCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3227
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3227,13)-(3227,35)"
      evaluatedAs: true
  - testPathName: "isAllEmptyWhenIsNotEmptyCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3227
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3227,13)-(3227,35)"
      evaluatedAs: false
    - lineNumber: 3230
      expression: "for-each(css)"
      range: "(3230,38)-(3230,40)"
      evaluatedAs: true
    - lineNumber: 3231
      expression: "isNotEmpty(cs)"
      range: "(3231,17)-(3231,30)"
      evaluatedAs: true
  - testPathName: "isAllEmptyWhenIsNotEmptyNotCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isNotEmpty(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3227
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3227,13)-(3227,35)"
      evaluatedAs: false
    - lineNumber: 3230
      expression: "for-each(css)"
      range: "(3230,38)-(3230,40)"
      evaluatedAs: true
    - lineNumber: 3231
      expression: "isNotEmpty(cs)"
      range: "(3231,17)-(3231,30)"
      evaluatedAs: false
- method:
    name: "isAllLowerCase"
    sourceCodeSignature: "boolean isAllLowerCase(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "71A9D637662805DBDF20C9FEA5484F46"
  paths:
  - testPathName: "isAllLowerCaseWhenIsEmptyCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3261
      expression: "isEmpty(cs)"
      range: "(3261,13)-(3261,23)"
      evaluatedAs: true
  - testPathName: "isAllLowerCaseWhenCharacterNotIsLowerCaseCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3261
      expression: "isEmpty(cs)"
      range: "(3261,13)-(3261,23)"
      evaluatedAs: false
    - lineNumber: 3265
      expression: "i < sz"
      range: "(3265,25)-(3265,30)"
      evaluatedAs: true
    - lineNumber: 3266
      expression: "!Character.isLowerCase(cs.charAt(i))"
      range: "(3266,17)-(3266,52)"
      evaluatedAs: true
  - testPathName: "isAllLowerCaseWhenCharacterIsLowerCaseCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3261
      expression: "isEmpty(cs)"
      range: "(3261,13)-(3261,23)"
      evaluatedAs: false
    - lineNumber: 3265
      expression: "i < sz"
      range: "(3265,25)-(3265,30)"
      evaluatedAs: true
    - lineNumber: 3266
      expression: "!Character.isLowerCase(cs.charAt(i))"
      range: "(3266,17)-(3266,52)"
      evaluatedAs: false
- method:
    name: "isAllUpperCase"
    sourceCodeSignature: "boolean isAllUpperCase(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "0A85372AC5BC0852BF8C31B6BE8AA0DE"
  paths:
  - testPathName: "isAllUpperCaseWhenIsEmptyCs"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3296
      expression: "isEmpty(cs)"
      range: "(3296,13)-(3296,23)"
      evaluatedAs: true
  - testPathName: "isAllUpperCaseWhenCharacterNotIsUpperCaseCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3296
      expression: "isEmpty(cs)"
      range: "(3296,13)-(3296,23)"
      evaluatedAs: false
    - lineNumber: 3300
      expression: "i < sz"
      range: "(3300,25)-(3300,30)"
      evaluatedAs: true
    - lineNumber: 3301
      expression: "!Character.isUpperCase(cs.charAt(i))"
      range: "(3301,17)-(3301,52)"
      evaluatedAs: true
  - testPathName: "isAllUpperCaseWhenCharacterIsUpperCaseCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3296
      expression: "isEmpty(cs)"
      range: "(3296,13)-(3296,23)"
      evaluatedAs: false
    - lineNumber: 3300
      expression: "i < sz"
      range: "(3300,25)-(3300,30)"
      evaluatedAs: true
    - lineNumber: 3301
      expression: "!Character.isUpperCase(cs.charAt(i))"
      range: "(3301,17)-(3301,52)"
      evaluatedAs: false
- method:
    name: "isAlpha"
    sourceCodeSignature: "boolean isAlpha(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "762F41DA67EDF5A848D5DF3B25F571FA"
  paths:
  - testPathName: "isAlphaWhenIsEmptyCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3329
      expression: "isEmpty(cs)"
      range: "(3329,13)-(3329,23)"
      evaluatedAs: true
  - testPathName: "isAlphaWhenCharacterNotIsLetterCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3329
      expression: "isEmpty(cs)"
      range: "(3329,13)-(3329,23)"
      evaluatedAs: false
    - lineNumber: 3333
      expression: "i < sz"
      range: "(3333,25)-(3333,30)"
      evaluatedAs: true
    - lineNumber: 3334
      expression: "!Character.isLetter(cs.charAt(i))"
      range: "(3334,17)-(3334,49)"
      evaluatedAs: true
  - testPathName: "isAlphaWhenCharacterIsLetterCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3329
      expression: "isEmpty(cs)"
      range: "(3329,13)-(3329,23)"
      evaluatedAs: false
    - lineNumber: 3333
      expression: "i < sz"
      range: "(3333,25)-(3333,30)"
      evaluatedAs: true
    - lineNumber: 3334
      expression: "!Character.isLetter(cs.charAt(i))"
      range: "(3334,17)-(3334,49)"
      evaluatedAs: false
- method:
    name: "isAlphanumeric"
    sourceCodeSignature: "boolean isAlphanumeric(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "00397AE1806DB0C10780085557C34850"
  paths:
  - testPathName: "isAlphanumericWhenIsEmptyCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3364
      expression: "isEmpty(cs)"
      range: "(3364,13)-(3364,23)"
      evaluatedAs: true
  - testPathName: "isAlphanumericWhenCharacterNotIsLetterOrDigitCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3364
      expression: "isEmpty(cs)"
      range: "(3364,13)-(3364,23)"
      evaluatedAs: false
    - lineNumber: 3368
      expression: "i < sz"
      range: "(3368,25)-(3368,30)"
      evaluatedAs: true
    - lineNumber: 3369
      expression: "!Character.isLetterOrDigit(cs.charAt(i))"
      range: "(3369,17)-(3369,56)"
      evaluatedAs: true
  - testPathName: "isAlphanumericWhenCharacterIsLetterOrDigitCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3364
      expression: "isEmpty(cs)"
      range: "(3364,13)-(3364,23)"
      evaluatedAs: false
    - lineNumber: 3368
      expression: "i < sz"
      range: "(3368,25)-(3368,30)"
      evaluatedAs: true
    - lineNumber: 3369
      expression: "!Character.isLetterOrDigit(cs.charAt(i))"
      range: "(3369,17)-(3369,56)"
      evaluatedAs: false
- method:
    name: "isAlphanumericSpace"
    sourceCodeSignature: "boolean isAlphanumericSpace(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "CD4D15D4D533D4DD9284FE35A095E2F9"
  paths:
  - testPathName: "isAlphanumericSpaceWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3399
      expression: "cs == null"
      range: "(3399,13)-(3399,22)"
      evaluatedAs: true
  - testPathName: "isAlphanumericSpaceWhenCharacterNotIsLetterOrDigitNowChar"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3399
      expression: "cs == null"
      range: "(3399,13)-(3399,22)"
      evaluatedAs: false
    - lineNumber: 3403
      expression: "i < sz"
      range: "(3403,25)-(3403,30)"
      evaluatedAs: true
    - lineNumber: 3405
      expression: "nowChar != ' '"
      range: "(3405,17)-(3405,30)"
      evaluatedAs: true
    - lineNumber: 3405
      expression: "!Character.isLetterOrDigit(nowChar)"
      range: "(3405,35)-(3405,69)"
      evaluatedAs: true
  - testPathName: "isAlphanumericSpaceWhenCharacterIsLetterOrDigitNowChar"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3399
      expression: "cs == null"
      range: "(3399,13)-(3399,22)"
      evaluatedAs: false
    - lineNumber: 3403
      expression: "i < sz"
      range: "(3403,25)-(3403,30)"
      evaluatedAs: true
    - lineNumber: 3405
      expression: "nowChar != ' '"
      range: "(3405,17)-(3405,30)"
      evaluatedAs: true
    - lineNumber: 3405
      expression: "!Character.isLetterOrDigit(nowChar)"
      range: "(3405,35)-(3405,69)"
      evaluatedAs: false
- method:
    name: "isAlphaSpace"
    sourceCodeSignature: "boolean isAlphaSpace(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "A1513C0EA8DA7824003FC941495AE0E2"
  paths:
  - testPathName: "isAlphaSpaceWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3435
      expression: "cs == null"
      range: "(3435,13)-(3435,22)"
      evaluatedAs: true
  - testPathName: "isAlphaSpaceWhenCharacterNotIsLetterNowChar"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3435
      expression: "cs == null"
      range: "(3435,13)-(3435,22)"
      evaluatedAs: false
    - lineNumber: 3439
      expression: "i < sz"
      range: "(3439,25)-(3439,30)"
      evaluatedAs: true
    - lineNumber: 3441
      expression: "nowChar != ' '"
      range: "(3441,17)-(3441,30)"
      evaluatedAs: true
    - lineNumber: 3441
      expression: "!Character.isLetter(nowChar)"
      range: "(3441,35)-(3441,62)"
      evaluatedAs: true
  - testPathName: "isAlphaSpaceWhenCharacterIsLetterNowChar"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3435
      expression: "cs == null"
      range: "(3435,13)-(3435,22)"
      evaluatedAs: false
    - lineNumber: 3439
      expression: "i < sz"
      range: "(3439,25)-(3439,30)"
      evaluatedAs: true
    - lineNumber: 3441
      expression: "nowChar != ' '"
      range: "(3441,17)-(3441,30)"
      evaluatedAs: true
    - lineNumber: 3441
      expression: "!Character.isLetter(nowChar)"
      range: "(3441,35)-(3441,62)"
      evaluatedAs: false
- method:
    name: "isAnyBlank"
    sourceCodeSignature: "boolean isAnyBlank(final CharSequence... css)"
    returnType: "boolean"
    parameters:
    - name: "css"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "585DB7CC8BA3E52E32962BA8F8C2CAAB"
  paths:
  - testPathName: "isAnyBlankWhenArrayUtilsIsEmptyCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3472
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3472,13)-(3472,35)"
      evaluatedAs: true
  - testPathName: "isAnyBlankWhenIsBlankCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3472
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3472,13)-(3472,35)"
      evaluatedAs: false
    - lineNumber: 3475
      expression: "for-each(css)"
      range: "(3475,38)-(3475,40)"
      evaluatedAs: true
    - lineNumber: 3476
      expression: "isBlank(cs)"
      range: "(3476,17)-(3476,27)"
      evaluatedAs: true
  - testPathName: "isAnyBlankWhenIsBlankNotCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3472
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3472,13)-(3472,35)"
      evaluatedAs: false
    - lineNumber: 3475
      expression: "for-each(css)"
      range: "(3475,38)-(3475,40)"
      evaluatedAs: true
    - lineNumber: 3476
      expression: "isBlank(cs)"
      range: "(3476,17)-(3476,27)"
      evaluatedAs: false
- method:
    name: "isAnyEmpty"
    sourceCodeSignature: "boolean isAnyEmpty(final CharSequence... css)"
    returnType: "boolean"
    parameters:
    - name: "css"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "F7D4D0B16ED6974CE8D698803FBAF141"
  paths:
  - testPathName: "isAnyEmptyWhenArrayUtilsIsEmptyCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3504
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3504,13)-(3504,35)"
      evaluatedAs: true
  - testPathName: "isAnyEmptyWhenIsEmptyCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3504
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3504,13)-(3504,35)"
      evaluatedAs: false
    - lineNumber: 3507
      expression: "for-each(css)"
      range: "(3507,38)-(3507,40)"
      evaluatedAs: true
    - lineNumber: 3508
      expression: "isEmpty(cs)"
      range: "(3508,17)-(3508,27)"
      evaluatedAs: true
  - testPathName: "isAnyEmptyWhenIsEmptyNotCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(charSequence):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3504
      expression: "ArrayUtils.isEmpty(css)"
      range: "(3504,13)-(3504,35)"
      evaluatedAs: false
    - lineNumber: 3507
      expression: "for-each(css)"
      range: "(3507,38)-(3507,40)"
      evaluatedAs: true
    - lineNumber: 3508
      expression: "isEmpty(cs)"
      range: "(3508,17)-(3508,27)"
      evaluatedAs: false
- method:
    name: "isAsciiPrintable"
    sourceCodeSignature: "boolean isAsciiPrintable(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "DDD274EE5513348B08366E546242EB48"
  paths:
  - testPathName: "isAsciiPrintableWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3542
      expression: "cs == null"
      range: "(3542,13)-(3542,22)"
      evaluatedAs: true
  - testPathName: "isAsciiPrintableWhenCharUtilsNotIsAsciiPrintableCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3542
      expression: "cs == null"
      range: "(3542,13)-(3542,22)"
      evaluatedAs: false
    - lineNumber: 3546
      expression: "i < sz"
      range: "(3546,25)-(3546,30)"
      evaluatedAs: true
    - lineNumber: 3547
      expression: "!CharUtils.isAsciiPrintable(cs.charAt(i))"
      range: "(3547,17)-(3547,57)"
      evaluatedAs: true
  - testPathName: "isAsciiPrintableWhenCharUtilsIsAsciiPrintableCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3542
      expression: "cs == null"
      range: "(3542,13)-(3542,22)"
      evaluatedAs: false
    - lineNumber: 3546
      expression: "i < sz"
      range: "(3546,25)-(3546,30)"
      evaluatedAs: true
    - lineNumber: 3547
      expression: "!CharUtils.isAsciiPrintable(cs.charAt(i))"
      range: "(3547,17)-(3547,57)"
      evaluatedAs: false
- method:
    name: "isBlank"
    sourceCodeSignature: "boolean isBlank(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "3D7EAAD6740F4685520ABD28C7586FE4"
  paths:
  - testPathName: "isBlankWhenStrLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(cs):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3574
      expression: "strLen == 0"
      range: "(3574,13)-(3574,23)"
      evaluatedAs: true
  - testPathName: "isBlankWhenCharacterNotIsWhitespaceCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(cs):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3574
      expression: "strLen == 0"
      range: "(3574,13)-(3574,23)"
      evaluatedAs: false
    - lineNumber: 3577
      expression: "i < strLen"
      range: "(3577,25)-(3577,34)"
      evaluatedAs: true
    - lineNumber: 3578
      expression: "!Character.isWhitespace(cs.charAt(i))"
      range: "(3578,17)-(3578,53)"
      evaluatedAs: true
  - testPathName: "isBlankWhenCharacterIsWhitespaceCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(cs):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.charAt(int) : char"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3574
      expression: "strLen == 0"
      range: "(3574,13)-(3574,23)"
      evaluatedAs: false
    - lineNumber: 3577
      expression: "i < strLen"
      range: "(3577,25)-(3577,34)"
      evaluatedAs: true
    - lineNumber: 3578
      expression: "!Character.isWhitespace(cs.charAt(i))"
      range: "(3578,17)-(3578,53)"
      evaluatedAs: false
- method:
    name: "isEmpty"
    sourceCodeSignature: "boolean isEmpty(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "AD3AD30D88506AD315B618EC856019D8"
  paths:
  - testPathName: "isEmptyWhenCsLengthEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3605
      expression: "cs == null"
      range: "(3605,16)-(3605,25)"
      evaluatedAs: false
    - lineNumber: 3605
      expression: "cs.length() == 0"
      range: "(3605,30)-(3605,45)"
      evaluatedAs: true
  - testPathName: "isEmptyWhenCsLengthNotEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3605
      expression: "cs == null"
      range: "(3605,16)-(3605,25)"
      evaluatedAs: false
    - lineNumber: 3605
      expression: "cs.length() == 0"
      range: "(3605,30)-(3605,45)"
      evaluatedAs: false
- method:
    name: "isMixedCase"
    sourceCodeSignature: "boolean isMixedCase(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "553EB5DDF0A1789C343FE4453DE32484"
  paths:
  - testPathName: "isMixedCaseWhenCsLengthEquals1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3632
      expression: "isEmpty(cs)"
      range: "(3632,13)-(3632,23)"
      evaluatedAs: false
    - lineNumber: 3632
      expression: "cs.length() == 1"
      range: "(3632,28)-(3632,43)"
      evaluatedAs: true
  - testPathName: "isMixedCaseWhenNotContainsUppercase"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3632
      expression: "isEmpty(cs)"
      range: "(3632,13)-(3632,23)"
      evaluatedAs: false
    - lineNumber: 3632
      expression: "cs.length() == 1"
      range: "(3632,28)-(3632,43)"
      evaluatedAs: false
    - lineNumber: 3638
      expression: "i < sz"
      range: "(3638,25)-(3638,30)"
      evaluatedAs: true
    - lineNumber: 3640
      expression: "Character.isUpperCase(nowChar)"
      range: "(3640,17)-(3640,46)"
      evaluatedAs: false
    - lineNumber: 3642
      expression: "Character.isLowerCase(nowChar)"
      range: "(3642,24)-(3642,53)"
      evaluatedAs: true
    - lineNumber: 3645
      expression: "containsUppercase"
      range: "(3645,17)-(3645,33)"
      evaluatedAs: false
- method:
    name: "isNoneBlank"
    sourceCodeSignature: "boolean isNoneBlank(final CharSequence... css)"
    returnType: "boolean"
    parameters:
    - name: "css"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "AC4FE85306E61A56D14AABD64409103D"
  paths:
  - testPathName: "isNoneBlankWhenIsAnyBlankNotCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyBlank(css):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3676
      expression: "!isAnyBlank(css)"
      range: "(3676,14)-(3676,29)"
      evaluatedAs: true
  - testPathName: "isNoneBlankWhenIsAnyBlankCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyBlank(css):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3676
      expression: "!isAnyBlank(css)"
      range: "(3676,14)-(3676,29)"
      evaluatedAs: false
- method:
    name: "isNoneEmpty"
    sourceCodeSignature: "boolean isNoneEmpty(final CharSequence... css)"
    returnType: "boolean"
    parameters:
    - name: "css"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "61126CDDEC65B25D6D785A1AE2361A0F"
  paths:
  - testPathName: "isNoneEmptyWhenIsAnyEmptyNotCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(css):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3700
      expression: "!isAnyEmpty(css)"
      range: "(3700,14)-(3700,29)"
      evaluatedAs: true
  - testPathName: "isNoneEmptyWhenIsAnyEmptyCss"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "css"
      valueUuid: "css"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isAnyEmpty(css):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "css"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3700
      expression: "!isAnyEmpty(css)"
      range: "(3700,14)-(3700,29)"
      evaluatedAs: false
- method:
    name: "isNotBlank"
    sourceCodeSignature: "boolean isNotBlank(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "351C04F58211E262FBABA9459D643E11"
  paths:
  - testPathName: "isNotBlankWhenIsBlankNotCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3723
      expression: "!isBlank(cs)"
      range: "(3723,16)-(3723,27)"
      evaluatedAs: true
  - testPathName: "isNotBlankWhenIsBlankCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isBlank(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3723
      expression: "!isBlank(cs)"
      range: "(3723,16)-(3723,27)"
      evaluatedAs: false
- method:
    name: "isNotEmpty"
    sourceCodeSignature: "boolean isNotEmpty(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "17B9609D7434E7930148B6CFF761442F"
  paths:
  - testPathName: "isNotEmptyWhenIsEmptyNotCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3742
      expression: "!isEmpty(cs)"
      range: "(3742,16)-(3742,27)"
      evaluatedAs: true
  - testPathName: "isNotEmptyWhenIsEmptyCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3742
      expression: "!isEmpty(cs)"
      range: "(3742,16)-(3742,27)"
      evaluatedAs: false
- method:
    name: "isNumeric"
    sourceCodeSignature: "boolean isNumeric(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "CC1EA0F014DFDA68A3F4C63480F9403E"
  paths:
  - testPathName: "isNumericWhenIsEmptyCs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3777
      expression: "isEmpty(cs)"
      range: "(3777,13)-(3777,23)"
      evaluatedAs: true
  - testPathName: "isNumericWhenCharacterNotIsDigitCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3777
      expression: "isEmpty(cs)"
      range: "(3777,13)-(3777,23)"
      evaluatedAs: false
    - lineNumber: 3781
      expression: "i < sz"
      range: "(3781,25)-(3781,30)"
      evaluatedAs: true
    - lineNumber: 3782
      expression: "!Character.isDigit(cs.charAt(i))"
      range: "(3782,17)-(3782,48)"
      evaluatedAs: true
  - testPathName: "isNumericWhenCharacterIsDigitCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(cs):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3777
      expression: "isEmpty(cs)"
      range: "(3777,13)-(3777,23)"
      evaluatedAs: false
    - lineNumber: 3781
      expression: "i < sz"
      range: "(3781,25)-(3781,30)"
      evaluatedAs: true
    - lineNumber: 3782
      expression: "!Character.isDigit(cs.charAt(i))"
      range: "(3782,17)-(3782,48)"
      evaluatedAs: false
- method:
    name: "isNumericSpace"
    sourceCodeSignature: "boolean isNumericSpace(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "EF6CD9B61AAAE3587B92843519275E8E"
  paths:
  - testPathName: "isNumericSpaceWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3816
      expression: "cs == null"
      range: "(3816,13)-(3816,22)"
      evaluatedAs: true
  - testPathName: "isNumericSpaceWhenCharacterNotIsDigitNowChar"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3816
      expression: "cs == null"
      range: "(3816,13)-(3816,22)"
      evaluatedAs: false
    - lineNumber: 3820
      expression: "i < sz"
      range: "(3820,25)-(3820,30)"
      evaluatedAs: true
    - lineNumber: 3822
      expression: "nowChar != ' '"
      range: "(3822,17)-(3822,30)"
      evaluatedAs: true
    - lineNumber: 3822
      expression: "!Character.isDigit(nowChar)"
      range: "(3822,35)-(3822,61)"
      evaluatedAs: true
  - testPathName: "isNumericSpaceWhenCharacterIsDigitNowChar"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3816
      expression: "cs == null"
      range: "(3816,13)-(3816,22)"
      evaluatedAs: false
    - lineNumber: 3820
      expression: "i < sz"
      range: "(3820,25)-(3820,30)"
      evaluatedAs: true
    - lineNumber: 3822
      expression: "nowChar != ' '"
      range: "(3822,17)-(3822,30)"
      evaluatedAs: true
    - lineNumber: 3822
      expression: "!Character.isDigit(nowChar)"
      range: "(3822,35)-(3822,61)"
      evaluatedAs: false
- method:
    name: "isWhitespace"
    sourceCodeSignature: "boolean isWhitespace(final CharSequence cs)"
    returnType: "boolean"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "F00D72E5A1996842F541D8159010DD85"
  paths:
  - testPathName: "isWhitespaceWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3852
      expression: "cs == null"
      range: "(3852,13)-(3852,22)"
      evaluatedAs: true
  - testPathName: "isWhitespaceWhenCharacterNotIsWhitespaceCsCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3852
      expression: "cs == null"
      range: "(3852,13)-(3852,22)"
      evaluatedAs: false
    - lineNumber: 3856
      expression: "i < sz"
      range: "(3856,25)-(3856,30)"
      evaluatedAs: true
    - lineNumber: 3857
      expression: "!Character.isWhitespace(cs.charAt(i))"
      range: "(3857,17)-(3857,53)"
      evaluatedAs: true
  - testPathName: "isWhitespaceWhenCharacterIsWhitespaceCsCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3852
      expression: "cs == null"
      range: "(3852,13)-(3852,22)"
      evaluatedAs: false
    - lineNumber: 3856
      expression: "i < sz"
      range: "(3856,25)-(3856,30)"
      evaluatedAs: true
    - lineNumber: 3857
      expression: "!Character.isWhitespace(cs.charAt(i))"
      range: "(3857,17)-(3857,53)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final boolean[] array, final char delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "boolean[]"
    - name: "delimiter"
      type: "char"
    instructionFingerprint: "8142D9781DE5C2245E37423470E4F0C6"
  paths:
  - testPathName: "joinWhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "boolean[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 3887
      expression: "array == null"
      range: "(3887,13)-(3887,25)"
      evaluatedAs: true
  - testPathName: "joinWhenArrayIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 3887
      expression: "array == null"
      range: "(3887,13)-(3887,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final boolean[] array, final char delimiter,\
      \ final int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "boolean[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "B6BD1186CA4146625D2B5CCB68A466A0"
  paths:
  - testPathName: "join1WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "boolean[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 3922
      expression: "array == null"
      range: "(3922,13)-(3922,25)"
      evaluatedAs: true
  - testPathName: "join1WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3922
      expression: "array == null"
      range: "(3922,13)-(3922,25)"
      evaluatedAs: false
    - lineNumber: 3925
      expression: "endIndex - startIndex <= 0"
      range: "(3925,13)-(3925,38)"
      evaluatedAs: true
  - testPathName: "join1WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean1"
      valueType: "boolean[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 3922
      expression: "array == null"
      range: "(3922,13)-(3922,25)"
      evaluatedAs: false
    - lineNumber: 3925
      expression: "endIndex - startIndex <= 0"
      range: "(3925,13)-(3925,38)"
      evaluatedAs: false
    - lineNumber: 3929
      expression: "i < endIndex"
      range: "(3929,34)-(3929,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "String join(final byte[] array, final char delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "byte[]"
    - name: "delimiter"
      type: "char"
    instructionFingerprint: "540823BEDB473211049257D994F246EC"
  paths:
  - testPathName: "join2WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "byte[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 3961
      expression: "array == null"
      range: "(3961,13)-(3961,25)"
      evaluatedAs: true
  - testPathName: "join2WhenArrayIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 3961
      expression: "array == null"
      range: "(3961,13)-(3961,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final byte[] array, final char delimiter, final\
      \ int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "byte[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "A32A11BC2A548C3888694F26438FD6E4"
  paths:
  - testPathName: "join3WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "byte[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 3997
      expression: "array == null"
      range: "(3997,13)-(3997,25)"
      evaluatedAs: true
  - testPathName: "join3WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 3997
      expression: "array == null"
      range: "(3997,13)-(3997,25)"
      evaluatedAs: false
    - lineNumber: 4000
      expression: "endIndex - startIndex <= 0"
      range: "(4000,13)-(4000,38)"
      evaluatedAs: true
  - testPathName: "join3WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 2
            valueType: "byte"
            uuid: "byte1"
      valueType: "byte[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 3997
      expression: "array == null"
      range: "(3997,13)-(3997,25)"
      evaluatedAs: false
    - lineNumber: 4000
      expression: "endIndex - startIndex <= 0"
      range: "(4000,13)-(4000,38)"
      evaluatedAs: false
    - lineNumber: 4004
      expression: "i < endIndex"
      range: "(4004,34)-(4004,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "String join(final char[] array, final char delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "char[]"
    - name: "delimiter"
      type: "char"
    instructionFingerprint: "050480D2BE77C590E9AB43A2A03705D5"
  paths:
  - testPathName: "join4WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4036
      expression: "array == null"
      range: "(4036,13)-(4036,25)"
      evaluatedAs: true
  - testPathName: "join4WhenArrayIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4036
      expression: "array == null"
      range: "(4036,13)-(4036,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final char[] array, final char delimiter, final\
      \ int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "char[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "EDD167EB2BF14D70BB12F52503512C66"
  paths:
  - testPathName: "join5WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4072
      expression: "array == null"
      range: "(4072,13)-(4072,25)"
      evaluatedAs: true
  - testPathName: "join5WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4072
      expression: "array == null"
      range: "(4072,13)-(4072,25)"
      evaluatedAs: false
    - lineNumber: 4075
      expression: "endIndex - startIndex <= 0"
      range: "(4075,13)-(4075,38)"
      evaluatedAs: true
  - testPathName: "join5WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "char1"
      valueType: "char[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4072
      expression: "array == null"
      range: "(4072,13)-(4072,25)"
      evaluatedAs: false
    - lineNumber: 4075
      expression: "endIndex - startIndex <= 0"
      range: "(4075,13)-(4075,38)"
      evaluatedAs: false
    - lineNumber: 4079
      expression: "i < endIndex"
      range: "(4079,34)-(4079,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "String join(final double[] array, final char delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "double[]"
    - name: "delimiter"
      type: "char"
    instructionFingerprint: "3DA2B37218881A1520FB6EC941053545"
  paths:
  - testPathName: "join6WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "double[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4111
      expression: "array == null"
      range: "(4111,13)-(4111,25)"
      evaluatedAs: true
  - testPathName: "join6WhenArrayIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "double[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4111
      expression: "array == null"
      range: "(4111,13)-(4111,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final double[] array, final char delimiter,\
      \ final int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "double[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "CE60FEE11BDAC253907E5FA0D791F41B"
  paths:
  - testPathName: "join7WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "double[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4147
      expression: "array == null"
      range: "(4147,13)-(4147,25)"
      evaluatedAs: true
  - testPathName: "join7WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "double[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4147
      expression: "array == null"
      range: "(4147,13)-(4147,25)"
      evaluatedAs: false
    - lineNumber: 4150
      expression: "endIndex - startIndex <= 0"
      range: "(4150,13)-(4150,38)"
      evaluatedAs: true
  - testPathName: "join7WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 1.0
            valueType: "double"
            uuid: "double1"
      valueType: "double[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4147
      expression: "array == null"
      range: "(4147,13)-(4147,25)"
      evaluatedAs: false
    - lineNumber: 4150
      expression: "endIndex - startIndex <= 0"
      range: "(4150,13)-(4150,38)"
      evaluatedAs: false
    - lineNumber: 4154
      expression: "i < endIndex"
      range: "(4154,34)-(4154,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "String join(final float[] array, final char delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "float[]"
    - name: "delimiter"
      type: "char"
    instructionFingerprint: "89FBB6D6D166A509BEDE1E2CAB1CB0D9"
  paths:
  - testPathName: "join8WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "float[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4186
      expression: "array == null"
      range: "(4186,13)-(4186,25)"
      evaluatedAs: true
  - testPathName: "join8WhenArrayIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "float[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4186
      expression: "array == null"
      range: "(4186,13)-(4186,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final float[] array, final char delimiter, final\
      \ int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "float[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "4FD6167B4F088F858BFB3131BE0DD5DD"
  paths:
  - testPathName: "join9WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "float[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4222
      expression: "array == null"
      range: "(4222,13)-(4222,25)"
      evaluatedAs: true
  - testPathName: "join9WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "float[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4222
      expression: "array == null"
      range: "(4222,13)-(4222,25)"
      evaluatedAs: false
    - lineNumber: 4225
      expression: "endIndex - startIndex <= 0"
      range: "(4225,13)-(4225,38)"
      evaluatedAs: true
  - testPathName: "join9WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 1.0
            valueType: "float"
            uuid: "float1"
      valueType: "float[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4222
      expression: "array == null"
      range: "(4222,13)-(4222,25)"
      evaluatedAs: false
    - lineNumber: 4225
      expression: "endIndex - startIndex <= 0"
      range: "(4225,13)-(4225,38)"
      evaluatedAs: false
    - lineNumber: 4229
      expression: "i < endIndex"
      range: "(4229,34)-(4229,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "String join(final int[] array, final char separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "int[]"
    - name: "separator"
      type: "char"
    instructionFingerprint: "8780AC3A88A6F4B26E691825589693F0"
  paths:
  - testPathName: "join10WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "int[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4261
      expression: "array == null"
      range: "(4261,13)-(4261,25)"
      evaluatedAs: true
  - testPathName: "join10WhenArrayIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,separator,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4261
      expression: "array == null"
      range: "(4261,13)-(4261,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final int[] array, final char delimiter, final\
      \ int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "int[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "0721D75B4C5F24DD4CA63683DDC49229"
  paths:
  - testPathName: "join11WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "int[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4297
      expression: "array == null"
      range: "(4297,13)-(4297,25)"
      evaluatedAs: true
  - testPathName: "join11WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4297
      expression: "array == null"
      range: "(4297,13)-(4297,25)"
      evaluatedAs: false
    - lineNumber: 4300
      expression: "endIndex - startIndex <= 0"
      range: "(4300,13)-(4300,38)"
      evaluatedAs: true
  - testPathName: "join11WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 2
            valueType: "int"
            uuid: "int2"
      valueType: "int[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4297
      expression: "array == null"
      range: "(4297,13)-(4297,25)"
      evaluatedAs: false
    - lineNumber: 4300
      expression: "endIndex - startIndex <= 0"
      range: "(4300,13)-(4300,38)"
      evaluatedAs: false
    - lineNumber: 4304
      expression: "i < endIndex"
      range: "(4304,34)-(4304,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "String join(final Iterable<?> iterable, final char separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "iterable"
      type: "java.lang.Iterable"
      genericType: "?"
    - name: "separator"
      type: "char"
    instructionFingerprint: "B4D68EEED2A8AF00861D681C9E93C15F"
  paths:
  - testPathName: "join12WhenIterableIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "iterable"
      valueUuid: "iterable"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(iterator-any,separator):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "?"
      uuid: "iterable"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator-any"
    branches:
    - lineNumber: 4327
      expression: "iterable != null"
      range: "(4327,16)-(4327,31)"
      evaluatedAs: true
  - testPathName: "join12WhenIterableIsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "iterable"
      valueUuid: "iterable"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Iterable"
      genericValueType: "?"
      uuid: "iterable"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4327
      expression: "iterable != null"
      range: "(4327,16)-(4327,31)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final Iterable<?> iterable, final String separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "iterable"
      type: "java.lang.Iterable"
      genericType: "?"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "63F60DD5D1B46017B6D814DE62A9A101"
  paths:
  - testPathName: "join13WhenIterableIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "iterable"
      valueUuid: "iterable"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(iterator-any,separator):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "?"
      uuid: "iterable"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator-any"
    branches:
    - lineNumber: 4345
      expression: "iterable != null"
      range: "(4345,16)-(4345,31)"
      evaluatedAs: true
  - testPathName: "join13WhenIterableIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "iterable"
      valueUuid: "iterable"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Iterable"
      genericValueType: "?"
      uuid: "iterable"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4345
      expression: "iterable != null"
      range: "(4345,16)-(4345,31)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final Iterator<?> iterator, final char separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "iterator"
      type: "java.util.Iterator"
      genericType: "?"
    - name: "separator"
      type: "char"
    instructionFingerprint: "9D7AB69FD15A3659AAF2C24D0F6EE23A"
  paths:
  - testPathName: "join14WhenIteratorIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "iterator"
      valueUuid: "iterator"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4364
      expression: "iterator == null"
      range: "(4364,13)-(4364,28)"
      evaluatedAs: true
  - testPathName: "join14WhenIteratorNotHasNext"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "iterator"
      valueUuid: "iterator"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "?"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4364
      expression: "iterator == null"
      range: "(4364,13)-(4364,28)"
      evaluatedAs: false
    - lineNumber: 4367
      expression: "!iterator.hasNext()"
      range: "(4367,13)-(4367,31)"
      evaluatedAs: true
  - testPathName: "join14WhenIteratorHasNext"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "iterator"
      valueUuid: "iterator"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "object2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.stream.Streams.of(java.util.Iterator<?>)\
        \ : java.util.stream.Stream<?>"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<new>
                target: "java.lang.Object"
                parameters: []
              valueType: "java.lang.Object"
              uuid: "iterator-CollectionContentItem0"
          valueType: "java.util.List"
          genericValueType: "?"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "object2"
    branches:
    - lineNumber: 4364
      expression: "iterator == null"
      range: "(4364,13)-(4364,28)"
      evaluatedAs: false
    - lineNumber: 4367
      expression: "!iterator.hasNext()"
      range: "(4367,13)-(4367,31)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "join"
    sourceCodeSignature: "String join(final Iterator<?> iterator, final String separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "iterator"
      type: "java.util.Iterator"
      genericType: "?"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "8F3EED8E21779C05BDB1A5A7B43352AB"
  paths:
  - testPathName: "join15WhenIteratorIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "iterator"
      valueUuid: "iterator"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4388
      expression: "iterator == null"
      range: "(4388,13)-(4388,28)"
      evaluatedAs: true
  - testPathName: "join15WhenIteratorNotHasNext"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "iterator"
      valueUuid: "iterator"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "?"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4388
      expression: "iterator == null"
      range: "(4388,13)-(4388,28)"
      evaluatedAs: false
    - lineNumber: 4391
      expression: "!iterator.hasNext()"
      range: "(4391,13)-(4391,31)"
      evaluatedAs: true
  - testPathName: "join15WhenIteratorHasNext"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "iterator"
      valueUuid: "iterator"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "object2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.stream.Streams.of(java.util.Iterator<?>)\
        \ : java.util.stream.Stream<?>"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<new>
                target: "java.lang.Object"
                parameters: []
              valueType: "java.lang.Object"
              uuid: "iterator-CollectionContentItem0"
          valueType: "java.util.List"
          genericValueType: "?"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "object2"
    branches:
    - lineNumber: 4388
      expression: "iterator == null"
      range: "(4388,13)-(4388,28)"
      evaluatedAs: false
    - lineNumber: 4391
      expression: "!iterator.hasNext()"
      range: "(4391,13)-(4391,31)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "join"
    sourceCodeSignature: "String join(final List<?> list, final char separator, final\
      \ int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "list"
      type: "java.util.List"
      genericType: "?"
    - name: "separator"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "E26E0DE03EB75D317B311D139E2C92D5"
  paths:
  - testPathName: "join16WhenListIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "list"
      valueUuid: "list"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "?"
      uuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4424
      expression: "list == null"
      range: "(4424,13)-(4424,24)"
      evaluatedAs: true
  - testPathName: "join16WhenNoOfItemsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "list"
      valueUuid: "list"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "?"
      uuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4424
      expression: "list == null"
      range: "(4424,13)-(4424,24)"
      evaluatedAs: false
    - lineNumber: 4428
      expression: "noOfItems <= 0"
      range: "(4428,13)-(4428,26)"
      evaluatedAs: true
  - testPathName: "join16WhenNoOfItemsGreaterThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "list"
      valueUuid: "list"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(iterator-any,separator):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "java.lang.Object"
            parameters: []
          valueType: "java.lang.Object"
          uuid: "listItem0"
      valueType: "java.util.List"
      genericValueType: "?"
      uuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator-any"
    branches:
    - lineNumber: 4424
      expression: "list == null"
      range: "(4424,13)-(4424,24)"
      evaluatedAs: false
    - lineNumber: 4428
      expression: "noOfItems <= 0"
      range: "(4428,13)-(4428,26)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final List<?> list, final String separator,\
      \ final int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "list"
      type: "java.util.List"
      genericType: "?"
    - name: "separator"
      type: "java.lang.String"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "9652B2307E948350E4F4319ABE5478BF"
  paths:
  - testPathName: "join17WhenListIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "list"
      valueUuid: "list"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "?"
      uuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4462
      expression: "list == null"
      range: "(4462,13)-(4462,24)"
      evaluatedAs: true
  - testPathName: "join17WhenNoOfItemsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "list"
      valueUuid: "list"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "?"
      uuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4462
      expression: "list == null"
      range: "(4462,13)-(4462,24)"
      evaluatedAs: false
    - lineNumber: 4466
      expression: "noOfItems <= 0"
      range: "(4466,13)-(4466,26)"
      evaluatedAs: true
  - testPathName: "join17WhenNoOfItemsGreaterThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "list"
      valueUuid: "list"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(iterator-any,separator):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "java.lang.Object"
            parameters: []
          valueType: "java.lang.Object"
          uuid: "listItem0"
      valueType: "java.util.List"
      genericValueType: "?"
      uuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "java.util.Iterator"
      genericValueType: "?"
      uuid: "iterator-any"
    branches:
    - lineNumber: 4462
      expression: "list == null"
      range: "(4462,13)-(4462,24)"
      evaluatedAs: false
    - lineNumber: 4466
      expression: "noOfItems <= 0"
      range: "(4466,13)-(4466,26)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final long[] array, final char separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "long[]"
    - name: "separator"
      type: "char"
    instructionFingerprint: "484A20DE6E811E5B9593ACEF4C86DB11"
  paths:
  - testPathName: "join18WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "long[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4498
      expression: "array == null"
      range: "(4498,13)-(4498,25)"
      evaluatedAs: true
  - testPathName: "join18WhenArrayIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,separator,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "long[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4498
      expression: "array == null"
      range: "(4498,13)-(4498,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final long[] array, final char delimiter, final\
      \ int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "long[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "9C0A2EA579989620E01C7086E66E3170"
  paths:
  - testPathName: "join19WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "long[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4534
      expression: "array == null"
      range: "(4534,13)-(4534,25)"
      evaluatedAs: true
  - testPathName: "join19WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "long[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4534
      expression: "array == null"
      range: "(4534,13)-(4534,25)"
      evaluatedAs: false
    - lineNumber: 4537
      expression: "endIndex - startIndex <= 0"
      range: "(4537,13)-(4537,38)"
      evaluatedAs: true
  - testPathName: "join19WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 2
            valueType: "long"
            uuid: "long1"
      valueType: "long[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4534
      expression: "array == null"
      range: "(4534,13)-(4534,25)"
      evaluatedAs: false
    - lineNumber: 4537
      expression: "endIndex - startIndex <= 0"
      range: "(4537,13)-(4537,38)"
      evaluatedAs: false
    - lineNumber: 4541
      expression: "i < endIndex"
      range: "(4541,34)-(4541,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "String join(final Object[] array, final char delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "java.lang.Object[]"
    - name: "delimiter"
      type: "char"
    instructionFingerprint: "AE9246344898E416987246239AE72144"
  paths:
  - testPathName: "join20WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4572
      expression: "array == null"
      range: "(4572,13)-(4572,25)"
      evaluatedAs: true
  - testPathName: "join20WhenArrayIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4572
      expression: "array == null"
      range: "(4572,13)-(4572,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final Object[] array, final char delimiter,\
      \ final int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "java.lang.Object[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "A76CBC00A5D3448E892DDF56D1861D74"
  paths:
  - testPathName: "join21Test"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,string,startIndex,endIndex):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "join"
    sourceCodeSignature: "String join(final Object[] array, final String delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "java.lang.Object[]"
    - name: "delimiter"
      type: "java.lang.String"
    instructionFingerprint: "6547AE1CA58574CB430832C2CAD0A394"
  paths:
  - testPathName: "join22WhenArrayIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,string,startIndex,int1):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4632
      expression: "array != null"
      range: "(4632,16)-(4632,28)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "join22WhenArrayIsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "delimiter1"
      valueType: "java.lang.String"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4632
      expression: "array != null"
      range: "(4632,16)-(4632,28)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final Object[] array, final String delimiter,\
      \ final int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "java.lang.Object[]"
    - name: "delimiter"
      type: "java.lang.String"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "B99AA0EDB58CF3EA41157A2E5A4020B0"
  paths:
  - testPathName: "join23WhenArrayIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "object2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.stream.Streams.of(java.lang.Object[])\
        \ : java.util.stream.Stream<java.lang.Object>"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "delimiter1"
      valueType: "java.lang.String"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "object2"
    branches:
    - lineNumber: 4671
      expression: "array != null"
      range: "(4671,16)-(4671,28)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "join23WhenArrayIsNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "delimiter1"
      valueType: "java.lang.String"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4671
      expression: "array != null"
      range: "(4671,16)-(4671,28)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final short[] array, final char delimiter)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "short[]"
    - name: "delimiter"
      type: "char"
    instructionFingerprint: "D68509188217C9504D42AF56BCF05E04"
  paths:
  - testPathName: "join24WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "short[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4699
      expression: "array == null"
      range: "(4699,13)-(4699,25)"
      evaluatedAs: true
  - testPathName: "join24WhenArrayIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter,startIndex,int1):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4699
      expression: "array == null"
      range: "(4699,13)-(4699,25)"
      evaluatedAs: false
- method:
    name: "join"
    sourceCodeSignature: "String join(final short[] array, final char delimiter, final\
      \ int startIndex, final int endIndex)"
    returnType: "java.lang.String"
    parameters:
    - name: "array"
      type: "short[]"
    - name: "delimiter"
      type: "char"
    - name: "startIndex"
      type: "int"
    - name: "endIndex"
      type: "int"
    instructionFingerprint: "6E82D5E1148F383F5C9040CF50E4AC5A"
  paths:
  - testPathName: "join25WhenArrayIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "short[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4735
      expression: "array == null"
      range: "(4735,13)-(4735,25)"
      evaluatedAs: true
  - testPathName: "join25WhenEndIndexMinusStartIndexLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4735
      expression: "array == null"
      range: "(4735,13)-(4735,25)"
      evaluatedAs: false
    - lineNumber: 4738
      expression: "endIndex - startIndex <= 0"
      range: "(4738,13)-(4738,38)"
      evaluatedAs: true
  - testPathName: "join25WhenILessThanEndIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "startIndex"
      valueUuid: "startIndex"
    - type: "INPUT"
      name: "endIndex"
      valueUuid: "endIndex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.substring(int,int) : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 2
            valueType: "short"
            uuid: "short1"
      valueType: "short[]"
      uuid: "array"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "delimiter"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "endIndex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4735
      expression: "array == null"
      range: "(4735,13)-(4735,25)"
      evaluatedAs: false
    - lineNumber: 4738
      expression: "endIndex - startIndex <= 0"
      range: "(4738,13)-(4738,38)"
      evaluatedAs: false
    - lineNumber: 4742
      expression: "i < endIndex"
      range: "(4742,34)-(4742,45)"
      evaluatedAs: true
- method:
    name: "join"
    sourceCodeSignature: "<T> String join(final T... elements)"
    returnType: "java.lang.String"
    parameters:
    - name: "elements"
      type: "java.lang.Object[]"
    instructionFingerprint: "4C4C49352AD1BB42C8438CC4F8FACB18"
  paths:
  - testPathName: "join26Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "elements"
      valueUuid: "elements1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(elements1,delimiter):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "elements1"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "delimiter"
- method:
    name: "joinWith"
    sourceCodeSignature: "String joinWith(final String delimiter, final Object...\
      \ array)"
    returnType: "java.lang.String"
    parameters:
    - name: "delimiter"
      type: "java.lang.String"
    - name: "array"
      type: "java.lang.Object[]"
    instructionFingerprint: "2963FBADF4A9A1928729665E534F7D79"
  paths:
  - testPathName: "joinWithWhenArrayIsNullThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "delimiter1"
      valueType: "java.lang.String"
      uuid: "delimiter"
    - sapientType: "NULL"
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Object varargs must not be null"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 4798
      expression: "array == null"
      range: "(4798,13)-(4798,25)"
      evaluatedAs: true
  - testPathName: "joinWithWhenArrayIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "delimiter"
      valueUuid: "delimiter"
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(array,delimiter):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "delimiter1"
      valueType: "java.lang.String"
      uuid: "delimiter"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "array"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 4798
      expression: "array == null"
      range: "(4798,13)-(4798,25)"
      evaluatedAs: false
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final CharSequence seq, final CharSequence\
      \ searchSeq)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchSeq"
      type: "java.lang.CharSequence"
    instructionFingerprint: "E5E76838F33766804519F60BFBBDFD61"
  paths:
  - testPathName: "lastIndexOfWhenSeqIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchSeq1"
      valueType: "java.lang.String"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4828
      expression: "seq == null"
      range: "(4828,13)-(4828,23)"
      evaluatedAs: true
  - testPathName: "lastIndexOfWhenSeqIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchSeq1"
      valueType: "java.lang.String"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 4828
      expression: "seq == null"
      range: "(4828,13)-(4828,23)"
      evaluatedAs: false
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final CharSequence seq, final CharSequence\
      \ searchSeq, final int startPos)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchSeq"
      type: "java.lang.CharSequence"
    - name: "startPos"
      type: "int"
    instructionFingerprint: "6A5E3AAE10C615B5817FAE2D17A66E7F"
  paths:
  - testPathName: "lastIndexOf1Test"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchSeq"
      valueUuid: "searchSeq"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)\
        \ : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchSeq1"
      valueType: "java.lang.String"
      uuid: "searchSeq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final CharSequence seq, final int searchChar)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchChar"
      type: "int"
    instructionFingerprint: "8855FE8E7B6F1DF89E9CA918B2A4ED41"
  paths:
  - testPathName: "lastIndexOf2WhenIsEmptySeq"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4908
      expression: "isEmpty(seq)"
      range: "(4908,13)-(4908,24)"
      evaluatedAs: true
  - testPathName: "lastIndexOf2WhenIsEmptyNotSeq"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 4908
      expression: "isEmpty(seq)"
      range: "(4908,13)-(4908,24)"
      evaluatedAs: false
- method:
    name: "lastIndexOf"
    sourceCodeSignature: "int lastIndexOf(final CharSequence seq, final int searchChar,\
      \ final int startPos)"
    returnType: "int"
    parameters:
    - name: "seq"
      type: "java.lang.CharSequence"
    - name: "searchChar"
      type: "int"
    - name: "startPos"
      type: "int"
    instructionFingerprint: "F1F81C2A808C2B8004EC81D7633EA39B"
  paths:
  - testPathName: "lastIndexOf3WhenIsEmptySeq"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4959
      expression: "isEmpty(seq)"
      range: "(4959,13)-(4959,24)"
      evaluatedAs: true
  - testPathName: "lastIndexOf3WhenIsEmptyNotSeq"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "seq"
      valueUuid: "seq"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(seq):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(java.lang.CharSequence,int,int)\
        \ : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "seq1"
      valueType: "java.lang.String"
      uuid: "seq"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "searchChar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4959
      expression: "isEmpty(seq)"
      range: "(4959,13)-(4959,24)"
      evaluatedAs: false
- method:
    name: "lastIndexOfAny"
    sourceCodeSignature: "int lastIndexOfAny(final CharSequence str, final CharSequence...\
      \ searchStrs)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStrs"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "2CD17DAF1C48A53AF9EE681C71C5E235"
  paths:
  - testPathName: "lastIndexOfAnyWhenSearchStrsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStrs"
      valueUuid: "searchStrs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrs"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 4992
      expression: "str == null"
      range: "(4992,13)-(4992,23)"
      evaluatedAs: false
    - lineNumber: 4992
      expression: "searchStrs == null"
      range: "(4992,28)-(4992,45)"
      evaluatedAs: true
  - testPathName: "lastIndexOfAnyWhenSearchIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStrs"
      valueUuid: "searchStrs"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrs"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 4992
      expression: "str == null"
      range: "(4992,13)-(4992,23)"
      evaluatedAs: false
    - lineNumber: 4992
      expression: "searchStrs == null"
      range: "(4992,28)-(4992,45)"
      evaluatedAs: false
    - lineNumber: 4997
      expression: "for-each(searchStrs)"
      range: "(4997,42)-(4997,51)"
      evaluatedAs: true
    - lineNumber: 4998
      expression: "search == null"
      range: "(4998,17)-(4998,30)"
      evaluatedAs: true
  - testPathName: "lastIndexOfAnyWhenTmpGreaterThanRet"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStrs"
      valueUuid: "searchStrs"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrs"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 4992
      expression: "str == null"
      range: "(4992,13)-(4992,23)"
      evaluatedAs: false
    - lineNumber: 4992
      expression: "searchStrs == null"
      range: "(4992,28)-(4992,45)"
      evaluatedAs: false
    - lineNumber: 4997
      expression: "for-each(searchStrs)"
      range: "(4997,42)-(4997,51)"
      evaluatedAs: true
    - lineNumber: 4998
      expression: "search == null"
      range: "(4998,17)-(4998,30)"
      evaluatedAs: false
    - lineNumber: 5002
      expression: "tmp > ret"
      range: "(5002,17)-(5002,25)"
      evaluatedAs: true
- method:
    name: "lastIndexOfIgnoreCase"
    sourceCodeSignature: "int lastIndexOfIgnoreCase(final CharSequence str, final\
      \ CharSequence searchStr)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStr"
      type: "java.lang.CharSequence"
    instructionFingerprint: "120EC32B2CD92984B1ADFCCCC7BC55A1"
  paths:
  - testPathName: "lastIndexOfIgnoreCaseWhenSearchStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5033
      expression: "str == null"
      range: "(5033,13)-(5033,23)"
      evaluatedAs: false
    - lineNumber: 5033
      expression: "searchStr == null"
      range: "(5033,28)-(5033,44)"
      evaluatedAs: true
  - testPathName: "lastIndexOfIgnoreCaseWhenSearchStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "lastIndexOfIgnoreCase(str,searchStr,int1):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 4
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 5033
      expression: "str == null"
      range: "(5033,13)-(5033,23)"
      evaluatedAs: false
    - lineNumber: 5033
      expression: "searchStr == null"
      range: "(5033,28)-(5033,44)"
      evaluatedAs: false
- method:
    name: "lastIndexOfIgnoreCase"
    sourceCodeSignature: "int lastIndexOfIgnoreCase(final CharSequence str, final\
      \ CharSequence searchStr, int startPos)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStr"
      type: "java.lang.CharSequence"
    - name: "startPos"
      type: "int"
    instructionFingerprint: "803FAB80265A1F26D93C634F39476881"
  paths:
  - testPathName: "lastIndexOfIgnoreCase1WhenSearchStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5072
      expression: "str == null"
      range: "(5072,13)-(5072,23)"
      evaluatedAs: false
    - lineNumber: 5072
      expression: "searchStr == null"
      range: "(5072,28)-(5072,44)"
      evaluatedAs: true
  - testPathName: "lastIndexOfIgnoreCase1WhenStartPosLessThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5072
      expression: "str == null"
      range: "(5072,13)-(5072,23)"
      evaluatedAs: false
    - lineNumber: 5072
      expression: "searchStr == null"
      range: "(5072,28)-(5072,44)"
      evaluatedAs: false
    - lineNumber: 5077
      expression: "startPos > strLength - searchStrLength"
      range: "(5077,13)-(5077,50)"
      evaluatedAs: true
    - lineNumber: 5080
      expression: "startPos < 0"
      range: "(5080,13)-(5080,24)"
      evaluatedAs: true
  - testPathName: "lastIndexOfIgnoreCase1WhenSearchStrLengthEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "int4"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int4"
    branches:
    - lineNumber: 5072
      expression: "str == null"
      range: "(5072,13)-(5072,23)"
      evaluatedAs: false
    - lineNumber: 5072
      expression: "searchStr == null"
      range: "(5072,28)-(5072,44)"
      evaluatedAs: false
    - lineNumber: 5077
      expression: "startPos > strLength - searchStrLength"
      range: "(5077,13)-(5077,50)"
      evaluatedAs: true
    - lineNumber: 5080
      expression: "startPos < 0"
      range: "(5080,13)-(5080,24)"
      evaluatedAs: false
    - lineNumber: 5083
      expression: "searchStrLength == 0"
      range: "(5083,13)-(5083,32)"
      evaluatedAs: true
  - testPathName: "lastIndexOfIgnoreCase1WhenCharSequenceUtilsRegionMatchesStrTrueISearchStr0SearchStrLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "int4"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int4"
    branches:
    - lineNumber: 5072
      expression: "str == null"
      range: "(5072,13)-(5072,23)"
      evaluatedAs: false
    - lineNumber: 5072
      expression: "searchStr == null"
      range: "(5072,28)-(5072,44)"
      evaluatedAs: false
    - lineNumber: 5077
      expression: "startPos > strLength - searchStrLength"
      range: "(5077,13)-(5077,50)"
      evaluatedAs: true
    - lineNumber: 5080
      expression: "startPos < 0"
      range: "(5080,13)-(5080,24)"
      evaluatedAs: false
    - lineNumber: 5083
      expression: "searchStrLength == 0"
      range: "(5083,13)-(5083,32)"
      evaluatedAs: false
    - lineNumber: 5087
      expression: "i >= 0"
      range: "(5087,32)-(5087,37)"
      evaluatedAs: true
    - lineNumber: 5088
      expression: "CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStrLength)"
      range: "(5088,17)-(5088,92)"
      evaluatedAs: true
  - testPathName: "lastIndexOfIgnoreCase1WhenCharSequenceUtilsNotRegionMatchesStrTrueISearchStr0SearchStrLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "startPos"
      valueUuid: "startPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "startPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5072
      expression: "str == null"
      range: "(5072,13)-(5072,23)"
      evaluatedAs: false
    - lineNumber: 5072
      expression: "searchStr == null"
      range: "(5072,28)-(5072,44)"
      evaluatedAs: false
    - lineNumber: 5077
      expression: "startPos > strLength - searchStrLength"
      range: "(5077,13)-(5077,50)"
      evaluatedAs: true
    - lineNumber: 5080
      expression: "startPos < 0"
      range: "(5080,13)-(5080,24)"
      evaluatedAs: false
    - lineNumber: 5083
      expression: "searchStrLength == 0"
      range: "(5083,13)-(5083,32)"
      evaluatedAs: false
    - lineNumber: 5087
      expression: "i >= 0"
      range: "(5087,32)-(5087,37)"
      evaluatedAs: true
    - lineNumber: 5088
      expression: "CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStrLength)"
      range: "(5088,17)-(5088,92)"
      evaluatedAs: false
- method:
    name: "lastOrdinalIndexOf"
    sourceCodeSignature: "int lastOrdinalIndexOf(final CharSequence str, final CharSequence\
      \ searchStr, final int ordinal)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStr"
      type: "java.lang.CharSequence"
    - name: "ordinal"
      type: "int"
    instructionFingerprint: "502A58FB8695222163A4A28EB9FE411D"
  paths:
  - testPathName: "lastOrdinalIndexOfWhenOrdinalLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "lastOrdinalIndexOfWhenLastIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5583
      expression: "searchStr.length() == 0"
      range: "(5583,13)-(5583,35)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5584
      expression: "lastIndex"
      range: "(5584,20)-(5584,28)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "lastOrdinalIndexOfWhenIndexLessThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5583
      expression: "searchStr.length() == 0"
      range: "(5583,13)-(5583,35)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5589
      expression: "lastIndex"
      range: "(5589,21)-(5589,29)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5591
      expression: "lastIndex"
      range: "(5591,17)-(5591,25)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5596
      expression: "index < 0"
      range: "(5596,17)-(5596,25)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "lastOrdinalIndexOfWhenFoundNotLessThanOrdinal"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5583
      expression: "searchStr.length() == 0"
      range: "(5583,13)-(5583,35)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5589
      expression: "lastIndex"
      range: "(5589,21)-(5589,29)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5591
      expression: "lastIndex"
      range: "(5591,17)-(5591,25)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5596
      expression: "index < 0"
      range: "(5596,17)-(5596,25)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5600
      expression: "found < ordinal"
      range: "(5600,18)-(5600,32)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "left"
    sourceCodeSignature: "String left(final String str, final int len)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "len"
      type: "int"
    instructionFingerprint: "D798A09EEFDCBC1F33AE2F3B11D8AE5B"
  paths:
  - testPathName: "leftWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "len"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5154
      expression: "str == null"
      range: "(5154,13)-(5154,23)"
      evaluatedAs: true
  - testPathName: "leftWhenLenLessThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2147483648
      valueType: "int"
      uuid: "len"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5154
      expression: "str == null"
      range: "(5154,13)-(5154,23)"
      evaluatedAs: false
    - lineNumber: 5157
      expression: "len < 0"
      range: "(5157,13)-(5157,19)"
      evaluatedAs: true
  - testPathName: "leftWhenStrLengthLessThanOrEqualsToLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "len"
    branches:
    - lineNumber: 5154
      expression: "str == null"
      range: "(5154,13)-(5154,23)"
      evaluatedAs: false
    - lineNumber: 5157
      expression: "len < 0"
      range: "(5157,13)-(5157,19)"
      evaluatedAs: false
    - lineNumber: 5160
      expression: "str.length() <= len"
      range: "(5160,13)-(5160,31)"
      evaluatedAs: true
  - testPathName: "leftWhenStrLengthGreaterThanLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "len"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5154
      expression: "str == null"
      range: "(5154,13)-(5154,23)"
      evaluatedAs: false
    - lineNumber: 5157
      expression: "len < 0"
      range: "(5157,13)-(5157,19)"
      evaluatedAs: false
    - lineNumber: 5160
      expression: "str.length() <= len"
      range: "(5160,13)-(5160,31)"
      evaluatedAs: false
- method:
    name: "leftPad"
    sourceCodeSignature: "String leftPad(final String str, final int size)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    instructionFingerprint: "5FA31B2A78CFBE7FB84130E3A83048C2"
  paths:
  - testPathName: "leftPadTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "leftPad(str,size,padChar):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_leftPad1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: " "
      valueType: "char"
      uuid: "padChar"
- method:
    name: "leftPad"
    sourceCodeSignature: "String leftPad(final String str, final int size, final char\
      \ padChar)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "C8F0716B63A13857CDA05789A719CD25"
  paths:
  - testPathName: "leftPad1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5211
      expression: "str == null"
      range: "(5211,13)-(5211,23)"
      evaluatedAs: true
  - testPathName: "leftPad1WhenPadsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    branches:
    - lineNumber: 5211
      expression: "str == null"
      range: "(5211,13)-(5211,23)"
      evaluatedAs: false
    - lineNumber: 5215
      expression: "pads <= 0"
      range: "(5215,13)-(5215,21)"
      evaluatedAs: true
  - testPathName: "leftPad1WhenPadsGreaterThanPAD_LIMIT"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "leftPad(str,size,string):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8193
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_leftPad1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5211
      expression: "str == null"
      range: "(5211,13)-(5211,23)"
      evaluatedAs: false
    - lineNumber: 5215
      expression: "pads <= 0"
      range: "(5215,13)-(5215,21)"
      evaluatedAs: false
    - lineNumber: 5218
      expression: "pads > PAD_LIMIT"
      range: "(5218,13)-(5218,28)"
      evaluatedAs: true
  - testPathName: "leftPad1WhenPadsNotGreaterThanPAD_LIMIT"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "repeat(padChar,int2):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5211
      expression: "str == null"
      range: "(5211,13)-(5211,23)"
      evaluatedAs: false
    - lineNumber: 5215
      expression: "pads <= 0"
      range: "(5215,13)-(5215,21)"
      evaluatedAs: false
    - lineNumber: 5218
      expression: "pads > PAD_LIMIT"
      range: "(5218,13)-(5218,28)"
      evaluatedAs: false
- method:
    name: "leftPad"
    sourceCodeSignature: "String leftPad(final String str, final int size, String\
      \ padStr)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    - name: "padStr"
      type: "java.lang.String"
    instructionFingerprint: "FA77E12A08A78842BB540820F15DBF87"
  paths:
  - testPathName: "leftPad2WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5248
      expression: "str == null"
      range: "(5248,13)-(5248,23)"
      evaluatedAs: true
  - testPathName: "leftPad2WhenPadsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5248
      expression: "str == null"
      range: "(5248,13)-(5248,23)"
      evaluatedAs: false
    - lineNumber: 5251
      expression: "isEmpty(padStr)"
      range: "(5251,13)-(5251,27)"
      evaluatedAs: true
    - lineNumber: 5257
      expression: "pads <= 0"
      range: "(5257,13)-(5257,21)"
      evaluatedAs: true
  - testPathName: "leftPad2WhenPadsLessThanOrEqualsToPAD_LIMIT"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "leftPad(str,size,char1):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_leftPad1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: " "
      valueType: "char"
      uuid: "char1"
    branches:
    - lineNumber: 5248
      expression: "str == null"
      range: "(5248,13)-(5248,23)"
      evaluatedAs: false
    - lineNumber: 5251
      expression: "isEmpty(padStr)"
      range: "(5251,13)-(5251,27)"
      evaluatedAs: true
    - lineNumber: 5257
      expression: "pads <= 0"
      range: "(5257,13)-(5257,21)"
      evaluatedAs: false
    - lineNumber: 5260
      expression: "padLen == 1"
      range: "(5260,13)-(5260,23)"
      evaluatedAs: true
    - lineNumber: 5260
      expression: "pads <= PAD_LIMIT"
      range: "(5260,28)-(5260,44)"
      evaluatedAs: true
  - testPathName: "leftPad2WhenPadsEqualsPadLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ABC"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5248
      expression: "str == null"
      range: "(5248,13)-(5248,23)"
      evaluatedAs: false
    - lineNumber: 5251
      expression: "isEmpty(padStr)"
      range: "(5251,13)-(5251,27)"
      evaluatedAs: false
    - lineNumber: 5257
      expression: "pads <= 0"
      range: "(5257,13)-(5257,21)"
      evaluatedAs: false
    - lineNumber: 5260
      expression: "padLen == 1"
      range: "(5260,13)-(5260,23)"
      evaluatedAs: false
    - lineNumber: 5264
      expression: "pads == padLen"
      range: "(5264,13)-(5264,26)"
      evaluatedAs: true
  - testPathName: "leftPad2WhenPadsLessThanPadLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CD"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CA"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5248
      expression: "str == null"
      range: "(5248,13)-(5248,23)"
      evaluatedAs: false
    - lineNumber: 5251
      expression: "isEmpty(padStr)"
      range: "(5251,13)-(5251,27)"
      evaluatedAs: false
    - lineNumber: 5257
      expression: "pads <= 0"
      range: "(5257,13)-(5257,21)"
      evaluatedAs: false
    - lineNumber: 5260
      expression: "padLen == 1"
      range: "(5260,13)-(5260,23)"
      evaluatedAs: false
    - lineNumber: 5264
      expression: "pads == padLen"
      range: "(5264,13)-(5264,26)"
      evaluatedAs: false
    - lineNumber: 5267
      expression: "pads < padLen"
      range: "(5267,13)-(5267,25)"
      evaluatedAs: true
  - testPathName: "leftPad2WhenILessThanPads"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 5248
      expression: "str == null"
      range: "(5248,13)-(5248,23)"
      evaluatedAs: false
    - lineNumber: 5251
      expression: "isEmpty(padStr)"
      range: "(5251,13)-(5251,27)"
      evaluatedAs: true
    - lineNumber: 5257
      expression: "pads <= 0"
      range: "(5257,13)-(5257,21)"
      evaluatedAs: false
    - lineNumber: 5260
      expression: "padLen == 1"
      range: "(5260,13)-(5260,23)"
      evaluatedAs: true
    - lineNumber: 5260
      expression: "pads <= PAD_LIMIT"
      range: "(5260,28)-(5260,44)"
      evaluatedAs: false
    - lineNumber: 5264
      expression: "pads == padLen"
      range: "(5264,13)-(5264,26)"
      evaluatedAs: false
    - lineNumber: 5267
      expression: "pads < padLen"
      range: "(5267,13)-(5267,25)"
      evaluatedAs: false
    - lineNumber: 5272
      expression: "i < pads"
      range: "(5272,25)-(5272,32)"
      evaluatedAs: true
- method:
    name: "length"
    sourceCodeSignature: "int length(final CharSequence cs)"
    returnType: "int"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "956B5A7A38E76FF4AAD19A8BD6CB0A06"
  paths:
  - testPathName: "lengthWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5290
      expression: "cs == null"
      range: "(5290,16)-(5290,25)"
      evaluatedAs: true
  - testPathName: "lengthWhenCsIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 5290
      expression: "cs == null"
      range: "(5290,16)-(5290,25)"
      evaluatedAs: false
- method:
    name: "lowerCase"
    sourceCodeSignature: "String lowerCase(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "5217EFA747CA29B540422E7FC60BC442"
  paths:
  - testPathName: "lowerCaseWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5313
      expression: "str == null"
      range: "(5313,13)-(5313,23)"
      evaluatedAs: true
  - testPathName: "lowerCaseWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5313
      expression: "str == null"
      range: "(5313,13)-(5313,23)"
      evaluatedAs: false
- method:
    name: "lowerCase"
    sourceCodeSignature: "String lowerCase(final String str, final Locale locale)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "locale"
      type: "java.util.Locale"
    instructionFingerprint: "8DECF67B724B7BD0BE8A6AC0B02D7E24"
  paths:
  - testPathName: "lowerCase1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5336
      expression: "str == null"
      range: "(5336,13)-(5336,23)"
      evaluatedAs: true
  - testPathName: "lowerCase1WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5336
      expression: "str == null"
      range: "(5336,13)-(5336,23)"
      evaluatedAs: false
- method:
    name: "mid"
    sourceCodeSignature: "String mid(final String str, int pos, final int len)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "pos"
      type: "int"
    - name: "len"
      type: "int"
    instructionFingerprint: "687AF3EE42B98BC76F3F59ACB3C053E2"
  paths:
  - testPathName: "midWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "pos"
      valueUuid: "pos"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "pos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "len"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5424
      expression: "str == null"
      range: "(5424,13)-(5424,23)"
      evaluatedAs: true
  - testPathName: "midWhenPosGreaterThanStrLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "pos"
      valueUuid: "pos"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "pos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "len"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5424
      expression: "str == null"
      range: "(5424,13)-(5424,23)"
      evaluatedAs: false
    - lineNumber: 5427
      expression: "len < 0"
      range: "(5427,13)-(5427,19)"
      evaluatedAs: false
    - lineNumber: 5427
      expression: "pos > str.length()"
      range: "(5427,24)-(5427,41)"
      evaluatedAs: true
  - testPathName: "midWhenStrLengthLessThanOrEqualsToPosPlusLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "pos"
      valueUuid: "pos"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "pos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "len"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5424
      expression: "str == null"
      range: "(5424,13)-(5424,23)"
      evaluatedAs: false
    - lineNumber: 5427
      expression: "len < 0"
      range: "(5427,13)-(5427,19)"
      evaluatedAs: false
    - lineNumber: 5427
      expression: "pos > str.length()"
      range: "(5427,24)-(5427,41)"
      evaluatedAs: false
    - lineNumber: 5430
      expression: "pos < 0"
      range: "(5430,13)-(5430,19)"
      evaluatedAs: true
    - lineNumber: 5433
      expression: "str.length() <= pos + len"
      range: "(5433,13)-(5433,37)"
      evaluatedAs: true
  - testPathName: "midWhenStrLengthGreaterThanPosPlusLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "pos"
      valueUuid: "pos"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "pos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "len"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5424
      expression: "str == null"
      range: "(5424,13)-(5424,23)"
      evaluatedAs: false
    - lineNumber: 5427
      expression: "len < 0"
      range: "(5427,13)-(5427,19)"
      evaluatedAs: false
    - lineNumber: 5427
      expression: "pos > str.length()"
      range: "(5427,24)-(5427,41)"
      evaluatedAs: false
    - lineNumber: 5430
      expression: "pos < 0"
      range: "(5430,13)-(5430,19)"
      evaluatedAs: true
    - lineNumber: 5433
      expression: "str.length() <= pos + len"
      range: "(5433,13)-(5433,37)"
      evaluatedAs: false
- method:
    name: "normalizeSpace"
    sourceCodeSignature: "String normalizeSpace(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "06353C488E68BFC7BE8433B96E3F886F"
  paths:
  - testPathName: "normalizeSpaceWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5482
      expression: "isEmpty(str)"
      range: "(5482,13)-(5482,24)"
      evaluatedAs: true
  - testPathName: "normalizeSpaceWhenStartWhitespacesAndStartWhitespaces"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5482
      expression: "isEmpty(str)"
      range: "(5482,13)-(5482,24)"
      evaluatedAs: false
    - lineNumber: 5490
      expression: "i < size"
      range: "(5490,25)-(5490,32)"
      evaluatedAs: true
    - lineNumber: 5493
      expression: "isWhitespace"
      range: "(5493,17)-(5493,28)"
      evaluatedAs: true
    - lineNumber: 5494
      expression: "whitespacesCount == 0"
      range: "(5494,21)-(5494,41)"
      evaluatedAs: true
    - lineNumber: 5494
      expression: "!startWhitespaces"
      range: "(5494,46)-(5494,62)"
      evaluatedAs: false
    - lineNumber: 5504
      expression: "startWhitespaces"
      range: "(5504,13)-(5504,28)"
      evaluatedAs: true
  - testPathName: "normalizeSpaceWhenWhitespacesCountNotGreaterThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\u00A0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5482
      expression: "isEmpty(str)"
      range: "(5482,13)-(5482,24)"
      evaluatedAs: false
    - lineNumber: 5490
      expression: "i < size"
      range: "(5490,25)-(5490,32)"
      evaluatedAs: true
    - lineNumber: 5493
      expression: "isWhitespace"
      range: "(5493,17)-(5493,28)"
      evaluatedAs: false
    - lineNumber: 5500
      expression: "actualChar == 160"
      range: "(5500,37)-(5500,53)"
      evaluatedAs: true
    - lineNumber: 5504
      expression: "startWhitespaces"
      range: "(5504,13)-(5504,28)"
      evaluatedAs: false
    - lineNumber: 5507
      expression: "whitespacesCount > 0"
      range: "(5507,49)-(5507,68)"
      evaluatedAs: false
  - testPathName: "normalizeSpaceWhenNotStartWhitespacesAndWhitespacesCountNotGreaterThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5482
      expression: "isEmpty(str)"
      range: "(5482,13)-(5482,24)"
      evaluatedAs: false
    - lineNumber: 5490
      expression: "i < size"
      range: "(5490,25)-(5490,32)"
      evaluatedAs: true
    - lineNumber: 5493
      expression: "isWhitespace"
      range: "(5493,17)-(5493,28)"
      evaluatedAs: false
    - lineNumber: 5500
      expression: "actualChar == 160"
      range: "(5500,37)-(5500,53)"
      evaluatedAs: false
    - lineNumber: 5504
      expression: "startWhitespaces"
      range: "(5504,13)-(5504,28)"
      evaluatedAs: false
    - lineNumber: 5507
      expression: "whitespacesCount > 0"
      range: "(5507,49)-(5507,68)"
      evaluatedAs: false
- method:
    name: "ordinalIndexOf"
    sourceCodeSignature: "int ordinalIndexOf(final CharSequence str, final CharSequence\
      \ searchStr, final int ordinal)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "searchStr"
      type: "java.lang.CharSequence"
    - name: "ordinal"
      type: "int"
    instructionFingerprint: "1D91A9EBC1551E07240DC3161E9601CD"
  paths:
  - testPathName: "ordinalIndexOfWhenOrdinalLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "ordinalIndexOfWhenNotLastIndex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5583
      expression: "searchStr.length() == 0"
      range: "(5583,13)-(5583,35)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5584
      expression: "lastIndex"
      range: "(5584,20)-(5584,28)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "ordinalIndexOfWhenIndexLessThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5583
      expression: "searchStr.length() == 0"
      range: "(5583,13)-(5583,35)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5589
      expression: "lastIndex"
      range: "(5589,21)-(5589,29)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5591
      expression: "lastIndex"
      range: "(5591,17)-(5591,25)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5596
      expression: "index < 0"
      range: "(5596,17)-(5596,25)"
      evaluatedAs: true
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "ordinalIndexOfWhenFoundNotLessThanOrdinal"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchStr"
      valueUuid: "searchStr"
    - type: "INPUT"
      name: "ordinal"
      valueUuid: "ordinal"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchStr1"
      valueType: "java.lang.String"
      uuid: "searchStr"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "ordinal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int5"
    branches:
    - lineNumber: 5580
      expression: "str == null"
      range: "(5580,13)-(5580,23)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "searchStr == null"
      range: "(5580,28)-(5580,44)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5580
      expression: "ordinal <= 0"
      range: "(5580,49)-(5580,60)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5583
      expression: "searchStr.length() == 0"
      range: "(5583,13)-(5583,35)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5589
      expression: "lastIndex"
      range: "(5589,21)-(5589,29)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5591
      expression: "lastIndex"
      range: "(5591,17)-(5591,25)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5596
      expression: "index < 0"
      range: "(5596,17)-(5596,25)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    - lineNumber: 5600
      expression: "found < ordinal"
      range: "(5600,18)-(5600,32)"
      evaluatedAs: false
      internalMethodName: "ordinalIndexOf"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "overlay"
    sourceCodeSignature: "String overlay(final String str, String overlay, int start,\
      \ int end)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "overlay"
      type: "java.lang.String"
    - name: "start"
      type: "int"
    - name: "end"
      type: "int"
    instructionFingerprint: "23A688831F31235F0CF107BF62EEB016"
  paths:
  - testPathName: "overlayWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "overlay"
      valueUuid: "overlay"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "INPUT"
      name: "end"
      valueUuid: "end"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "overlay1"
      valueType: "java.lang.String"
      uuid: "overlay"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "end"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5634
      expression: "str == null"
      range: "(5634,13)-(5634,23)"
      evaluatedAs: true
  - testPathName: "overlayWhenStartGreaterThanEnd"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "overlay"
      valueUuid: "overlay"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "INPUT"
      name: "end"
      valueUuid: "end"
    - type: "RESULT"
      name: "result"
      valueUuid: "string4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "overlay"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "end"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string4"
    branches:
    - lineNumber: 5634
      expression: "str == null"
      range: "(5634,13)-(5634,23)"
      evaluatedAs: false
    - lineNumber: 5637
      expression: "overlay == null"
      range: "(5637,13)-(5637,27)"
      evaluatedAs: true
    - lineNumber: 5641
      expression: "start < 0"
      range: "(5641,13)-(5641,21)"
      evaluatedAs: true
    - lineNumber: 5644
      expression: "start > len"
      range: "(5644,13)-(5644,23)"
      evaluatedAs: true
    - lineNumber: 5647
      expression: "end < 0"
      range: "(5647,13)-(5647,19)"
      evaluatedAs: true
    - lineNumber: 5650
      expression: "end > len"
      range: "(5650,13)-(5650,21)"
      evaluatedAs: true
    - lineNumber: 5653
      expression: "start > end"
      range: "(5653,13)-(5653,23)"
      evaluatedAs: true
- method:
    name: "prependIfMissing"
    sourceCodeSignature: "String prependIfMissing(final String str, final CharSequence\
      \ prefix, final CharSequence... prefixes)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "prefix"
      type: "java.lang.CharSequence"
    - name: "prefixes"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "24C8FADC0088E269E3CB44797A05FAB4"
  paths:
  - testPathName: "prependIfMissing1WhenStartsWithStrPrefixIgnoreCase"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "prefix"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenArrayUtilsNotIsNotEmptyPrefixes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
      nameForMock: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1A"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenCharSequenceUtilsRegionMatchesStrIgnoreCase0Prefix0PreLenAndStartsWithStrPrefixIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenStartsWithNotStrPrefixIgnoreCaseAndArrayUtilsNotIsNotEmptyPrefixes"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
      nameForMock: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefixA"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenStartsWithStrPIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "charSequence"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenStartsWithNotStrPIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenPreLenGreaterThanStrLengthAndStartsWithNotStrPIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenCharSequenceUtilsRegionMatchesStrIgnoreCase0Prefix0PreLenAndStartsWithStrPIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissing1WhenCharSequenceUtilsNotRegionMatchesStrIgnoreCase0Prefix0PreLenAndStartsWitThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "prependIfMissingIgnoreCase"
    sourceCodeSignature: "String prependIfMissingIgnoreCase(final String str, final\
      \ CharSequence prefix, final CharSequence... prefixes)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "prefix"
      type: "java.lang.CharSequence"
    - name: "prefixes"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "D562B7799E7C100D62D8C0CA09E73896"
  paths:
  - testPathName: "prependIfMissingIgnoreCaseWhenStartsWithStrPrefixIgnoreCase"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "prefix"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenArrayUtilsNotIsNotEmptyPrefixes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
      nameForMock: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1A"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenCharSequenceUtilsRegionMatchesStrIgnoreCase0Prefix0PreLenAndStartsWithStrPrefixIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenStartsWithNotStrPrefixIgnoreCaseAndArrayUtilsNotIsNotEmptyPrefixes"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
      nameForMock: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefixA"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenStartsWithStrPIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "charSequence"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "charSequence"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenStartsWithNotStrPIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.CharSequence"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenPreLenGreaterThanStrLengthAndStartsWithNotStrPIgnoreCaseThrowsNullPointerException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenCharSequenceUtilsRegionMatchesStrIgnoreCase0Prefix0PreLenAndStartsWithStrPIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "prependIfMissingIgnoreCaseWhenCharSequenceUtilsNotRegionMatchesStrIgnoreCase0Prefix0PreLenAndThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefixes"
      valueUuid: "prefixes"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(prefix):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.CharSequence[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "prefixes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 5675
      expression: "str == null"
      range: "(5675,13)-(5675,23)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5675
      expression: "isEmpty(prefix)"
      range: "(5675,28)-(5675,42)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5675
      expression: "startsWith(str, prefix, ignoreCase)"
      range: "(5675,47)-(5675,81)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    - lineNumber: 5678
      expression: "ArrayUtils.isNotEmpty(prefixes)"
      range: "(5678,13)-(5678,43)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 5679
      expression: "for-each(prefixes)"
      range: "(5679,41)-(5679,48)"
      evaluatedAs: true
      internalMethodName: "prependIfMissing"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 5680
      expression: "startsWith(str, p, ignoreCase)"
      range: "(5680,21)-(5680,50)"
      evaluatedAs: false
      internalMethodName: "prependIfMissing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "remove"
    sourceCodeSignature: "String remove(final String str, final char remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "char"
    instructionFingerprint: "378A1CED9BB1433EBCF32BF2D6EEEB56"
  paths:
  - testPathName: "removeWhenStrIndexOfRemoveEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 5784
      expression: "isEmpty(str)"
      range: "(5784,13)-(5784,24)"
      evaluatedAs: false
    - lineNumber: 5784
      expression: "str.indexOf(remove) == INDEX_NOT_FOUND"
      range: "(5784,29)-(5784,66)"
      evaluatedAs: true
  - testPathName: "removeWhenIIndexOfCharsNotEqualsRemove"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5784
      expression: "isEmpty(str)"
      range: "(5784,13)-(5784,24)"
      evaluatedAs: false
    - lineNumber: 5784
      expression: "str.indexOf(remove) == INDEX_NOT_FOUND"
      range: "(5784,29)-(5784,66)"
      evaluatedAs: false
    - lineNumber: 5789
      expression: "i < chars.length"
      range: "(5789,25)-(5789,40)"
      evaluatedAs: true
    - lineNumber: 5790
      expression: "chars[i] != remove"
      range: "(5790,17)-(5790,34)"
      evaluatedAs: true
- method:
    name: "remove"
    sourceCodeSignature: "String remove(final String str, final String remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "java.lang.String"
    instructionFingerprint: "2C5C76AFEB23714694CFAB33AA955BBC"
  paths:
  - testPathName: "remove1WhenIsEmptyRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 5821
      expression: "isEmpty(str)"
      range: "(5821,13)-(5821,24)"
      evaluatedAs: false
    - lineNumber: 5821
      expression: "isEmpty(remove)"
      range: "(5821,29)-(5821,43)"
      evaluatedAs: true
  - testPathName: "remove1WhenIsEmptyNotRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "replace(str,remove,replacement,max):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_replace1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "max"
    branches:
    - lineNumber: 5821
      expression: "isEmpty(str)"
      range: "(5821,13)-(5821,24)"
      evaluatedAs: false
    - lineNumber: 5821
      expression: "isEmpty(remove)"
      range: "(5821,29)-(5821,43)"
      evaluatedAs: false
- method:
    name: "removeAll"
    sourceCodeSignature: "String removeAll(final String text, final String regex)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "regex"
      type: "java.lang.String"
    instructionFingerprint: "C2AE92BE7FF2FA32BB4EB63B42468FA5"
  paths:
  - testPathName: "removeAllTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "regex"
      valueUuid: "regex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "regex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "removeEnd"
    sourceCodeSignature: "String removeEnd(final String str, final String remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "java.lang.String"
    instructionFingerprint: "7924E3629883AB8B78A1C1EF8A445F77"
  paths:
  - testPathName: "removeEndWhenIsEmptyRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 5902
      expression: "isEmpty(str)"
      range: "(5902,13)-(5902,24)"
      evaluatedAs: false
    - lineNumber: 5902
      expression: "isEmpty(remove)"
      range: "(5902,29)-(5902,43)"
      evaluatedAs: true
  - testPathName: "removeEndWhenStrEndsWithRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5902
      expression: "isEmpty(str)"
      range: "(5902,13)-(5902,24)"
      evaluatedAs: false
    - lineNumber: 5902
      expression: "isEmpty(remove)"
      range: "(5902,29)-(5902,43)"
      evaluatedAs: false
    - lineNumber: 5905
      expression: "str.endsWith(remove)"
      range: "(5905,13)-(5905,32)"
      evaluatedAs: true
  - testPathName: "removeEndWhenStrNotEndsWithRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 5902
      expression: "isEmpty(str)"
      range: "(5902,13)-(5902,24)"
      evaluatedAs: false
    - lineNumber: 5902
      expression: "isEmpty(remove)"
      range: "(5902,29)-(5902,43)"
      evaluatedAs: false
    - lineNumber: 5905
      expression: "str.endsWith(remove)"
      range: "(5905,13)-(5905,32)"
      evaluatedAs: false
- method:
    name: "removeEndIgnoreCase"
    sourceCodeSignature: "String removeEndIgnoreCase(final String str, final String\
      \ remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "java.lang.String"
    instructionFingerprint: "FFDC8EF614F82D0458750E8913039365"
  paths:
  - testPathName: "removeEndIgnoreCaseWhenIsEmptyRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 5938
      expression: "isEmpty(str)"
      range: "(5938,13)-(5938,24)"
      evaluatedAs: false
    - lineNumber: 5938
      expression: "isEmpty(remove)"
      range: "(5938,29)-(5938,43)"
      evaluatedAs: true
  - testPathName: "removeEndIgnoreCaseWhenEndsWithIgnoreCaseStrRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str,remove):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 5938
      expression: "isEmpty(str)"
      range: "(5938,13)-(5938,24)"
      evaluatedAs: false
    - lineNumber: 5938
      expression: "isEmpty(remove)"
      range: "(5938,29)-(5938,43)"
      evaluatedAs: false
    - lineNumber: 5941
      expression: "endsWithIgnoreCase(str, remove)"
      range: "(5941,13)-(5941,43)"
      evaluatedAs: true
  - testPathName: "removeEndIgnoreCaseWhenEndsWithIgnoreCaseNotStrRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str,remove):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    branches:
    - lineNumber: 5938
      expression: "isEmpty(str)"
      range: "(5938,13)-(5938,24)"
      evaluatedAs: false
    - lineNumber: 5938
      expression: "isEmpty(remove)"
      range: "(5938,29)-(5938,43)"
      evaluatedAs: false
    - lineNumber: 5941
      expression: "endsWithIgnoreCase(str, remove)"
      range: "(5941,13)-(5941,43)"
      evaluatedAs: false
- method:
    name: "removeFirst"
    sourceCodeSignature: "String removeFirst(final String text, final String regex)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "regex"
      type: "java.lang.String"
    instructionFingerprint: "C044DDA4E8EE45DD1598013DD3A67473"
  paths:
  - testPathName: "removeFirstTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "regex"
      valueUuid: "regex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "regex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "removeIgnoreCase"
    sourceCodeSignature: "String removeIgnoreCase(final String str, final String remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "java.lang.String"
    instructionFingerprint: "CF463E0317DB0EA900FBDF408E672B94"
  paths:
  - testPathName: "removeIgnoreCaseTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "replaceIgnoreCase(str,remove,replacement,max):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_replaceIgnoreCase1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "max"
- method:
    name: "removePattern"
    sourceCodeSignature: "String removePattern(final String source, final String regex)"
    returnType: "java.lang.String"
    parameters:
    - name: "source"
      type: "java.lang.String"
    - name: "regex"
      type: "java.lang.String"
    instructionFingerprint: "C13A1FD4D72836870418D87A4EA956F3"
  paths:
  - testPathName: "removePatternTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      valueUuid: "source"
    - type: "INPUT"
      name: "regex"
      valueUuid: "regex"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "regex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "removeStart"
    sourceCodeSignature: "String removeStart(final String str, final char remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "char"
    instructionFingerprint: "A914E49281FF88E4A1395983522E553C"
  paths:
  - testPathName: "removeStartWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 6091
      expression: "isEmpty(str)"
      range: "(6091,13)-(6091,24)"
      evaluatedAs: true
  - testPathName: "removeStartWhenStrCharAt0EqualsRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6091
      expression: "isEmpty(str)"
      range: "(6091,13)-(6091,24)"
      evaluatedAs: false
    - lineNumber: 6094
      expression: "str.charAt(0) == remove"
      range: "(6094,16)-(6094,38)"
      evaluatedAs: true
  - testPathName: "removeStartWhenStrCharAt0NotEqualsRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 6091
      expression: "isEmpty(str)"
      range: "(6091,13)-(6091,24)"
      evaluatedAs: false
    - lineNumber: 6094
      expression: "str.charAt(0) == remove"
      range: "(6094,16)-(6094,38)"
      evaluatedAs: false
- method:
    name: "removeStart"
    sourceCodeSignature: "String removeStart(final String str, final String remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "java.lang.String"
    instructionFingerprint: "E513968260CB6E9B5AB569FBE553A20B"
  paths:
  - testPathName: "removeStart1WhenIsEmptyRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 6122
      expression: "isEmpty(str)"
      range: "(6122,13)-(6122,24)"
      evaluatedAs: false
    - lineNumber: 6122
      expression: "isEmpty(remove)"
      range: "(6122,29)-(6122,43)"
      evaluatedAs: true
  - testPathName: "removeStart1WhenStrStartsWithRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AC"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6122
      expression: "isEmpty(str)"
      range: "(6122,13)-(6122,24)"
      evaluatedAs: false
    - lineNumber: 6122
      expression: "isEmpty(remove)"
      range: "(6122,29)-(6122,43)"
      evaluatedAs: false
    - lineNumber: 6125
      expression: "str.startsWith(remove)"
      range: "(6125,13)-(6125,34)"
      evaluatedAs: true
  - testPathName: "removeStart1WhenStrNotStartsWithRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(remove):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 6122
      expression: "isEmpty(str)"
      range: "(6122,13)-(6122,24)"
      evaluatedAs: false
    - lineNumber: 6122
      expression: "isEmpty(remove)"
      range: "(6122,29)-(6122,43)"
      evaluatedAs: false
    - lineNumber: 6125
      expression: "str.startsWith(remove)"
      range: "(6125,13)-(6125,34)"
      evaluatedAs: false
- method:
    name: "removeStartIgnoreCase"
    sourceCodeSignature: "String removeStartIgnoreCase(final String str, final String\
      \ remove)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "remove"
      type: "java.lang.String"
    instructionFingerprint: "CC2C6A8256E38C47E02D77512F136AA2"
  paths:
  - testPathName: "removeStartIgnoreCaseWhenStartsWithIgnoreCaseStrRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "startsWithIgnoreCase(str,remove):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(remove):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6157
      expression: "str != null"
      range: "(6157,13)-(6157,23)"
      evaluatedAs: true
    - lineNumber: 6157
      expression: "startsWithIgnoreCase(str, remove)"
      range: "(6157,28)-(6157,60)"
      evaluatedAs: true
  - testPathName: "removeStartIgnoreCaseWhenStartsWithIgnoreCaseNotStrRemove"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "remove"
      valueUuid: "remove"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "startsWithIgnoreCase(str,remove):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "remove1"
      valueType: "java.lang.String"
      uuid: "remove"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 6157
      expression: "str != null"
      range: "(6157,13)-(6157,23)"
      evaluatedAs: true
    - lineNumber: 6157
      expression: "startsWithIgnoreCase(str, remove)"
      range: "(6157,28)-(6157,60)"
      evaluatedAs: false
- method:
    name: "repeat"
    sourceCodeSignature: "String repeat(final char ch, final int repeat)"
    returnType: "java.lang.String"
    parameters:
    - name: "ch"
      type: "char"
    - name: "repeat"
      type: "int"
    instructionFingerprint: "5C8CCD3A93212C776D9996CA13D31EF0"
  paths:
  - testPathName: "repeatWhenRepeatLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "repeat"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 6186
      expression: "repeat <= 0"
      range: "(6186,13)-(6186,23)"
      evaluatedAs: true
  - testPathName: "repeatWhenRepeatGreaterThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "ch"
      valueUuid: "ch"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "ch"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "repeat"
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\u0000"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6186
      expression: "repeat <= 0"
      range: "(6186,13)-(6186,23)"
      evaluatedAs: false
- method:
    name: "repeat"
    sourceCodeSignature: "String repeat(final String str, final int repeat)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "repeat"
      type: "int"
    instructionFingerprint: "A065F309FC3706165372629610FDDE91"
  paths:
  - testPathName: "repeat1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "repeat"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6214
      expression: "str == null"
      range: "(6214,13)-(6214,23)"
      evaluatedAs: true
  - testPathName: "repeat1WhenRepeatLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "repeat"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 6214
      expression: "str == null"
      range: "(6214,13)-(6214,23)"
      evaluatedAs: false
    - lineNumber: 6217
      expression: "repeat <= 0"
      range: "(6217,13)-(6217,23)"
      evaluatedAs: true
  - testPathName: "repeat1WhenInputLengthEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "repeat"
    branches:
    - lineNumber: 6214
      expression: "str == null"
      range: "(6214,13)-(6214,23)"
      evaluatedAs: false
    - lineNumber: 6217
      expression: "repeat <= 0"
      range: "(6217,13)-(6217,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "repeat == 1"
      range: "(6221,13)-(6221,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "inputLength == 0"
      range: "(6221,28)-(6221,43)"
      evaluatedAs: true
  - testPathName: "repeat1WhenRepeatLessThanOrEqualsToPAD_LIMIT"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "repeat(char1,repeat):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "repeat"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_repeat1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    branches:
    - lineNumber: 6214
      expression: "str == null"
      range: "(6214,13)-(6214,23)"
      evaluatedAs: false
    - lineNumber: 6217
      expression: "repeat <= 0"
      range: "(6217,13)-(6217,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "repeat == 1"
      range: "(6221,13)-(6221,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "inputLength == 0"
      range: "(6221,28)-(6221,43)"
      evaluatedAs: false
    - lineNumber: 6224
      expression: "inputLength == 1"
      range: "(6224,13)-(6224,28)"
      evaluatedAs: true
    - lineNumber: 6224
      expression: "repeat <= PAD_LIMIT"
      range: "(6224,33)-(6224,51)"
      evaluatedAs: true
  - testPathName: "repeat1WhenSwitchInputLengthCase1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "repeat(char1,repeat):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8193
      valueType: "int"
      uuid: "repeat"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_repeat1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    branches:
    - lineNumber: 6214
      expression: "str == null"
      range: "(6214,13)-(6214,23)"
      evaluatedAs: false
    - lineNumber: 6217
      expression: "repeat <= 0"
      range: "(6217,13)-(6217,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "repeat == 1"
      range: "(6221,13)-(6221,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "inputLength == 0"
      range: "(6221,28)-(6221,43)"
      evaluatedAs: false
    - lineNumber: 6224
      expression: "inputLength == 1"
      range: "(6224,13)-(6224,28)"
      evaluatedAs: true
    - lineNumber: 6224
      expression: "repeat <= PAD_LIMIT"
      range: "(6224,33)-(6224,51)"
      evaluatedAs: false
    - lineNumber: 6229
      expression: "switch(inputLength) = 1"
      range: "(6230,18)-(6230,18)"
      evaluatedAs: true
  - testPathName: "repeat1WhenIGreaterThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "CD"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "repeat"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CDCD"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6214
      expression: "str == null"
      range: "(6214,13)-(6214,23)"
      evaluatedAs: false
    - lineNumber: 6217
      expression: "repeat <= 0"
      range: "(6217,13)-(6217,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "repeat == 1"
      range: "(6221,13)-(6221,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "inputLength == 0"
      range: "(6221,28)-(6221,43)"
      evaluatedAs: false
    - lineNumber: 6224
      expression: "inputLength == 1"
      range: "(6224,13)-(6224,28)"
      evaluatedAs: false
    - lineNumber: 6229
      expression: "switch(inputLength) = 2"
      range: "(6232,18)-(6232,18)"
      evaluatedAs: true
    - lineNumber: 6236
      expression: "i >= 0"
      range: "(6236,46)-(6236,51)"
      evaluatedAs: true
  - testPathName: "repeat1WhenSwitchInputLengthCaseDefaultAndILessThanRepeat"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "LOOKUP_SWITCH_INSTRUCTION_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8193
      valueType: "int"
      uuid: "repeat"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6214
      expression: "str == null"
      range: "(6214,13)-(6214,23)"
      evaluatedAs: false
    - lineNumber: 6217
      expression: "repeat <= 0"
      range: "(6217,13)-(6217,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "repeat == 1"
      range: "(6221,13)-(6221,23)"
      evaluatedAs: false
    - lineNumber: 6221
      expression: "inputLength == 0"
      range: "(6221,28)-(6221,43)"
      evaluatedAs: false
    - lineNumber: 6224
      expression: "inputLength == 1"
      range: "(6224,13)-(6224,28)"
      evaluatedAs: true
    - lineNumber: 6224
      expression: "repeat <= PAD_LIMIT"
      range: "(6224,33)-(6224,51)"
      evaluatedAs: false
    - lineNumber: 6229
      expression: "switch(inputLength) = default"
      range: "(6241,13)-(6241,19)"
      evaluatedAs: true
    - lineNumber: 6243
      expression: "i < repeat"
      range: "(6243,33)-(6243,42)"
      evaluatedAs: true
- method:
    name: "repeat"
    sourceCodeSignature: "String repeat(final String str, final String separator,\
      \ final int repeat)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    - name: "repeat"
      type: "int"
    instructionFingerprint: "B70DB37DF3E275A682F11F36050ED79A"
  paths:
  - testPathName: "repeat2WhenSeparatorIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "repeat(str,repeat):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "repeat"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_repeat1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6271
      expression: "str == null"
      range: "(6271,13)-(6271,23)"
      evaluatedAs: false
    - lineNumber: 6271
      expression: "separator == null"
      range: "(6271,28)-(6271,44)"
      evaluatedAs: true
  - testPathName: "repeat2WhenSeparatorIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "repeat"
      valueUuid: "repeat"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "repeat(string,repeat):string2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "removeEnd(string2,separator):string3"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "repeat"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_repeat1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_removeEnd1"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 6271
      expression: "str == null"
      range: "(6271,13)-(6271,23)"
      evaluatedAs: false
    - lineNumber: 6271
      expression: "separator == null"
      range: "(6271,28)-(6271,44)"
      evaluatedAs: false
- method:
    name: "replace"
    sourceCodeSignature: "String replace(final String text, final String searchString,\
      \ final String replacement)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchString"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    instructionFingerprint: "E5E4F126CC89F50E83C0E284E70FA3B0"
  paths:
  - testPathName: "replaceTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "replace(text,searchString,replacement,max):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_replace1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "max"
- method:
    name: "replace"
    sourceCodeSignature: "String replace(final String text, final String searchString,\
      \ final String replacement, final int max)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchString"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    - name: "max"
      type: "int"
    instructionFingerprint: "C3C554EF7F6940A9AA69884D70765950"
  paths:
  - testPathName: "replace1WhenMaxEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: true
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replace1WhenEndEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOf(text,searchString,int1):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6373
      expression: "ignoreCase"
      range: "(6373,14)-(6373,23)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6377
      expression: "ignoreCase"
      range: "(6377,20)-(6377,29)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6378
      expression: "end == INDEX_NOT_FOUND"
      range: "(6378,14)-(6378,35)"
      evaluatedAs: true
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replace1WhenEndNotEqualsINDEX_NOT_FOUNDAndMaxEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOf(text,searchString,int1):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.append(java.lang.String,int,int)\
        \ : java.lang.StringBuilder"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6373
      expression: "ignoreCase"
      range: "(6373,14)-(6373,23)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6377
      expression: "ignoreCase"
      range: "(6377,20)-(6377,29)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6378
      expression: "end == INDEX_NOT_FOUND"
      range: "(6378,14)-(6378,35)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6383
      expression: "max < 0"
      range: "(6383,22)-(6383,28)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6385
      expression: "end != INDEX_NOT_FOUND"
      range: "(6385,17)-(6385,38)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6388
      expression: "--max == 0"
      range: "(6388,18)-(6388,27)"
      evaluatedAs: true
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replace1WhenMaxNotEquals0AndNotIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOf(text,searchString,int1):int2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOf(text,searchString,int11):int13"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.append(java.lang.String,int,int)\
        \ : java.lang.StringBuilder"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int13"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6373
      expression: "ignoreCase"
      range: "(6373,14)-(6373,23)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6377
      expression: "ignoreCase"
      range: "(6377,20)-(6377,29)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6378
      expression: "end == INDEX_NOT_FOUND"
      range: "(6378,14)-(6378,35)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6383
      expression: "max < 0"
      range: "(6383,22)-(6383,28)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6385
      expression: "end != INDEX_NOT_FOUND"
      range: "(6385,17)-(6385,38)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6388
      expression: "--max == 0"
      range: "(6388,18)-(6388,27)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6391
      expression: "ignoreCase"
      range: "(6391,20)-(6391,29)"
      evaluatedAs: false
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "replaceAll"
    sourceCodeSignature: "String replaceAll(final String text, final String regex,\
      \ final String replacement)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "regex"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    instructionFingerprint: "3565AF2409769A6BC7DC15FBF56EF53F"
  paths:
  - testPathName: "replaceAllTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "regex"
      valueUuid: "regex"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "regex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "replaceChars"
    sourceCodeSignature: "String replaceChars(final String str, final char searchChar,\
      \ final char replaceChar)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "searchChar"
      type: "char"
    - name: "replaceChar"
      type: "char"
    instructionFingerprint: "93DA959097A3D455FE49C4076E1566AD"
  paths:
  - testPathName: "replaceCharsWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "INPUT"
      name: "replaceChar"
      valueUuid: "replaceChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "searchChar"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "replaceChar"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6473
      expression: "str == null"
      range: "(6473,13)-(6473,23)"
      evaluatedAs: true
  - testPathName: "replaceCharsWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchChar"
      valueUuid: "searchChar"
    - type: "INPUT"
      name: "replaceChar"
      valueUuid: "replaceChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "searchChar"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "replaceChar"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6473
      expression: "str == null"
      range: "(6473,13)-(6473,23)"
      evaluatedAs: false
- method:
    name: "replaceChars"
    sourceCodeSignature: "String replaceChars(final String str, final String searchChars,\
      \ String replaceChars)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "searchChars"
      type: "java.lang.String"
    - name: "replaceChars"
      type: "java.lang.String"
    instructionFingerprint: "6F2DAB5A3F92FB069A24498EDACDC48A"
  paths:
  - testPathName: "replaceChars1WhenIsEmptySearchChars"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "INPUT"
      name: "replaceChars"
      valueUuid: "replaceChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchChars1"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replaceChars1"
      valueType: "java.lang.String"
      uuid: "replaceChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 6516
      expression: "isEmpty(str)"
      range: "(6516,13)-(6516,24)"
      evaluatedAs: false
    - lineNumber: 6516
      expression: "isEmpty(searchChars)"
      range: "(6516,29)-(6516,48)"
      evaluatedAs: true
  - testPathName: "replaceChars1WhenIndexLessThan0AndNotModified"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "INPUT"
      name: "replaceChars"
      valueUuid: "replaceChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "replaceChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 6516
      expression: "isEmpty(str)"
      range: "(6516,13)-(6516,24)"
      evaluatedAs: false
    - lineNumber: 6516
      expression: "isEmpty(searchChars)"
      range: "(6516,29)-(6516,48)"
      evaluatedAs: false
    - lineNumber: 6519
      expression: "replaceChars == null"
      range: "(6519,13)-(6519,32)"
      evaluatedAs: true
    - lineNumber: 6526
      expression: "i < strLength"
      range: "(6526,25)-(6526,37)"
      evaluatedAs: true
    - lineNumber: 6529
      expression: "index >= 0"
      range: "(6529,17)-(6529,26)"
      evaluatedAs: false
    - lineNumber: 6538
      expression: "modified"
      range: "(6538,13)-(6538,20)"
      evaluatedAs: false
  - testPathName: "replaceChars1WhenIndexLessThanReplaceCharsLengthAndModified"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "searchChars"
      valueUuid: "searchChars"
    - type: "INPUT"
      name: "replaceChars"
      valueUuid: "replaceChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchChars):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "searchChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "replaceChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6516
      expression: "isEmpty(str)"
      range: "(6516,13)-(6516,24)"
      evaluatedAs: false
    - lineNumber: 6516
      expression: "isEmpty(searchChars)"
      range: "(6516,29)-(6516,48)"
      evaluatedAs: false
    - lineNumber: 6519
      expression: "replaceChars == null"
      range: "(6519,13)-(6519,32)"
      evaluatedAs: false
    - lineNumber: 6526
      expression: "i < strLength"
      range: "(6526,25)-(6526,37)"
      evaluatedAs: true
    - lineNumber: 6529
      expression: "index >= 0"
      range: "(6529,17)-(6529,26)"
      evaluatedAs: true
    - lineNumber: 6531
      expression: "index < replaceCharsLength"
      range: "(6531,21)-(6531,46)"
      evaluatedAs: true
    - lineNumber: 6538
      expression: "modified"
      range: "(6538,13)-(6538,20)"
      evaluatedAs: true
- method:
    name: "replaceEach"
    sourceCodeSignature: "String replaceEach(final String text, final String[] searchList,\
      \ final String[] replacementList)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchList"
      type: "java.lang.String[]"
    - name: "replacementList"
      type: "java.lang.String[]"
    instructionFingerprint: "F649C4AA53D03D47DC60F7D7A042D4F0"
  paths:
  - testPathName: "replaceEachWhenSearchLengthNotEqualsReplacementLengthThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "s1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachWhenTextIndexEqualsMinus1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "searchListItem1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchListItem1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6675
      expression: "i < searchLength"
      range: "(6675,25)-(6675,40)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6676,17)-(6676,44)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "isEmpty(searchList[i])"
      range: "(6676,49)-(6676,70)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "replacementList[i] == null"
      range: "(6676,75)-(6676,100)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6692
      expression: "textIndex == -1"
      range: "(6692,13)-(6692,27)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachWhenTempIndexEqualsMinus1AndTextIndexEqualsMinus1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean6"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "replacementListItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6675
      expression: "i < searchLength"
      range: "(6675,25)-(6675,40)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6676,17)-(6676,44)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "isEmpty(searchList[i])"
      range: "(6676,49)-(6676,70)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "replacementList[i] == null"
      range: "(6676,75)-(6676,100)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6682
      expression: "tempIndex == -1"
      range: "(6682,17)-(6682,31)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6692
      expression: "textIndex == -1"
      range: "(6692,13)-(6692,27)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachWhenTempIndexEqualsMinus1AndILessThanTextLengthAndNotRepeat"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean6"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "string15"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BHCG"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "AF"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BHAFG"
      valueType: "java.lang.String"
      uuid: "string15"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6675
      expression: "i < searchLength"
      range: "(6675,25)-(6675,40)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6676,17)-(6676,44)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "isEmpty(searchList[i])"
      range: "(6676,49)-(6676,70)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "replacementList[i] == null"
      range: "(6676,75)-(6676,100)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6682
      expression: "tempIndex == -1"
      range: "(6682,17)-(6682,31)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6684
      expression: "textIndex == -1"
      range: "(6684,24)-(6684,38)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6692
      expression: "textIndex == -1"
      range: "(6692,13)-(6692,27)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6702
      expression: "i < searchList.length"
      range: "(6702,25)-(6702,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "searchList[i] == null"
      range: "(6703,17)-(6703,37)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "replacementList[i] == null"
      range: "(6703,42)-(6703,67)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6707
      expression: "greater > 0"
      range: "(6707,17)-(6707,27)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6716
      expression: "textIndex != -1"
      range: "(6716,16)-(6716,30)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6718
      expression: "i < textIndex"
      range: "(6718,33)-(6718,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6729
      expression: "i < searchLength"
      range: "(6729,29)-(6729,44)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6730,21)-(6730,48)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "isEmpty(searchList[i])"
      range: "(6730,53)-(6730,74)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "replacementList[i] == null"
      range: "(6730,79)-(6730,104)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6736
      expression: "tempIndex == -1"
      range: "(6736,21)-(6736,35)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6747
      expression: "i < textLength"
      range: "(6747,29)-(6747,42)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6751
      expression: "!repeat"
      range: "(6751,13)-(6751,19)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachWhenTextIndexEqualsMinus1AndILessThanTextLengthAndNotRepeat"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean6"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "string15"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BGCC"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "AF"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BGAFC"
      valueType: "java.lang.String"
      uuid: "string15"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6675
      expression: "i < searchLength"
      range: "(6675,25)-(6675,40)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6676,17)-(6676,44)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "isEmpty(searchList[i])"
      range: "(6676,49)-(6676,70)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "replacementList[i] == null"
      range: "(6676,75)-(6676,100)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6682
      expression: "tempIndex == -1"
      range: "(6682,17)-(6682,31)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6684
      expression: "textIndex == -1"
      range: "(6684,24)-(6684,38)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6692
      expression: "textIndex == -1"
      range: "(6692,13)-(6692,27)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6702
      expression: "i < searchList.length"
      range: "(6702,25)-(6702,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "searchList[i] == null"
      range: "(6703,17)-(6703,37)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "replacementList[i] == null"
      range: "(6703,42)-(6703,67)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6707
      expression: "greater > 0"
      range: "(6707,17)-(6707,27)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6716
      expression: "textIndex != -1"
      range: "(6716,16)-(6716,30)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6718
      expression: "i < textIndex"
      range: "(6718,33)-(6718,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6729
      expression: "i < searchLength"
      range: "(6729,29)-(6729,44)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6730,21)-(6730,48)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "isEmpty(searchList[i])"
      range: "(6730,53)-(6730,74)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "replacementList[i] == null"
      range: "(6730,79)-(6730,104)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6736
      expression: "tempIndex == -1"
      range: "(6736,21)-(6736,35)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6738
      expression: "textIndex == -1"
      range: "(6738,28)-(6738,42)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6747
      expression: "i < textLength"
      range: "(6747,29)-(6747,42)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6751
      expression: "!repeat"
      range: "(6751,13)-(6751,19)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "replaceEachRepeatedly"
    sourceCodeSignature: "String replaceEachRepeatedly(final String text, final String[]\
      \ searchList, final String[] replacementList)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchList"
      type: "java.lang.String[]"
    - name: "replacementList"
      type: "java.lang.String[]"
    instructionFingerprint: "0F4F37D8A5A49C8F3506569622AF68F4"
  paths:
  - testPathName: "replaceEachRepeatedlyWhenSearchSetNotIsEmptyThrowsIllegalStateException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalStateException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Set.retainAll(java.util.HashSet<java.lang.String>)\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Aborting to protect against StackOverflowError - output of one\
                \ loop is the input of another"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6644
      expression: "!searchSet.isEmpty()"
      range: "(6644,17)-(6644,36)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachRepeatedlyWhenTimeToLiveEqualsMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Set.retainAll(java.util.HashSet<java.lang.String>)\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6644
      expression: "!searchSet.isEmpty()"
      range: "(6644,17)-(6644,36)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachRepeatedlyWhenSearchLengthNotEqualsReplacementLengthThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Set.retainAll(java.util.HashSet<java.lang.String>)\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "s1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6644
      expression: "!searchSet.isEmpty()"
      range: "(6644,17)-(6644,36)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachRepeatedlyWhenTextIndexEqualsMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean3"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Set.retainAll(java.util.HashSet<java.lang.String>)\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6644
      expression: "!searchSet.isEmpty()"
      range: "(6644,17)-(6644,36)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6675
      expression: "i < searchLength"
      range: "(6675,25)-(6675,40)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6676,17)-(6676,44)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "isEmpty(searchList[i])"
      range: "(6676,49)-(6676,70)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "replacementList[i] == null"
      range: "(6676,75)-(6676,100)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6692
      expression: "textIndex == -1"
      range: "(6692,13)-(6692,27)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachRepeatedlyWhenILessThanTextLengthAndRepeat"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean3"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean8"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean10"
    - type: "RESULT"
      name: "result"
      valueUuid: "string14"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Set.retainAll(java.util.HashSet<java.lang.String>)\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string14"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6644
      expression: "!searchSet.isEmpty()"
      range: "(6644,17)-(6644,36)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6675
      expression: "i < searchLength"
      range: "(6675,25)-(6675,40)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6676,17)-(6676,44)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "isEmpty(searchList[i])"
      range: "(6676,49)-(6676,70)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "replacementList[i] == null"
      range: "(6676,75)-(6676,100)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6682
      expression: "tempIndex == -1"
      range: "(6682,17)-(6682,31)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6684
      expression: "textIndex == -1"
      range: "(6684,24)-(6684,38)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6692
      expression: "textIndex == -1"
      range: "(6692,13)-(6692,27)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6702
      expression: "i < searchList.length"
      range: "(6702,25)-(6702,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "searchList[i] == null"
      range: "(6703,17)-(6703,37)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "replacementList[i] == null"
      range: "(6703,42)-(6703,67)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6707
      expression: "greater > 0"
      range: "(6707,17)-(6707,27)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6716
      expression: "textIndex != -1"
      range: "(6716,16)-(6716,30)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6718
      expression: "i < textIndex"
      range: "(6718,33)-(6718,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6729
      expression: "i < searchLength"
      range: "(6729,29)-(6729,44)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6730,21)-(6730,48)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "isEmpty(searchList[i])"
      range: "(6730,53)-(6730,74)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "replacementList[i] == null"
      range: "(6730,79)-(6730,104)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6736
      expression: "tempIndex == -1"
      range: "(6736,21)-(6736,35)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6747
      expression: "i < textLength"
      range: "(6747,29)-(6747,42)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6751
      expression: "!repeat"
      range: "(6751,13)-(6751,19)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceEachRepeatedlyWhenINotLessThanTextLengthAndRepeat"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchList"
      valueUuid: "searchList"
    - type: "INPUT"
      name: "replacementList"
      valueUuid: "replacementList"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean3"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean8"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean10"
    - type: "RESULT"
      name: "result"
      valueUuid: "string14"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Set.retainAll(java.util.HashSet<java.lang.String>)\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "searchList"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "replacementList"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string14"
    branches:
    - lineNumber: 6640
      expression: "timeToLive < 0"
      range: "(6640,13)-(6640,26)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6644
      expression: "!searchSet.isEmpty()"
      range: "(6644,17)-(6644,36)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "isEmpty(text)"
      range: "(6650,13)-(6650,25)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(searchList)"
      range: "(6650,30)-(6650,59)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isEmpty(replacementList)"
      range: "(6650,64)-(6650,98)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "ArrayUtils.isNotEmpty(searchList)"
      range: "(6650,103)-(6650,135)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6650
      expression: "timeToLive == -1"
      range: "(6650,140)-(6650,155)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6658
      expression: "searchLength != replacementLength"
      range: "(6658,13)-(6658,45)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6675
      expression: "i < searchLength"
      range: "(6675,25)-(6675,40)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6676,17)-(6676,44)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "isEmpty(searchList[i])"
      range: "(6676,49)-(6676,70)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6676
      expression: "replacementList[i] == null"
      range: "(6676,75)-(6676,100)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6682
      expression: "tempIndex == -1"
      range: "(6682,17)-(6682,31)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6684
      expression: "textIndex == -1"
      range: "(6684,24)-(6684,38)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6692
      expression: "textIndex == -1"
      range: "(6692,13)-(6692,27)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6702
      expression: "i < searchList.length"
      range: "(6702,25)-(6702,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "searchList[i] == null"
      range: "(6703,17)-(6703,37)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6703
      expression: "replacementList[i] == null"
      range: "(6703,42)-(6703,67)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6707
      expression: "greater > 0"
      range: "(6707,17)-(6707,27)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6716
      expression: "textIndex != -1"
      range: "(6716,16)-(6716,30)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6718
      expression: "i < textIndex"
      range: "(6718,33)-(6718,45)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6729
      expression: "i < searchLength"
      range: "(6729,29)-(6729,44)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "noMoreMatchesForReplIndex[i]"
      range: "(6730,21)-(6730,48)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "isEmpty(searchList[i])"
      range: "(6730,53)-(6730,74)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6730
      expression: "replacementList[i] == null"
      range: "(6730,79)-(6730,104)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6736
      expression: "tempIndex == -1"
      range: "(6736,21)-(6736,35)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6738
      expression: "textIndex == -1"
      range: "(6738,28)-(6738,42)"
      evaluatedAs: true
      internalMethodName: "replaceEach"
    - lineNumber: 6747
      expression: "i < textLength"
      range: "(6747,29)-(6747,42)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    - lineNumber: 6751
      expression: "!repeat"
      range: "(6751,13)-(6751,19)"
      evaluatedAs: false
      internalMethodName: "replaceEach"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "replaceFirst"
    sourceCodeSignature: "String replaceFirst(final String text, final String regex,\
      \ final String replacement)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "regex"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    instructionFingerprint: "4948CCDE10292206FCD616739FC0C304"
  paths:
  - testPathName: "replaceFirstTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "regex"
      valueUuid: "regex"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "regex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "replaceIgnoreCase"
    sourceCodeSignature: "String replaceIgnoreCase(final String text, final String\
      \ searchString, final String replacement)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchString"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    instructionFingerprint: "9F15C17ADC285015769E141B8F545F58"
  paths:
  - testPathName: "replaceIgnoreCaseTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "replaceIgnoreCase(text,searchString,replacement,max):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_replaceIgnoreCase1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "max"
- method:
    name: "replaceIgnoreCase"
    sourceCodeSignature: "String replaceIgnoreCase(final String text, final String\
      \ searchString, final String replacement, final int max)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchString"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    - name: "max"
      type: "int"
    instructionFingerprint: "51B6255E8B5C5F85004012DDBFF2D12B"
  paths:
  - testPathName: "replaceIgnoreCase1WhenMaxEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: true
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceIgnoreCase1WhenEndEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfIgnoreCase(text,string,int1):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "text"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6373
      expression: "ignoreCase"
      range: "(6373,14)-(6373,23)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6377
      expression: "ignoreCase"
      range: "(6377,20)-(6377,29)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6378
      expression: "end == INDEX_NOT_FOUND"
      range: "(6378,14)-(6378,35)"
      evaluatedAs: true
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceIgnoreCase1WhenEndNotEqualsINDEX_NOT_FOUNDAndMaxEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfIgnoreCase(text,string,int1):int2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.append(java.lang.String,int,int)\
        \ : java.lang.StringBuilder"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6373
      expression: "ignoreCase"
      range: "(6373,14)-(6373,23)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6377
      expression: "ignoreCase"
      range: "(6377,20)-(6377,29)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6378
      expression: "end == INDEX_NOT_FOUND"
      range: "(6378,14)-(6378,35)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6383
      expression: "max < 0"
      range: "(6383,22)-(6383,28)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6385
      expression: "end != INDEX_NOT_FOUND"
      range: "(6385,17)-(6385,38)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6388
      expression: "--max == 0"
      range: "(6388,18)-(6388,27)"
      evaluatedAs: true
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "replaceIgnoreCase1WhenMaxNotEquals0AndIgnoreCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(text):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(searchString):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfIgnoreCase(text,string,int1):int2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "indexOfIgnoreCase(text,string,int11):int13"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.append(java.lang.String,int,int)\
        \ : java.lang.StringBuilder"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "max"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int13"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int11"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 6370
      expression: "isEmpty(text)"
      range: "(6370,14)-(6370,26)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "isEmpty(searchString)"
      range: "(6370,31)-(6370,51)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "replacement == null"
      range: "(6370,56)-(6370,74)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6370
      expression: "max == 0"
      range: "(6370,79)-(6370,86)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6373
      expression: "ignoreCase"
      range: "(6373,14)-(6373,23)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6377
      expression: "ignoreCase"
      range: "(6377,20)-(6377,29)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6378
      expression: "end == INDEX_NOT_FOUND"
      range: "(6378,14)-(6378,35)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6383
      expression: "max < 0"
      range: "(6383,22)-(6383,28)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6385
      expression: "end != INDEX_NOT_FOUND"
      range: "(6385,17)-(6385,38)"
      evaluatedAs: true
      internalMethodName: "replace"
    - lineNumber: 6388
      expression: "--max == 0"
      range: "(6388,18)-(6388,27)"
      evaluatedAs: false
      internalMethodName: "replace"
    - lineNumber: 6391
      expression: "ignoreCase"
      range: "(6391,20)-(6391,29)"
      evaluatedAs: true
      internalMethodName: "replace"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "replaceOnce"
    sourceCodeSignature: "String replaceOnce(final String text, final String searchString,\
      \ final String replacement)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchString"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    instructionFingerprint: "06BE0EB1F88DC9F37246173F295D3802"
  paths:
  - testPathName: "replaceOnceTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "replace(text,searchString,replacement,max):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_replace1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "max"
- method:
    name: "replaceOnceIgnoreCase"
    sourceCodeSignature: "String replaceOnceIgnoreCase(final String text, final String\
      \ searchString, final String replacement)"
    returnType: "java.lang.String"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "searchString"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    instructionFingerprint: "6D41007BFB7CAE782FF1EBABB08F3ADA"
  paths:
  - testPathName: "replaceOnceIgnoreCaseTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      valueUuid: "text"
    - type: "INPUT"
      name: "searchString"
      valueUuid: "searchString"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "replaceIgnoreCase(text,searchString,replacement,max):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "searchString1"
      valueType: "java.lang.String"
      uuid: "searchString"
    - sapientType: "BASIC"
      content: !<regular>
        value: "replacement1"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_replaceIgnoreCase1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "max"
- method:
    name: "replacePattern"
    sourceCodeSignature: "String replacePattern(final String source, final String\
      \ regex, final String replacement)"
    returnType: "java.lang.String"
    parameters:
    - name: "source"
      type: "java.lang.String"
    - name: "regex"
      type: "java.lang.String"
    - name: "replacement"
      type: "java.lang.String"
    instructionFingerprint: "9CDF0F4E005875F0D4E83D765F57B216"
  paths:
  - testPathName: "replacePatternTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      valueUuid: "source"
    - type: "INPUT"
      name: "regex"
      valueUuid: "regex"
    - type: "INPUT"
      name: "replacement"
      valueUuid: "replacement"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "regex"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "replacement"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "reverse"
    sourceCodeSignature: "String reverse(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "DD479D1C344447AB6912F0D3BE7520A5"
  paths:
  - testPathName: "reverseWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7033
      expression: "str == null"
      range: "(7033,13)-(7033,23)"
      evaluatedAs: true
  - testPathName: "reverseWhenStrIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.reverse() : java.lang.StringBuilder"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7033
      expression: "str == null"
      range: "(7033,13)-(7033,23)"
      evaluatedAs: false
- method:
    name: "reverseDelimited"
    sourceCodeSignature: "String reverseDelimited(final String str, final char separatorChar)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separatorChar"
      type: "char"
    instructionFingerprint: "821997AC6275C00034CE9E6B66887816"
  paths:
  - testPathName: "reverseDelimitedWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7059
      expression: "str == null"
      range: "(7059,13)-(7059,23)"
      evaluatedAs: true
  - testPathName: "reverseDelimitedWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "split(str,separatorChar):stringArray"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "join(stringArray,separatorChar):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_join1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7059
      expression: "str == null"
      range: "(7059,13)-(7059,23)"
      evaluatedAs: false
- method:
    name: "right"
    sourceCodeSignature: "String right(final String str, final int len)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "len"
      type: "int"
    instructionFingerprint: "295E3FB483D4CAF019751A843DF0F973"
  paths:
  - testPathName: "rightWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "len"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7090
      expression: "str == null"
      range: "(7090,13)-(7090,23)"
      evaluatedAs: true
  - testPathName: "rightWhenLenLessThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2147483648
      valueType: "int"
      uuid: "len"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 7090
      expression: "str == null"
      range: "(7090,13)-(7090,23)"
      evaluatedAs: false
    - lineNumber: 7093
      expression: "len < 0"
      range: "(7093,13)-(7093,19)"
      evaluatedAs: true
  - testPathName: "rightWhenStrLengthLessThanOrEqualsToLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "len"
    branches:
    - lineNumber: 7090
      expression: "str == null"
      range: "(7090,13)-(7090,23)"
      evaluatedAs: false
    - lineNumber: 7093
      expression: "len < 0"
      range: "(7093,13)-(7093,19)"
      evaluatedAs: false
    - lineNumber: 7096
      expression: "str.length() <= len"
      range: "(7096,13)-(7096,31)"
      evaluatedAs: true
  - testPathName: "rightWhenStrLengthGreaterThanLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "len"
      valueUuid: "len"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "len"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7090
      expression: "str == null"
      range: "(7090,13)-(7090,23)"
      evaluatedAs: false
    - lineNumber: 7093
      expression: "len < 0"
      range: "(7093,13)-(7093,19)"
      evaluatedAs: false
    - lineNumber: 7096
      expression: "str.length() <= len"
      range: "(7096,13)-(7096,31)"
      evaluatedAs: false
- method:
    name: "rightPad"
    sourceCodeSignature: "String rightPad(final String str, final int size)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    instructionFingerprint: "1D50B6639FF56C042FF182CCC0FDFAD9"
  paths:
  - testPathName: "rightPadTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "rightPad(str,size,padChar):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_rightPad1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: " "
      valueType: "char"
      uuid: "padChar"
- method:
    name: "rightPad"
    sourceCodeSignature: "String rightPad(final String str, final int size, final\
      \ char padChar)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    - name: "padChar"
      type: "char"
    instructionFingerprint: "733FFA64DCEB2AAD559F2A1BC09C9467"
  paths:
  - testPathName: "rightPad1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7147
      expression: "str == null"
      range: "(7147,13)-(7147,23)"
      evaluatedAs: true
  - testPathName: "rightPad1WhenPadsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    branches:
    - lineNumber: 7147
      expression: "str == null"
      range: "(7147,13)-(7147,23)"
      evaluatedAs: false
    - lineNumber: 7151
      expression: "pads <= 0"
      range: "(7151,13)-(7151,21)"
      evaluatedAs: true
  - testPathName: "rightPad1WhenPadsGreaterThanPAD_LIMIT"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "rightPad(str,size,string):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8193
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_rightPad1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7147
      expression: "str == null"
      range: "(7147,13)-(7147,23)"
      evaluatedAs: false
    - lineNumber: 7151
      expression: "pads <= 0"
      range: "(7151,13)-(7151,21)"
      evaluatedAs: false
    - lineNumber: 7154
      expression: "pads > PAD_LIMIT"
      range: "(7154,13)-(7154,28)"
      evaluatedAs: true
  - testPathName: "rightPad1WhenPadsNotGreaterThanPAD_LIMIT"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padChar"
      valueUuid: "padChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "repeat(padChar,int2):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "padChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 7147
      expression: "str == null"
      range: "(7147,13)-(7147,23)"
      evaluatedAs: false
    - lineNumber: 7151
      expression: "pads <= 0"
      range: "(7151,13)-(7151,21)"
      evaluatedAs: false
    - lineNumber: 7154
      expression: "pads > PAD_LIMIT"
      range: "(7154,13)-(7154,28)"
      evaluatedAs: false
- method:
    name: "rightPad"
    sourceCodeSignature: "String rightPad(final String str, final int size, String\
      \ padStr)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "size"
      type: "int"
    - name: "padStr"
      type: "java.lang.String"
    instructionFingerprint: "7536D7D2E740E768B9E6D2EEA3CA9933"
  paths:
  - testPathName: "rightPad2WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7184
      expression: "str == null"
      range: "(7184,13)-(7184,23)"
      evaluatedAs: true
  - testPathName: "rightPad2WhenPadsLessThanOrEqualsTo0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 7184
      expression: "str == null"
      range: "(7184,13)-(7184,23)"
      evaluatedAs: false
    - lineNumber: 7187
      expression: "isEmpty(padStr)"
      range: "(7187,13)-(7187,27)"
      evaluatedAs: true
    - lineNumber: 7193
      expression: "pads <= 0"
      range: "(7193,13)-(7193,21)"
      evaluatedAs: true
  - testPathName: "rightPad2WhenPadsLessThanOrEqualsToPAD_LIMIT"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "rightPad(str,size,char1):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_rightPad1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: " "
      valueType: "char"
      uuid: "char1"
    branches:
    - lineNumber: 7184
      expression: "str == null"
      range: "(7184,13)-(7184,23)"
      evaluatedAs: false
    - lineNumber: 7187
      expression: "isEmpty(padStr)"
      range: "(7187,13)-(7187,27)"
      evaluatedAs: true
    - lineNumber: 7193
      expression: "pads <= 0"
      range: "(7193,13)-(7193,21)"
      evaluatedAs: false
    - lineNumber: 7196
      expression: "padLen == 1"
      range: "(7196,13)-(7196,23)"
      evaluatedAs: true
    - lineNumber: 7196
      expression: "pads <= PAD_LIMIT"
      range: "(7196,28)-(7196,44)"
      evaluatedAs: true
  - testPathName: "rightPad2WhenPadsEqualsPadLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CAB"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7184
      expression: "str == null"
      range: "(7184,13)-(7184,23)"
      evaluatedAs: false
    - lineNumber: 7187
      expression: "isEmpty(padStr)"
      range: "(7187,13)-(7187,27)"
      evaluatedAs: false
    - lineNumber: 7193
      expression: "pads <= 0"
      range: "(7193,13)-(7193,21)"
      evaluatedAs: false
    - lineNumber: 7196
      expression: "padLen == 1"
      range: "(7196,13)-(7196,23)"
      evaluatedAs: false
    - lineNumber: 7200
      expression: "pads == padLen"
      range: "(7200,13)-(7200,26)"
      evaluatedAs: true
  - testPathName: "rightPad2WhenPadsLessThanPadLen"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CD"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "AC"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 7184
      expression: "str == null"
      range: "(7184,13)-(7184,23)"
      evaluatedAs: false
    - lineNumber: 7187
      expression: "isEmpty(padStr)"
      range: "(7187,13)-(7187,27)"
      evaluatedAs: false
    - lineNumber: 7193
      expression: "pads <= 0"
      range: "(7193,13)-(7193,21)"
      evaluatedAs: false
    - lineNumber: 7196
      expression: "padLen == 1"
      range: "(7196,13)-(7196,23)"
      evaluatedAs: false
    - lineNumber: 7200
      expression: "pads == padLen"
      range: "(7200,13)-(7200,26)"
      evaluatedAs: false
    - lineNumber: 7203
      expression: "pads < padLen"
      range: "(7203,13)-(7203,25)"
      evaluatedAs: true
  - testPathName: "rightPad2WhenILessThanPads"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "size"
      valueUuid: "size"
    - type: "INPUT"
      name: "padStr"
      valueUuid: "padStr"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(padStr):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "size"
    - sapientType: "BASIC"
      content: !<regular>
        value: "padStr1"
      valueType: "java.lang.String"
      uuid: "padStr"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 7184
      expression: "str == null"
      range: "(7184,13)-(7184,23)"
      evaluatedAs: false
    - lineNumber: 7187
      expression: "isEmpty(padStr)"
      range: "(7187,13)-(7187,27)"
      evaluatedAs: true
    - lineNumber: 7193
      expression: "pads <= 0"
      range: "(7193,13)-(7193,21)"
      evaluatedAs: false
    - lineNumber: 7196
      expression: "padLen == 1"
      range: "(7196,13)-(7196,23)"
      evaluatedAs: true
    - lineNumber: 7196
      expression: "pads <= PAD_LIMIT"
      range: "(7196,28)-(7196,44)"
      evaluatedAs: false
    - lineNumber: 7200
      expression: "pads == padLen"
      range: "(7200,13)-(7200,26)"
      evaluatedAs: false
    - lineNumber: 7203
      expression: "pads < padLen"
      range: "(7203,13)-(7203,25)"
      evaluatedAs: false
    - lineNumber: 7208
      expression: "i < pads"
      range: "(7208,25)-(7208,32)"
      evaluatedAs: true
- method:
    name: "rotate"
    sourceCodeSignature: "String rotate(final String str, final int shift)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "shift"
      type: "int"
    instructionFingerprint: "55B9BCB01C7BDEF542B533EDEA95E10F"
  paths:
  - testPathName: "rotateWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "shift"
      valueUuid: "shift"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "shift"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 7241
      expression: "str == null"
      range: "(7241,13)-(7241,23)"
      evaluatedAs: true
  - testPathName: "rotateWhenShiftModulusStrLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "shift"
      valueUuid: "shift"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "shift"
    branches:
    - lineNumber: 7241
      expression: "str == null"
      range: "(7241,13)-(7241,23)"
      evaluatedAs: false
    - lineNumber: 7246
      expression: "shift == 0"
      range: "(7246,13)-(7246,22)"
      evaluatedAs: false
    - lineNumber: 7246
      expression: "strLen == 0"
      range: "(7246,27)-(7246,37)"
      evaluatedAs: false
    - lineNumber: 7246
      expression: "shift % strLen == 0"
      range: "(7246,42)-(7246,60)"
      evaluatedAs: true
  - testPathName: "rotateWhenShiftModulusStrLenNotEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "shift"
      valueUuid: "shift"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "substring(str,int4):string"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "substring(str,start,int4):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string3"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "shift"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "D"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CD"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 7241
      expression: "str == null"
      range: "(7241,13)-(7241,23)"
      evaluatedAs: false
    - lineNumber: 7246
      expression: "shift == 0"
      range: "(7246,13)-(7246,22)"
      evaluatedAs: false
    - lineNumber: 7246
      expression: "strLen == 0"
      range: "(7246,27)-(7246,37)"
      evaluatedAs: false
    - lineNumber: 7246
      expression: "shift % strLen == 0"
      range: "(7246,42)-(7246,60)"
      evaluatedAs: false
- method:
    name: "split"
    sourceCodeSignature: "String[] split(final String str)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "40042760EB02228ED9E7E1B91E2BAA49"
  paths:
  - testPathName: "splitTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "split(str,separatorChars,max):stringArray"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "max"
- method:
    name: "split"
    sourceCodeSignature: "String[] split(final String str, final char separatorChar)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separatorChar"
      type: "char"
    instructionFingerprint: "6B303A8CAF6FF1D67AA49171DC1070D6"
  paths:
  - testPathName: "split1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split1WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7831
      expression: "len == 0"
      range: "(7831,13)-(7831,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split1WhenMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7831
      expression: "len == 0"
      range: "(7831,13)-(7831,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7839
      expression: "i < len"
      range: "(7839,16)-(7839,22)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7840
      expression: "str.charAt(i) == separatorChar"
      range: "(7840,17)-(7840,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7853
      expression: "match"
      range: "(7853,13)-(7853,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split1WhenNotPreserveAllTokens"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7831
      expression: "len == 0"
      range: "(7831,13)-(7831,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7839
      expression: "i < len"
      range: "(7839,16)-(7839,22)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7840
      expression: "str.charAt(i) == separatorChar"
      range: "(7840,17)-(7840,46)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7841
      expression: "match"
      range: "(7841,21)-(7841,25)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7841
      expression: "preserveAllTokens"
      range: "(7841,30)-(7841,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7853
      expression: "match"
      range: "(7853,13)-(7853,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7853
      expression: "preserveAllTokens"
      range: "(7853,22)-(7853,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "split"
    sourceCodeSignature: "String[] split(final String str, final String separatorChars)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separatorChars"
      type: "java.lang.String"
    instructionFingerprint: "0E86282E538A8367B82209ED42FF7CE5"
  paths:
  - testPathName: "split2WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split2WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split2WhenCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split2WhenMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split2WhenSeparatorCharsIndexOfStrCharAtILessThan0AndMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CB"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split2WhenNotPreserveAllTokens"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split2WhenNotMatchAndNotPreserveAllTokens"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "match"
      range: "(7916,25)-(7916,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "preserveAllTokens"
      range: "(7916,34)-(7916,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split2WhenNotPreserveAllTokensAndNotMatchAndNotPreserveAllTokens"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "match"
      range: "(7936,25)-(7936,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "preserveAllTokens"
      range: "(7936,34)-(7936,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "split"
    sourceCodeSignature: "String[] split(final String str, final String separatorChars,\
      \ final int max)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separatorChars"
      type: "java.lang.String"
    - name: "max"
      type: "int"
    instructionFingerprint: "930B5B0A3CF5A372021AF05EE2628970"
  paths:
  - testPathName: "split3WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split3WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split3WhenCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split3WhenMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split3WhenSeparatorCharsIndexOfStrCharAtILessThan0AndMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CB"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split3WhenNotPreserveAllTokens"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split3WhenNotMatchAndNotPreserveAllTokens"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "match"
      range: "(7916,25)-(7916,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "preserveAllTokens"
      range: "(7916,34)-(7916,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "split3WhenNotPreserveAllTokensAndNotMatchAndNotPreserveAllTokens"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "match"
      range: "(7936,25)-(7936,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "preserveAllTokens"
      range: "(7936,34)-(7936,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitByCharacterType"
    sourceCodeSignature: "String[] splitByCharacterType(final String str)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "BB3DF280E62A3A788BFA74825651BEF0"
  paths:
  - testPathName: "splitByCharacterTypeWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByCharacterTypeWhenStrIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7415
      expression: "str.isEmpty()"
      range: "(7415,13)-(7415,25)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByCharacterTypeWhenTypeEqualsCurrentType"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7415
      expression: "str.isEmpty()"
      range: "(7415,13)-(7415,25)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7422
      expression: "pos < c.length"
      range: "(7422,40)-(7422,53)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7424
      expression: "type == currentType"
      range: "(7424,17)-(7424,35)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByCharacterTypeWhenNotCamelCase"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7415
      expression: "str.isEmpty()"
      range: "(7415,13)-(7415,25)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7422
      expression: "pos < c.length"
      range: "(7422,40)-(7422,53)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7424
      expression: "type == currentType"
      range: "(7424,17)-(7424,35)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7427
      expression: "camelCase"
      range: "(7427,17)-(7427,25)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitByCharacterTypeCamelCase"
    sourceCodeSignature: "String[] splitByCharacterTypeCamelCase(final String str)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "16CD9FC71061234E534F64DD68226B89"
  paths:
  - testPathName: "splitByCharacterTypeCamelCaseWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByCharacterTypeCamelCaseWhenStrIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7415
      expression: "str.isEmpty()"
      range: "(7415,13)-(7415,25)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByCharacterTypeCamelCaseWhenTypeEqualsCurrentType"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7415
      expression: "str.isEmpty()"
      range: "(7415,13)-(7415,25)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7422
      expression: "pos < c.length"
      range: "(7422,40)-(7422,53)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7424
      expression: "type == currentType"
      range: "(7424,17)-(7424,35)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByCharacterTypeCamelCaseWhenCurrentTypeNotEqualsCharacterUPPERCASE_LETTER"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7412
      expression: "str == null"
      range: "(7412,13)-(7412,23)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7415
      expression: "str.isEmpty()"
      range: "(7415,13)-(7415,25)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7422
      expression: "pos < c.length"
      range: "(7422,40)-(7422,53)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7424
      expression: "type == currentType"
      range: "(7424,17)-(7424,35)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7427
      expression: "camelCase"
      range: "(7427,17)-(7427,25)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7427
      expression: "type == Character.LOWERCASE_LETTER"
      range: "(7427,30)-(7427,63)"
      evaluatedAs: true
      internalMethodName: "splitByCharacterType"
    - lineNumber: 7427
      expression: "currentType == Character.UPPERCASE_LETTER"
      range: "(7427,68)-(7427,108)"
      evaluatedAs: false
      internalMethodName: "splitByCharacterType"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitByWholeSeparator"
    sourceCodeSignature: "String[] splitByWholeSeparator(final String str, final String\
      \ separator)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "1B2B45E36F861ED180CF78CBF9BCDBCF"
  paths:
  - testPathName: "splitByWholeSeparatorWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorWhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorWhenStrIsNotNullAndLenEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorWhenILessThanLenAndCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorWhenNumberOfSubstringsNotEqualsMaxAndNotPreserveAllTokens"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "ABC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7628
      expression: "end < len"
      range: "(7628,16)-(7628,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7631
      expression: "end > -1"
      range: "(7631,17)-(7631,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7632
      expression: "end > beg"
      range: "(7632,21)-(7632,29)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7635
      expression: "numberOfSubstrings == max"
      range: "(7635,25)-(7635,49)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7650
      expression: "preserveAllTokens"
      range: "(7650,25)-(7650,41)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorWhenNotMatchAndNotPreserveAllTokens"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitByWholeSeparator"
    sourceCodeSignature: "String[] splitByWholeSeparator(final String str, final String\
      \ separator, final int max)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    - name: "max"
      type: "int"
    instructionFingerprint: "056B49A4C63DF8567D05B1E219580E7B"
  paths:
  - testPathName: "splitByWholeSeparator1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparator1WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparator1WhenStrIsNotNullAndLenEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparator1WhenILessThanLenAndCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparator1WhenNumberOfSubstringsEqualsMaxAndNotPreserveAllTokens"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string3"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7628
      expression: "end < len"
      range: "(7628,16)-(7628,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7631
      expression: "end > -1"
      range: "(7631,17)-(7631,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7632
      expression: "end > beg"
      range: "(7632,21)-(7632,29)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7635
      expression: "numberOfSubstrings == max"
      range: "(7635,25)-(7635,49)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7650
      expression: "preserveAllTokens"
      range: "(7650,25)-(7650,41)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparator1WhenNotMatchAndNotPreserveAllTokens"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitByWholeSeparatorPreserveAllTokens"
    sourceCodeSignature: "String[] splitByWholeSeparatorPreserveAllTokens(final String\
      \ str, final String separator)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "1B25E706E8621033DF214E157AB2B72B"
  paths:
  - testPathName: "splitByWholeSeparatorPreserveAllTokensWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokensWhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokensWhenStrIsNotNullAndLenEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokensWhenILessThanLenAndCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokensWhenPreserveAllTokensAndNumberOfSubstringsNotEqualsMax"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "ABC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArrayItem2"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7628
      expression: "end < len"
      range: "(7628,16)-(7628,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7631
      expression: "end > -1"
      range: "(7631,17)-(7631,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7632
      expression: "end > beg"
      range: "(7632,21)-(7632,29)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7635
      expression: "numberOfSubstrings == max"
      range: "(7635,25)-(7635,49)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7650
      expression: "preserveAllTokens"
      range: "(7650,25)-(7650,41)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7652
      expression: "numberOfSubstrings == max"
      range: "(7652,29)-(7652,53)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokensWhenLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7897
      expression: "sizePlus1++ == max"
      range: "(7897,29)-(7897,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitByWholeSeparatorPreserveAllTokens"
    sourceCodeSignature: "String[] splitByWholeSeparatorPreserveAllTokens(final String\
      \ str, final String separator, final int max)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    - name: "max"
      type: "int"
    instructionFingerprint: "B058F54BB8340F2CA02D6C3641EAE77C"
  paths:
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenStrIsNotNullAndLenEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenILessThanLenAndCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenPreserveAllTokensAndNumberOfSubstringsNotEqualsMax"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArrayItem3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string3"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7628
      expression: "end < len"
      range: "(7628,16)-(7628,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7631
      expression: "end > -1"
      range: "(7631,17)-(7631,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7632
      expression: "end > beg"
      range: "(7632,21)-(7632,29)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7635
      expression: "numberOfSubstrings == max"
      range: "(7635,25)-(7635,49)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7650
      expression: "preserveAllTokens"
      range: "(7650,25)-(7650,41)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7652
      expression: "numberOfSubstrings == max"
      range: "(7652,29)-(7652,53)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenPreserveAllTokensAndNumberOfSubstringsEqualsMax"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string3"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7628
      expression: "end < len"
      range: "(7628,16)-(7628,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7631
      expression: "end > -1"
      range: "(7631,17)-(7631,24)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7632
      expression: "end > beg"
      range: "(7632,21)-(7632,29)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7635
      expression: "numberOfSubstrings == max"
      range: "(7635,25)-(7635,49)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7650
      expression: "preserveAllTokens"
      range: "(7650,25)-(7650,41)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7652
      expression: "numberOfSubstrings == max"
      range: "(7652,29)-(7652,53)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenNotLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7897
      expression: "sizePlus1++ == max"
      range: "(7897,29)-(7897,46)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitByWholeSeparatorPreserveAllTokens1WhenLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7607
      expression: "str == null"
      range: "(7607,13)-(7607,23)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7613
      expression: "len == 0"
      range: "(7613,13)-(7613,20)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "separator == null"
      range: "(7617,13)-(7617,29)"
      evaluatedAs: false
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7617
      expression: "EMPTY.equals(separator)"
      range: "(7617,34)-(7617,56)"
      evaluatedAs: true
      internalMethodName: "splitByWholeSeparatorWorker"
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7897
      expression: "sizePlus1++ == max"
      range: "(7897,29)-(7897,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitPreserveAllTokens"
    sourceCodeSignature: "String[] splitPreserveAllTokens(final String str)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "C8449A75562A3489935014DABD2FC8AC"
  paths:
  - testPathName: "splitPreserveAllTokensWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokensWhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokensWhenCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokensWhenLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7897
      expression: "sizePlus1++ == max"
      range: "(7897,29)-(7897,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitPreserveAllTokens"
    sourceCodeSignature: "String[] splitPreserveAllTokens(final String str, final\
      \ char separatorChar)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separatorChar"
      type: "char"
    instructionFingerprint: "5E07A91607A2436EDA4BD357FB2BCE98"
  paths:
  - testPathName: "splitPreserveAllTokens1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens1WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7831
      expression: "len == 0"
      range: "(7831,13)-(7831,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens1WhenMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7831
      expression: "len == 0"
      range: "(7831,13)-(7831,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7839
      expression: "i < len"
      range: "(7839,16)-(7839,22)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7840
      expression: "str.charAt(i) == separatorChar"
      range: "(7840,17)-(7840,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7853
      expression: "match"
      range: "(7853,13)-(7853,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens1WhenLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChar"
      valueUuid: "separatorChar"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separatorChar"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7827
      expression: "str == null"
      range: "(7827,13)-(7827,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7831
      expression: "len == 0"
      range: "(7831,13)-(7831,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7839
      expression: "i < len"
      range: "(7839,16)-(7839,22)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7840
      expression: "str.charAt(i) == separatorChar"
      range: "(7840,17)-(7840,46)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7841
      expression: "match"
      range: "(7841,21)-(7841,25)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7841
      expression: "preserveAllTokens"
      range: "(7841,30)-(7841,46)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7853
      expression: "match"
      range: "(7853,13)-(7853,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7853
      expression: "preserveAllTokens"
      range: "(7853,22)-(7853,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7853
      expression: "lastMatch"
      range: "(7853,43)-(7853,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitPreserveAllTokens"
    sourceCodeSignature: "String[] splitPreserveAllTokens(final String str, final\
      \ String separatorChars)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separatorChars"
      type: "java.lang.String"
    instructionFingerprint: "703BEF6E5FADE3A87393FC45877C3F70"
  paths:
  - testPathName: "splitPreserveAllTokens2WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens2WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens2WhenCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens2WhenMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens2WhenSeparatorCharsIndexOfStrCharAtILessThan0AndMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CB"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens2WhenLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7897
      expression: "sizePlus1++ == max"
      range: "(7897,29)-(7897,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens2WhenPreserveAllTokensAndLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "match"
      range: "(7916,25)-(7916,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "preserveAllTokens"
      range: "(7916,34)-(7916,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7918
      expression: "sizePlus1++ == max"
      range: "(7918,29)-(7918,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens2WhenNotMatchAndPreserveAllTokensAndLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "match"
      range: "(7936,25)-(7936,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "preserveAllTokens"
      range: "(7936,34)-(7936,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7938
      expression: "sizePlus1++ == max"
      range: "(7938,29)-(7938,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "splitPreserveAllTokens"
    sourceCodeSignature: "String[] splitPreserveAllTokens(final String str, final\
      \ String separatorChars, final int max)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separatorChars"
      type: "java.lang.String"
    - name: "max"
      type: "int"
    instructionFingerprint: "782FEB3BAA7837D3050E6DFF5BDC26B3"
  paths:
  - testPathName: "splitPreserveAllTokens3WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separatorChars1"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenCharacterNotIsWhitespaceStrCharAtIThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenSeparatorCharsIndexOfStrCharAtILessThan0AndMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CB"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenNotLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "resultItem1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7893
      expression: "i < len"
      range: "(7893,20)-(7893,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7894
      expression: "Character.isWhitespace(str.charAt(i))"
      range: "(7894,21)-(7894,57)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "match"
      range: "(7895,25)-(7895,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7895
      expression: "preserveAllTokens"
      range: "(7895,34)-(7895,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7897
      expression: "sizePlus1++ == max"
      range: "(7897,29)-(7897,46)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenPreserveAllTokensAndNotLastMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "match"
      range: "(7916,25)-(7916,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "preserveAllTokens"
      range: "(7916,34)-(7916,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7918
      expression: "sizePlus1++ == max"
      range: "(7918,29)-(7918,46)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenPreserveAllTokensAndLastMatch"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7914
      expression: "i < len"
      range: "(7914,20)-(7914,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7915
      expression: "str.charAt(i) == sep"
      range: "(7915,21)-(7915,40)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "match"
      range: "(7916,25)-(7916,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7916
      expression: "preserveAllTokens"
      range: "(7916,34)-(7916,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7918
      expression: "sizePlus1++ == max"
      range: "(7918,29)-(7918,46)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "splitPreserveAllTokens3WhenNotMatchAndPreserveAllTokensAndNotLastMatch"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separatorChars"
      valueUuid: "separatorChars"
    - type: "INPUT"
      name: "max"
      valueUuid: "max"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "separatorChars"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "max"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 7878
      expression: "str == null"
      range: "(7878,13)-(7878,23)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7882
      expression: "len == 0"
      range: "(7882,13)-(7882,20)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7891
      expression: "separatorChars == null"
      range: "(7891,13)-(7891,34)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7911
      expression: "separatorChars.length() == 1"
      range: "(7911,20)-(7911,47)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7934
      expression: "i < len"
      range: "(7934,20)-(7934,26)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7935
      expression: "separatorChars.indexOf(str.charAt(i)) >= 0"
      range: "(7935,21)-(7935,62)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "match"
      range: "(7936,25)-(7936,29)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7936
      expression: "preserveAllTokens"
      range: "(7936,34)-(7936,50)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7938
      expression: "sizePlus1++ == max"
      range: "(7938,29)-(7938,46)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "match"
      range: "(7953,13)-(7953,17)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "preserveAllTokens"
      range: "(7953,22)-(7953,38)"
      evaluatedAs: true
      internalMethodName: "splitWorker"
    - lineNumber: 7953
      expression: "lastMatch"
      range: "(7953,43)-(7953,51)"
      evaluatedAs: false
      internalMethodName: "splitWorker"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "startsWith"
    sourceCodeSignature: "boolean startsWith(final CharSequence str, final CharSequence\
      \ prefix)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "prefix"
      type: "java.lang.CharSequence"
    instructionFingerprint: "16C3BF2976A4709BD137849AF62F8368"
  paths:
  - testPathName: "startsWithWhenPrefixIsNullAndStrEqualsPrefix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithWhenPrefixIsNullAndStrNotEqualsPrefix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithWhenPreLenGreaterThanStrLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithWhenCharSequenceUtilsRegionMatchesStrIgnoreCase0Prefix0PreLen"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithWhenCharSequenceUtilsNotRegionMatchesStrIgnoreCase0Prefix0PreLen"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "startsWithAny"
    sourceCodeSignature: "boolean startsWithAny(final CharSequence sequence, final\
      \ CharSequence... searchStrings)"
    returnType: "boolean"
    parameters:
    - name: "sequence"
      type: "java.lang.CharSequence"
    - name: "searchStrings"
      type: "java.lang.CharSequence[]"
    instructionFingerprint: "1798B9C5F52668D713DF68B2807E9E85"
  paths:
  - testPathName: "startsWithAnyWhenArrayUtilsIsEmptySearchStrings"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sequence"
      valueUuid: "sequence"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sequence):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "sequence1"
      valueType: "java.lang.String"
      uuid: "sequence"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8031
      expression: "isEmpty(sequence)"
      range: "(8031,13)-(8031,29)"
      evaluatedAs: false
    - lineNumber: 8031
      expression: "ArrayUtils.isEmpty(searchStrings)"
      range: "(8031,34)-(8031,66)"
      evaluatedAs: true
  - testPathName: "startsWithAnyWhenStartsWithSequenceSearchString"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sequence"
      valueUuid: "sequence"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sequence):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "startsWith(sequence,charSequence):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "sequence1"
      valueType: "java.lang.String"
      uuid: "sequence"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8031
      expression: "isEmpty(sequence)"
      range: "(8031,13)-(8031,29)"
      evaluatedAs: false
    - lineNumber: 8031
      expression: "ArrayUtils.isEmpty(searchStrings)"
      range: "(8031,34)-(8031,66)"
      evaluatedAs: false
    - lineNumber: 8034
      expression: "for-each(searchStrings)"
      range: "(8034,48)-(8034,60)"
      evaluatedAs: true
    - lineNumber: 8035
      expression: "startsWith(sequence, searchString)"
      range: "(8035,17)-(8035,50)"
      evaluatedAs: true
  - testPathName: "startsWithAnyWhenStartsWithNotSequenceSearchString"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sequence"
      valueUuid: "sequence"
    - type: "INPUT"
      name: "searchStrings"
      valueUuid: "searchStrings"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(sequence):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "startsWith(sequence,charSequence):boolean3"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "sequence1"
      valueType: "java.lang.String"
      uuid: "sequence"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "charSequence1"
            valueType: "java.lang.String"
            uuid: "charSequence"
      valueType: "java.lang.CharSequence[]"
      uuid: "searchStrings"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "charSequence1"
      valueType: "java.lang.String"
      uuid: "charSequence"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8031
      expression: "isEmpty(sequence)"
      range: "(8031,13)-(8031,29)"
      evaluatedAs: false
    - lineNumber: 8031
      expression: "ArrayUtils.isEmpty(searchStrings)"
      range: "(8031,34)-(8031,66)"
      evaluatedAs: false
    - lineNumber: 8034
      expression: "for-each(searchStrings)"
      range: "(8034,48)-(8034,60)"
      evaluatedAs: true
    - lineNumber: 8035
      expression: "startsWith(sequence, searchString)"
      range: "(8035,17)-(8035,50)"
      evaluatedAs: false
- method:
    name: "startsWithIgnoreCase"
    sourceCodeSignature: "boolean startsWithIgnoreCase(final CharSequence str, final\
      \ CharSequence prefix)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.CharSequence"
    - name: "prefix"
      type: "java.lang.CharSequence"
    instructionFingerprint: "C78D2E653D0FCA510C18D7FE4C9A2A21"
  paths:
  - testPathName: "startsWithIgnoreCaseWhenPrefixIsNullAndStrEqualsPrefix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "prefix"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithIgnoreCaseWhenPrefixIsNullAndStrNotEqualsPrefix"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    - lineNumber: 7998
      expression: "str == prefix"
      range: "(7998,20)-(7998,32)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithIgnoreCaseWhenPreLenGreaterThanStrLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithIgnoreCaseWhenCharSequenceUtilsRegionMatchesStrIgnoreCase0Prefix0PreLen"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: true
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "startsWithIgnoreCaseWhenCharSequenceUtilsNotRegionMatchesStrIgnoreCase0Prefix0PreLen"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "prefix"
      valueUuid: "prefix"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "prefix1"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 7997
      expression: "str == null"
      range: "(7997,13)-(7997,23)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 7997
      expression: "prefix == null"
      range: "(7997,28)-(7997,41)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8002
      expression: "preLen > str.length()"
      range: "(8002,13)-(8002,33)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    - lineNumber: 8005
      expression: "CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0,\
        \ preLen)"
      range: "(8005,16)-(8005,85)"
      evaluatedAs: false
      internalMethodName: "startsWith"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "strip"
    sourceCodeSignature: "String strip(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "A82CB084085C86743890D82556CDCB1C"
  paths:
  - testPathName: "stripTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "strip(str,stripChars):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_strip1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "stripChars"
- method:
    name: "strip"
    sourceCodeSignature: "String strip(String str, final String stripChars)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "stripChars"
      type: "java.lang.String"
    instructionFingerprint: "27420E2A4B7AE5EB4D534DE5A3B11374"
  paths:
  - testPathName: "strip1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "stripStart(str,stripChars):string"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "stripEnd(string,stripChars):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "stripChars1"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_stripStart1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_stripEnd1"
      valueType: "java.lang.String"
      uuid: "string2"
- method:
    name: "stripAccents"
    sourceCodeSignature: "String stripAccents(final String input)"
    returnType: "java.lang.String"
    parameters:
    - name: "input"
      type: "java.lang.String"
    instructionFingerprint: "49745C47DBCBE316A31139674E9A0453"
  paths:
  - testPathName: "stripAccentsWhenInputIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "input"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8144
      expression: "input == null"
      range: "(8144,13)-(8144,25)"
      evaluatedAs: true
  - testPathName: "stripAccentsWhenDecomposedCharAtIEquals__u0141_"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.charAt(int) : char"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "input"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 8144
      expression: "input == null"
      range: "(8144,13)-(8144,25)"
      evaluatedAs: false
    - lineNumber: 1414
      expression: "i < decomposed.length()"
      range: "(1414,25)-(1414,47)"
      evaluatedAs: true
      internalMethodName: "convertRemainingAccentCharacters"
    - lineNumber: 1415
      expression: "decomposed.charAt(i) == '\\\\u0141'"
      range: "(1415,17)-(1415,48)"
      evaluatedAs: true
      internalMethodName: "convertRemainingAccentCharacters"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
  - testPathName: "stripAccentsWhenDecomposedCharAtIEquals__u0142_"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "input"
      valueUuid: "input"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.StringBuilder.charAt(int) : char"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "input"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 8144
      expression: "input == null"
      range: "(8144,13)-(8144,25)"
      evaluatedAs: false
    - lineNumber: 1414
      expression: "i < decomposed.length()"
      range: "(1414,25)-(1414,47)"
      evaluatedAs: true
      internalMethodName: "convertRemainingAccentCharacters"
    - lineNumber: 1415
      expression: "decomposed.charAt(i) == '\\\\u0141'"
      range: "(1415,17)-(1415,48)"
      evaluatedAs: false
      internalMethodName: "convertRemainingAccentCharacters"
    - lineNumber: 1417
      expression: "decomposed.charAt(i) == '\\\\u0142'"
      range: "(1417,24)-(1417,55)"
      evaluatedAs: true
      internalMethodName: "convertRemainingAccentCharacters"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.StringUtils"
- method:
    name: "stripAll"
    sourceCodeSignature: "String[] stripAll(final String... strs)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "strs"
      type: "java.lang.String[]"
    instructionFingerprint: "8B2182630B6A9F16928E2B9224AC4A2B"
  paths:
  - testPathName: "stripAllTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "stripAll(strs,stripChars):stringArray"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "stripChars"
- method:
    name: "stripAll"
    sourceCodeSignature: "String[] stripAll(final String[] strs, final String stripChars)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "strs"
      type: "java.lang.String[]"
    - name: "stripChars"
      type: "java.lang.String"
    instructionFingerprint: "EB44AB226C7C2350D5C48ABD053ED2E7"
  paths:
  - testPathName: "stripAll1WhenStrsLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "RESULT"
      name: "result"
      valueUuid: "strs"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "stripChars1"
      valueType: "java.lang.String"
      uuid: "stripChars"
    branches:
    - lineNumber: 8203
      expression: "strsLen == 0"
      range: "(8203,13)-(8203,24)"
      evaluatedAs: true
  - testPathName: "stripAll1WhenStrsLenNotEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "strs"
      valueUuid: "strs"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "strip(string,stripChars):string2"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Arrays.setAll(java.lang.String[],java.util.function.IntFunction)\
        \ : void"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "strsItem1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "strs"
    - sapientType: "BASIC"
      content: !<regular>
        value: "stripChars1"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_strip1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "strsItem1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "stringArrayItem0"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 8203
      expression: "strsLen == 0"
      range: "(8203,13)-(8203,24)"
      evaluatedAs: false
- method:
    name: "stripEnd"
    sourceCodeSignature: "String stripEnd(final String str, final String stripChars)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "stripChars"
      type: "java.lang.String"
    instructionFingerprint: "2EDEC288F0BC6CCA2805FBC045AE24FD"
  paths:
  - testPathName: "stripEndWhenEndEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "stripChars1"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 8238
      expression: "end == 0"
      range: "(8238,13)-(8238,20)"
      evaluatedAs: true
  - testPathName: "stripEndWhenStripCharsIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 8238
      expression: "end == 0"
      range: "(8238,13)-(8238,20)"
      evaluatedAs: false
    - lineNumber: 8242
      expression: "stripChars == null"
      range: "(8242,13)-(8242,30)"
      evaluatedAs: false
    - lineNumber: 8246
      expression: "stripChars.isEmpty()"
      range: "(8246,20)-(8246,39)"
      evaluatedAs: true
  - testPathName: "stripEndWhenCharacterIsWhitespaceStrCharAtEndMinus1ThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 8238
      expression: "end == 0"
      range: "(8238,13)-(8238,20)"
      evaluatedAs: false
    - lineNumber: 8242
      expression: "stripChars == null"
      range: "(8242,13)-(8242,30)"
      evaluatedAs: true
    - lineNumber: 8243
      expression: "end != 0"
      range: "(8243,20)-(8243,27)"
      evaluatedAs: true
    - lineNumber: 8243
      expression: "Character.isWhitespace(str.charAt(end - 1))"
      range: "(8243,32)-(8243,74)"
      evaluatedAs: true
  - testPathName: "stripEndWhenStripCharsIndexOfStrCharAtEndMinus1NotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8238
      expression: "end == 0"
      range: "(8238,13)-(8238,20)"
      evaluatedAs: false
    - lineNumber: 8242
      expression: "stripChars == null"
      range: "(8242,13)-(8242,30)"
      evaluatedAs: false
    - lineNumber: 8246
      expression: "stripChars.isEmpty()"
      range: "(8246,20)-(8246,39)"
      evaluatedAs: false
    - lineNumber: 8249
      expression: "end != 0"
      range: "(8249,20)-(8249,27)"
      evaluatedAs: true
    - lineNumber: 8249
      expression: "stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND"
      range: "(8249,32)-(8249,89)"
      evaluatedAs: true
- method:
    name: "stripStart"
    sourceCodeSignature: "String stripStart(final String str, final String stripChars)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "stripChars"
      type: "java.lang.String"
    instructionFingerprint: "C95367AA2C7AECE267F800A520DA5D36"
  paths:
  - testPathName: "stripStartWhenStrLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "stripChars1"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 8282
      expression: "strLen == 0"
      range: "(8282,13)-(8282,23)"
      evaluatedAs: true
  - testPathName: "stripStartWhenStripCharsIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 8282
      expression: "strLen == 0"
      range: "(8282,13)-(8282,23)"
      evaluatedAs: false
    - lineNumber: 8286
      expression: "stripChars == null"
      range: "(8286,13)-(8286,30)"
      evaluatedAs: false
    - lineNumber: 8290
      expression: "stripChars.isEmpty()"
      range: "(8290,20)-(8290,39)"
      evaluatedAs: true
  - testPathName: "stripStartWhenCharacterIsWhitespaceStrCharAtStartThrowsNullPointerException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "nullPointerException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "nullPointerException"
    branches:
    - lineNumber: 8282
      expression: "strLen == 0"
      range: "(8282,13)-(8282,23)"
      evaluatedAs: false
    - lineNumber: 8286
      expression: "stripChars == null"
      range: "(8286,13)-(8286,30)"
      evaluatedAs: true
    - lineNumber: 8287
      expression: "start != strLen"
      range: "(8287,20)-(8287,34)"
      evaluatedAs: true
    - lineNumber: 8287
      expression: "Character.isWhitespace(str.charAt(start))"
      range: "(8287,39)-(8287,79)"
      evaluatedAs: true
  - testPathName: "stripStartWhenStripCharsIndexOfStrCharAtStartNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "stripChars"
      valueUuid: "stripChars"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8282
      expression: "strLen == 0"
      range: "(8282,13)-(8282,23)"
      evaluatedAs: false
    - lineNumber: 8286
      expression: "stripChars == null"
      range: "(8286,13)-(8286,30)"
      evaluatedAs: false
    - lineNumber: 8290
      expression: "stripChars.isEmpty()"
      range: "(8290,20)-(8290,39)"
      evaluatedAs: false
    - lineNumber: 8293
      expression: "start != strLen"
      range: "(8293,20)-(8293,34)"
      evaluatedAs: true
    - lineNumber: 8293
      expression: "stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND"
      range: "(8293,39)-(8293,94)"
      evaluatedAs: true
- method:
    name: "stripToEmpty"
    sourceCodeSignature: "String stripToEmpty(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "B113C92B0E65FFA94B18D4C5B046C2D0"
  paths:
  - testPathName: "stripToEmptyWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8323
      expression: "str == null"
      range: "(8323,16)-(8323,26)"
      evaluatedAs: true
  - testPathName: "stripToEmptyWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "strip(str,stripChars):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_strip1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "stripChars"
    branches:
    - lineNumber: 8323
      expression: "str == null"
      range: "(8323,16)-(8323,26)"
      evaluatedAs: false
- method:
    name: "stripToNull"
    sourceCodeSignature: "String stripToNull(String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "1FD9EF18E41FA2505302EA4641209E2E"
  paths:
  - testPathName: "stripToNullWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8350
      expression: "str == null"
      range: "(8350,13)-(8350,23)"
      evaluatedAs: true
  - testPathName: "stripToNullWhenStrIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "strip(str,stripChars):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "stripChars"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 8350
      expression: "str == null"
      range: "(8350,13)-(8350,23)"
      evaluatedAs: false
    - lineNumber: 8354
      expression: "str.isEmpty()"
      range: "(8354,16)-(8354,28)"
      evaluatedAs: true
  - testPathName: "stripToNullWhenStrNotIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "strip(str,stripChars):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "stripChars"
    branches:
    - lineNumber: 8350
      expression: "str == null"
      range: "(8350,13)-(8350,23)"
      evaluatedAs: false
    - lineNumber: 8354
      expression: "str.isEmpty()"
      range: "(8354,16)-(8354,28)"
      evaluatedAs: false
- method:
    name: "substring"
    sourceCodeSignature: "String substring(final String str, int start)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "start"
      type: "int"
    instructionFingerprint: "08AB4448844071C6802973E8AF14A7A2"
  paths:
  - testPathName: "substringWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8382
      expression: "str == null"
      range: "(8382,13)-(8382,23)"
      evaluatedAs: true
  - testPathName: "substringWhenStartGreaterThanStrLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8382
      expression: "str == null"
      range: "(8382,13)-(8382,23)"
      evaluatedAs: false
    - lineNumber: 8387
      expression: "start < 0"
      range: "(8387,13)-(8387,21)"
      evaluatedAs: true
    - lineNumber: 8391
      expression: "start < 0"
      range: "(8391,13)-(8391,21)"
      evaluatedAs: true
    - lineNumber: 8394
      expression: "start > str.length()"
      range: "(8394,13)-(8394,32)"
      evaluatedAs: true
  - testPathName: "substringWhenStartNotGreaterThanStrLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8382
      expression: "str == null"
      range: "(8382,13)-(8382,23)"
      evaluatedAs: false
    - lineNumber: 8387
      expression: "start < 0"
      range: "(8387,13)-(8387,21)"
      evaluatedAs: true
    - lineNumber: 8391
      expression: "start < 0"
      range: "(8391,13)-(8391,21)"
      evaluatedAs: true
    - lineNumber: 8394
      expression: "start > str.length()"
      range: "(8394,13)-(8394,32)"
      evaluatedAs: false
- method:
    name: "substring"
    sourceCodeSignature: "String substring(final String str, int start, int end)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "start"
      type: "int"
    - name: "end"
      type: "int"
    instructionFingerprint: "F2A16BD19E2B557940FB3EBF40A72483"
  paths:
  - testPathName: "substring1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "INPUT"
      name: "end"
      valueUuid: "end"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "end"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8437
      expression: "str == null"
      range: "(8437,13)-(8437,23)"
      evaluatedAs: true
  - testPathName: "substring1WhenStartGreaterThanEnd"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "INPUT"
      name: "end"
      valueUuid: "end"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "end"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8437
      expression: "str == null"
      range: "(8437,13)-(8437,23)"
      evaluatedAs: false
    - lineNumber: 8442
      expression: "end < 0"
      range: "(8442,13)-(8442,19)"
      evaluatedAs: true
    - lineNumber: 8445
      expression: "start < 0"
      range: "(8445,13)-(8445,21)"
      evaluatedAs: true
    - lineNumber: 8450
      expression: "end > str.length()"
      range: "(8450,13)-(8450,30)"
      evaluatedAs: true
    - lineNumber: 8455
      expression: "start > end"
      range: "(8455,13)-(8455,23)"
      evaluatedAs: true
  - testPathName: "substring1WhenEndLessThan0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "start"
      valueUuid: "start"
    - type: "INPUT"
      name: "end"
      valueUuid: "end"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "start"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "end"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8437
      expression: "str == null"
      range: "(8437,13)-(8437,23)"
      evaluatedAs: false
    - lineNumber: 8442
      expression: "end < 0"
      range: "(8442,13)-(8442,19)"
      evaluatedAs: true
    - lineNumber: 8445
      expression: "start < 0"
      range: "(8445,13)-(8445,21)"
      evaluatedAs: true
    - lineNumber: 8450
      expression: "end > str.length()"
      range: "(8450,13)-(8450,30)"
      evaluatedAs: true
    - lineNumber: 8455
      expression: "start > end"
      range: "(8455,13)-(8455,23)"
      evaluatedAs: false
    - lineNumber: 8459
      expression: "start < 0"
      range: "(8459,13)-(8459,21)"
      evaluatedAs: true
    - lineNumber: 8462
      expression: "end < 0"
      range: "(8462,13)-(8462,19)"
      evaluatedAs: true
- method:
    name: "substringAfter"
    sourceCodeSignature: "String substringAfter(final String str, final int separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "int"
    instructionFingerprint: "DC60ED5B0D4A7B61BF036BEDB55EC4FC"
  paths:
  - testPathName: "substringAfterWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8495
      expression: "isEmpty(str)"
      range: "(8495,13)-(8495,24)"
      evaluatedAs: true
  - testPathName: "substringAfterWhenPosEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8495
      expression: "isEmpty(str)"
      range: "(8495,13)-(8495,24)"
      evaluatedAs: false
    - lineNumber: 8499
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8499,13)-(8499,34)"
      evaluatedAs: true
  - testPathName: "substringAfterWhenPosNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8495
      expression: "isEmpty(str)"
      range: "(8495,13)-(8495,24)"
      evaluatedAs: false
    - lineNumber: 8499
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8499,13)-(8499,34)"
      evaluatedAs: false
- method:
    name: "substringAfter"
    sourceCodeSignature: "String substringAfter(final String str, final String separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "F4367A1FA026EDDE401A2BF8E531BAF4"
  paths:
  - testPathName: "substringAfter1WhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8534
      expression: "isEmpty(str)"
      range: "(8534,13)-(8534,24)"
      evaluatedAs: true
  - testPathName: "substringAfter1WhenSeparatorIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8534
      expression: "isEmpty(str)"
      range: "(8534,13)-(8534,24)"
      evaluatedAs: false
    - lineNumber: 8537
      expression: "separator == null"
      range: "(8537,13)-(8537,29)"
      evaluatedAs: true
  - testPathName: "substringAfter1WhenPosEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8534
      expression: "isEmpty(str)"
      range: "(8534,13)-(8534,24)"
      evaluatedAs: false
    - lineNumber: 8537
      expression: "separator == null"
      range: "(8537,13)-(8537,29)"
      evaluatedAs: false
    - lineNumber: 8541
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8541,13)-(8541,34)"
      evaluatedAs: true
  - testPathName: "substringAfter1WhenPosNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "E"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "E"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8534
      expression: "isEmpty(str)"
      range: "(8534,13)-(8534,24)"
      evaluatedAs: false
    - lineNumber: 8537
      expression: "separator == null"
      range: "(8537,13)-(8537,29)"
      evaluatedAs: false
    - lineNumber: 8541
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8541,13)-(8541,34)"
      evaluatedAs: false
- method:
    name: "substringAfterLast"
    sourceCodeSignature: "String substringAfterLast(final String str, final int separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "int"
    instructionFingerprint: "FBA29B45214737BF55C4DEDF3FA80F0C"
  paths:
  - testPathName: "substringAfterLastWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8574
      expression: "isEmpty(str)"
      range: "(8574,13)-(8574,24)"
      evaluatedAs: true
  - testPathName: "substringAfterLastWhenPosEqualsStrLengthMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8574
      expression: "isEmpty(str)"
      range: "(8574,13)-(8574,24)"
      evaluatedAs: false
    - lineNumber: 8578
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8578,13)-(8578,34)"
      evaluatedAs: false
    - lineNumber: 8578
      expression: "pos == str.length() - 1"
      range: "(8578,39)-(8578,61)"
      evaluatedAs: true
  - testPathName: "substringAfterLastWhenPosNotEqualsStrLengthMinus1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8574
      expression: "isEmpty(str)"
      range: "(8574,13)-(8574,24)"
      evaluatedAs: false
    - lineNumber: 8578
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8578,13)-(8578,34)"
      evaluatedAs: false
    - lineNumber: 8578
      expression: "pos == str.length() - 1"
      range: "(8578,39)-(8578,61)"
      evaluatedAs: false
- method:
    name: "substringAfterLast"
    sourceCodeSignature: "String substringAfterLast(final String str, final String\
      \ separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "FE1120D4EC28E1287D51C1A38A4564D5"
  paths:
  - testPathName: "substringAfterLast1WhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8614
      expression: "isEmpty(str)"
      range: "(8614,13)-(8614,24)"
      evaluatedAs: true
  - testPathName: "substringAfterLast1WhenIsEmptySeparator"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(separator):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8614
      expression: "isEmpty(str)"
      range: "(8614,13)-(8614,24)"
      evaluatedAs: false
    - lineNumber: 8617
      expression: "isEmpty(separator)"
      range: "(8617,13)-(8617,30)"
      evaluatedAs: true
  - testPathName: "substringAfterLast1WhenPosEqualsStrLengthMinusSeparatorLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(separator):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8614
      expression: "isEmpty(str)"
      range: "(8614,13)-(8614,24)"
      evaluatedAs: false
    - lineNumber: 8617
      expression: "isEmpty(separator)"
      range: "(8617,13)-(8617,30)"
      evaluatedAs: false
    - lineNumber: 8621
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8621,13)-(8621,34)"
      evaluatedAs: false
    - lineNumber: 8621
      expression: "pos == str.length() - separator.length()"
      range: "(8621,39)-(8621,78)"
      evaluatedAs: true
  - testPathName: "substringAfterLast1WhenPosNotEqualsStrLengthMinusSeparatorLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(separator):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8614
      expression: "isEmpty(str)"
      range: "(8614,13)-(8614,24)"
      evaluatedAs: false
    - lineNumber: 8617
      expression: "isEmpty(separator)"
      range: "(8617,13)-(8617,30)"
      evaluatedAs: false
    - lineNumber: 8621
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8621,13)-(8621,34)"
      evaluatedAs: false
    - lineNumber: 8621
      expression: "pos == str.length() - separator.length()"
      range: "(8621,39)-(8621,78)"
      evaluatedAs: false
- method:
    name: "substringBefore"
    sourceCodeSignature: "String substringBefore(final String str, final int separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "int"
    instructionFingerprint: "85C6EBF9841FC9532A001B002DCDBF4E"
  paths:
  - testPathName: "substringBeforeWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8653
      expression: "isEmpty(str)"
      range: "(8653,13)-(8653,24)"
      evaluatedAs: true
  - testPathName: "substringBeforeWhenPosEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8653
      expression: "isEmpty(str)"
      range: "(8653,13)-(8653,24)"
      evaluatedAs: false
    - lineNumber: 8657
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8657,13)-(8657,34)"
      evaluatedAs: true
  - testPathName: "substringBeforeWhenPosNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8653
      expression: "isEmpty(str)"
      range: "(8653,13)-(8653,24)"
      evaluatedAs: false
    - lineNumber: 8657
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8657,13)-(8657,34)"
      evaluatedAs: false
- method:
    name: "substringBefore"
    sourceCodeSignature: "String substringBefore(final String str, final String separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "AE64C49E33D099C33F4722A48CFB04FC"
  paths:
  - testPathName: "substringBefore1WhenSeparatorIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8691
      expression: "isEmpty(str)"
      range: "(8691,13)-(8691,24)"
      evaluatedAs: false
    - lineNumber: 8691
      expression: "separator == null"
      range: "(8691,29)-(8691,45)"
      evaluatedAs: true
  - testPathName: "substringBefore1WhenSeparatorIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 8691
      expression: "isEmpty(str)"
      range: "(8691,13)-(8691,24)"
      evaluatedAs: false
    - lineNumber: 8691
      expression: "separator == null"
      range: "(8691,29)-(8691,45)"
      evaluatedAs: false
    - lineNumber: 8694
      expression: "separator.isEmpty()"
      range: "(8694,13)-(8694,31)"
      evaluatedAs: true
  - testPathName: "substringBefore1WhenPosEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8691
      expression: "isEmpty(str)"
      range: "(8691,13)-(8691,24)"
      evaluatedAs: false
    - lineNumber: 8691
      expression: "separator == null"
      range: "(8691,29)-(8691,45)"
      evaluatedAs: false
    - lineNumber: 8694
      expression: "separator.isEmpty()"
      range: "(8694,13)-(8694,31)"
      evaluatedAs: false
    - lineNumber: 8698
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8698,13)-(8698,34)"
      evaluatedAs: true
  - testPathName: "substringBefore1WhenPosNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8691
      expression: "isEmpty(str)"
      range: "(8691,13)-(8691,24)"
      evaluatedAs: false
    - lineNumber: 8691
      expression: "separator == null"
      range: "(8691,29)-(8691,45)"
      evaluatedAs: false
    - lineNumber: 8694
      expression: "separator.isEmpty()"
      range: "(8694,13)-(8694,31)"
      evaluatedAs: false
    - lineNumber: 8698
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8698,13)-(8698,34)"
      evaluatedAs: false
- method:
    name: "substringBeforeLast"
    sourceCodeSignature: "String substringBeforeLast(final String str, final String\
      \ separator)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "separator"
      type: "java.lang.String"
    instructionFingerprint: "DA8744DAC5EF57C0ED02FBB34F922203"
  paths:
  - testPathName: "substringBeforeLastWhenIsEmptySeparator"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(separator):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 8732
      expression: "isEmpty(str)"
      range: "(8732,13)-(8732,24)"
      evaluatedAs: false
    - lineNumber: 8732
      expression: "isEmpty(separator)"
      range: "(8732,29)-(8732,46)"
      evaluatedAs: true
  - testPathName: "substringBeforeLastWhenPosEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(separator):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 8732
      expression: "isEmpty(str)"
      range: "(8732,13)-(8732,24)"
      evaluatedAs: false
    - lineNumber: 8732
      expression: "isEmpty(separator)"
      range: "(8732,29)-(8732,46)"
      evaluatedAs: false
    - lineNumber: 8736
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8736,13)-(8736,34)"
      evaluatedAs: true
  - testPathName: "substringBeforeLastWhenPosNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "separator"
      valueUuid: "separator"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(separator):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "separator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8732
      expression: "isEmpty(str)"
      range: "(8732,13)-(8732,24)"
      evaluatedAs: false
    - lineNumber: 8732
      expression: "isEmpty(separator)"
      range: "(8732,29)-(8732,46)"
      evaluatedAs: false
    - lineNumber: 8736
      expression: "pos == INDEX_NOT_FOUND"
      range: "(8736,13)-(8736,34)"
      evaluatedAs: false
- method:
    name: "substringBetween"
    sourceCodeSignature: "String substringBetween(final String str, final String tag)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "tag"
      type: "java.lang.String"
    instructionFingerprint: "C68C7435DC729E914C4CEC42160E7475"
  paths:
  - testPathName: "substringBetweenTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "tag"
      valueUuid: "tag"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "substringBetween(str,tag,tag):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "tag1"
      valueType: "java.lang.String"
      uuid: "tag"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_substringBetween1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "substringBetween"
    sourceCodeSignature: "String substringBetween(final String str, final String open,\
      \ final String close)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "open"
      type: "java.lang.String"
    - name: "close"
      type: "java.lang.String"
    instructionFingerprint: "1986795C34A68ED27ABB40F378016D3D"
  paths:
  - testPathName: "substringBetween1WhenObjectUtilsNotAllNotNullStrOpenClose"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.ObjectUtils.allNotNull(java.lang.Object[])\
        \ : boolean"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "open1"
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: "close1"
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8795
      expression: "!ObjectUtils.allNotNull(str, open, close)"
      range: "(8795,13)-(8795,53)"
      evaluatedAs: true
  - testPathName: "substringBetween1WhenEndNotEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BD"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8795
      expression: "!ObjectUtils.allNotNull(str, open, close)"
      range: "(8795,13)-(8795,53)"
      evaluatedAs: false
    - lineNumber: 8799
      expression: "start != INDEX_NOT_FOUND"
      range: "(8799,13)-(8799,36)"
      evaluatedAs: true
    - lineNumber: 8801
      expression: "end != INDEX_NOT_FOUND"
      range: "(8801,17)-(8801,38)"
      evaluatedAs: true
  - testPathName: "substringBetween1WhenEndEqualsINDEX_NOT_FOUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8795
      expression: "!ObjectUtils.allNotNull(str, open, close)"
      range: "(8795,13)-(8795,53)"
      evaluatedAs: false
    - lineNumber: 8799
      expression: "start != INDEX_NOT_FOUND"
      range: "(8799,13)-(8799,36)"
      evaluatedAs: true
    - lineNumber: 8801
      expression: "end != INDEX_NOT_FOUND"
      range: "(8801,17)-(8801,38)"
      evaluatedAs: false
- method:
    name: "substringsBetween"
    sourceCodeSignature: "String[] substringsBetween(final String str, final String\
      \ open, final String close)"
    returnType: "java.lang.String[]"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "open"
      type: "java.lang.String"
    - name: "close"
      type: "java.lang.String"
    instructionFingerprint: "64E5034814ED98EB166CDB730A12EED4"
  paths:
  - testPathName: "substringsBetweenWhenIsEmptyClose"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(open):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(close):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "open1"
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: "close1"
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 8831
      expression: "str == null"
      range: "(8831,13)-(8831,23)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(open)"
      range: "(8831,28)-(8831,40)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(close)"
      range: "(8831,45)-(8831,58)"
      evaluatedAs: true
  - testPathName: "substringsBetweenWhenStrLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(open):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(close):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "open1"
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: "close1"
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 8831
      expression: "str == null"
      range: "(8831,13)-(8831,23)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(open)"
      range: "(8831,28)-(8831,40)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(close)"
      range: "(8831,45)-(8831,58)"
      evaluatedAs: false
    - lineNumber: 8835
      expression: "strLen == 0"
      range: "(8835,13)-(8835,23)"
      evaluatedAs: true
  - testPathName: "substringsBetweenWhenStartLessThan0AndListIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(open):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(close):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 8831
      expression: "str == null"
      range: "(8831,13)-(8831,23)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(open)"
      range: "(8831,28)-(8831,40)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(close)"
      range: "(8831,45)-(8831,58)"
      evaluatedAs: false
    - lineNumber: 8835
      expression: "strLen == 0"
      range: "(8835,13)-(8835,23)"
      evaluatedAs: false
    - lineNumber: 8842
      expression: "pos < strLen - closeLen"
      range: "(8842,16)-(8842,38)"
      evaluatedAs: true
    - lineNumber: 8844
      expression: "start < 0"
      range: "(8844,17)-(8844,25)"
      evaluatedAs: true
    - lineNumber: 8855
      expression: "list.isEmpty()"
      range: "(8855,13)-(8855,26)"
      evaluatedAs: true
  - testPathName: "substringsBetweenWhenEndLessThan0AndListIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(open):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(close):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "AD"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    branches:
    - lineNumber: 8831
      expression: "str == null"
      range: "(8831,13)-(8831,23)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(open)"
      range: "(8831,28)-(8831,40)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(close)"
      range: "(8831,45)-(8831,58)"
      evaluatedAs: false
    - lineNumber: 8835
      expression: "strLen == 0"
      range: "(8835,13)-(8835,23)"
      evaluatedAs: false
    - lineNumber: 8842
      expression: "pos < strLen - closeLen"
      range: "(8842,16)-(8842,38)"
      evaluatedAs: true
    - lineNumber: 8844
      expression: "start < 0"
      range: "(8844,17)-(8844,25)"
      evaluatedAs: false
    - lineNumber: 8849
      expression: "end < 0"
      range: "(8849,17)-(8849,23)"
      evaluatedAs: true
    - lineNumber: 8855
      expression: "list.isEmpty()"
      range: "(8855,13)-(8855,26)"
      evaluatedAs: true
  - testPathName: "substringsBetweenWhenListNotIsEmpty"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "open"
      valueUuid: "open"
    - type: "INPUT"
      name: "close"
      valueUuid: "close"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(open):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(close):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "E"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "open"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "close"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArray-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArray-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArray-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArray-item3"
          4:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArray-item4"
          5:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "objectArray-item5"
      valueType: "java.lang.String[]"
      uuid: "objectArray"
    branches:
    - lineNumber: 8831
      expression: "str == null"
      range: "(8831,13)-(8831,23)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(open)"
      range: "(8831,28)-(8831,40)"
      evaluatedAs: false
    - lineNumber: 8831
      expression: "isEmpty(close)"
      range: "(8831,45)-(8831,58)"
      evaluatedAs: false
    - lineNumber: 8835
      expression: "strLen == 0"
      range: "(8835,13)-(8835,23)"
      evaluatedAs: false
    - lineNumber: 8842
      expression: "pos < strLen - closeLen"
      range: "(8842,16)-(8842,38)"
      evaluatedAs: true
    - lineNumber: 8844
      expression: "start < 0"
      range: "(8844,17)-(8844,25)"
      evaluatedAs: false
    - lineNumber: 8849
      expression: "end < 0"
      range: "(8849,17)-(8849,23)"
      evaluatedAs: false
    - lineNumber: 8855
      expression: "list.isEmpty()"
      range: "(8855,13)-(8855,26)"
      evaluatedAs: false
- method:
    name: "swapCase"
    sourceCodeSignature: "String swapCase(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "87940173D656EABD4762F64D4D499CD8"
  paths:
  - testPathName: "swapCaseWhenIsEmptyStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 8889
      expression: "isEmpty(str)"
      range: "(8889,13)-(8889,24)"
      evaluatedAs: true
  - testPathName: "swapCaseWhenCharacterIsTitleCaseOldCodepoint"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8889
      expression: "isEmpty(str)"
      range: "(8889,13)-(8889,24)"
      evaluatedAs: false
    - lineNumber: 8896
      expression: "i < strLen"
      range: "(8896,25)-(8896,34)"
      evaluatedAs: true
    - lineNumber: 8899
      expression: "Character.isUpperCase(oldCodepoint)"
      range: "(8899,17)-(8899,51)"
      evaluatedAs: false
    - lineNumber: 8899
      expression: "Character.isTitleCase(oldCodepoint)"
      range: "(8899,56)-(8899,90)"
      evaluatedAs: true
- method:
    name: "toCodePoints"
    sourceCodeSignature: "int[] toCodePoints(final CharSequence cs)"
    returnType: "int[]"
    parameters:
    - name: "cs"
      type: "java.lang.CharSequence"
    instructionFingerprint: "960FFCA7E5F7B7AA1242AD8795C39771"
  paths:
  - testPathName: "toCodePointsWhenCsIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "intArray"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.CharSequence"
      uuid: "cs"
    - sapientType: "NULL"
      valueType: "int[]"
      uuid: "intArray"
    branches:
    - lineNumber: 8929
      expression: "cs == null"
      range: "(8929,13)-(8929,22)"
      evaluatedAs: true
  - testPathName: "toCodePointsWhenCsLengthEquals0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "intArray"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.CharSequence.length() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "intArray"
    branches:
    - lineNumber: 8929
      expression: "cs == null"
      range: "(8929,13)-(8929,22)"
      evaluatedAs: false
    - lineNumber: 8932
      expression: "cs.length() == 0"
      range: "(8932,13)-(8932,28)"
      evaluatedAs: true
  - testPathName: "toCodePointsWhenILessThanResultLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cs"
      valueUuid: "cs"
    - type: "RESULT"
      name: "result"
      valueUuid: "intArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "cs1"
      valueType: "java.lang.String"
      uuid: "cs"
      nameForMock: "cs"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 99
            valueType: "int"
            uuid: "int7"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: 115
            valueType: "int"
            uuid: "int14"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: 49
            valueType: "int"
            uuid: "int21"
      valueType: "int[]"
      uuid: "intArray"
    branches:
    - lineNumber: 8929
      expression: "cs == null"
      range: "(8929,13)-(8929,22)"
      evaluatedAs: false
    - lineNumber: 8932
      expression: "cs.length() == 0"
      range: "(8932,13)-(8932,28)"
      evaluatedAs: false
    - lineNumber: 8939
      expression: "i < result.length"
      range: "(8939,25)-(8939,41)"
      evaluatedAs: true
- method:
    name: "toEncodedString"
    sourceCodeSignature: "String toEncodedString(final byte[] bytes, final Charset\
      \ charset)"
    returnType: "java.lang.String"
    parameters:
    - name: "bytes"
      type: "byte[]"
    - name: "charset"
      type: "java.nio.charset.Charset"
    instructionFingerprint: "21D05B8C5735E627235F9DD0E7F3FF56"
  paths:
  - testPathName: "toEncodedStringTest"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "bytes"
      valueUuid: "bytes"
    - type: "INPUT"
      name: "charset"
      valueUuid: "charset"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.Charsets.toCharset(java.nio.charset.Charset)\
        \ : java.nio.charset.Charset"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "bytes"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "charset"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "toRootLowerCase"
    sourceCodeSignature: "String toRootLowerCase(final String source)"
    returnType: "java.lang.String"
    parameters:
    - name: "source"
      type: "java.lang.String"
    instructionFingerprint: "84AFBD29BD06BD459439241A1CC3A889"
  paths:
  - testPathName: "toRootLowerCaseWhenSourceIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      valueUuid: "source"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8971
      expression: "source == null"
      range: "(8971,16)-(8971,29)"
      evaluatedAs: true
  - testPathName: "toRootLowerCaseWhenSourceIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      valueUuid: "source"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8971
      expression: "source == null"
      range: "(8971,16)-(8971,29)"
      evaluatedAs: false
- method:
    name: "toRootUpperCase"
    sourceCodeSignature: "String toRootUpperCase(final String source)"
    returnType: "java.lang.String"
    parameters:
    - name: "source"
      type: "java.lang.String"
    instructionFingerprint: "2924C25485C8593E66E0E25144403A9E"
  paths:
  - testPathName: "toRootUpperCaseWhenSourceIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      valueUuid: "source"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8982
      expression: "source == null"
      range: "(8982,16)-(8982,29)"
      evaluatedAs: true
  - testPathName: "toRootUpperCaseWhenSourceIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      valueUuid: "source"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 8982
      expression: "source == null"
      range: "(8982,16)-(8982,29)"
      evaluatedAs: false
- method:
    name: "toString"
    sourceCodeSignature: "String toString(final byte[] bytes, final String charsetName)"
    returnType: "java.lang.String"
    throwsExceptions:
    - "java.io.UnsupportedEncodingException"
    parameters:
    - name: "bytes"
      type: "byte[]"
    - name: "charsetName"
      type: "java.lang.String"
    instructionFingerprint: "C0F36E6C6E5AE3866BE6B4CBF0A794E1"
  paths:
  - testPathName: "toStringTest"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "bytes"
      valueUuid: "bytes"
    - type: "INPUT"
      name: "charsetName"
      valueUuid: "charsetName"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "bytes"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "charsetName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "trim"
    sourceCodeSignature: "String trim(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "D471B756577E512E658E5BC3A4BB3C08"
  paths:
  - testPathName: "trimWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9033
      expression: "str == null"
      range: "(9033,16)-(9033,26)"
      evaluatedAs: true
  - testPathName: "trimWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A "
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9033
      expression: "str == null"
      range: "(9033,16)-(9033,26)"
      evaluatedAs: false
- method:
    name: "trimToEmpty"
    sourceCodeSignature: "String trimToEmpty(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "77CBB278A1DBBC34FF8D6ADF27BA96E0"
  paths:
  - testPathName: "trimToEmptyWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 9058
      expression: "str == null"
      range: "(9058,16)-(9058,26)"
      evaluatedAs: true
  - testPathName: "trimToEmptyWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A "
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9058
      expression: "str == null"
      range: "(9058,16)-(9058,26)"
      evaluatedAs: false
- method:
    name: "trimToNull"
    sourceCodeSignature: "String trimToNull(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "FEB655422B718726F051E3BAF6A7C44D"
  paths:
  - testPathName: "trimToNullWhenIsEmptyTs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "trim(str):string"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_trim1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 9085
      expression: "isEmpty(ts)"
      range: "(9085,16)-(9085,26)"
      evaluatedAs: true
  - testPathName: "trimToNullWhenIsEmptyNotTs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "trim(str):string"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(string):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_trim1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 9085
      expression: "isEmpty(ts)"
      range: "(9085,16)-(9085,26)"
      evaluatedAs: false
- method:
    name: "truncate"
    sourceCodeSignature: "String truncate(final String str, final int maxWidth)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "maxWidth"
      type: "int"
    instructionFingerprint: "BBB6D2CE439B1BB45296166B3429A0B5"
  paths:
  - testPathName: "truncateTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "truncate(str,offset,maxWidth):string"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_truncate1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
- method:
    name: "truncate"
    sourceCodeSignature: "String truncate(final String str, final int offset, final\
      \ int maxWidth)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "offset"
      type: "int"
    - name: "maxWidth"
      type: "int"
    instructionFingerprint: "9CA4077C63A4A9470D0D8FACFC5CE7EA"
  paths:
  - testPathName: "truncate1WhenOffsetLessThan0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2147483648
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "offset cannot be negative"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 9185
      expression: "offset < 0"
      range: "(9185,13)-(9185,22)"
      evaluatedAs: true
  - testPathName: "truncate1WhenMaxWidthLessThan0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "maxWith cannot be negative"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 9185
      expression: "offset < 0"
      range: "(9185,13)-(9185,22)"
      evaluatedAs: false
    - lineNumber: 9188
      expression: "maxWidth < 0"
      range: "(9188,13)-(9188,24)"
      evaluatedAs: true
  - testPathName: "truncate1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9185
      expression: "offset < 0"
      range: "(9185,13)-(9185,22)"
      evaluatedAs: false
    - lineNumber: 9188
      expression: "maxWidth < 0"
      range: "(9188,13)-(9188,24)"
      evaluatedAs: false
    - lineNumber: 9191
      expression: "str == null"
      range: "(9191,13)-(9191,23)"
      evaluatedAs: true
  - testPathName: "truncate1WhenOffsetGreaterThanStrLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "expectedResult"
    branches:
    - lineNumber: 9185
      expression: "offset < 0"
      range: "(9185,13)-(9185,22)"
      evaluatedAs: false
    - lineNumber: 9188
      expression: "maxWidth < 0"
      range: "(9188,13)-(9188,24)"
      evaluatedAs: false
    - lineNumber: 9191
      expression: "str == null"
      range: "(9191,13)-(9191,23)"
      evaluatedAs: false
    - lineNumber: 9194
      expression: "offset > str.length()"
      range: "(9194,13)-(9194,33)"
      evaluatedAs: true
  - testPathName: "truncate1WhenStrLengthGreaterThanMaxWidth"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9185
      expression: "offset < 0"
      range: "(9185,13)-(9185,22)"
      evaluatedAs: false
    - lineNumber: 9188
      expression: "maxWidth < 0"
      range: "(9188,13)-(9188,24)"
      evaluatedAs: false
    - lineNumber: 9191
      expression: "str == null"
      range: "(9191,13)-(9191,23)"
      evaluatedAs: false
    - lineNumber: 9194
      expression: "offset > str.length()"
      range: "(9194,13)-(9194,33)"
      evaluatedAs: false
    - lineNumber: 9197
      expression: "str.length() > maxWidth"
      range: "(9197,13)-(9197,35)"
      evaluatedAs: true
  - testPathName: "truncate1WhenStrLengthNotGreaterThanMaxWidth"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "offset"
      valueUuid: "offset"
    - type: "INPUT"
      name: "maxWidth"
      valueUuid: "maxWidth"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "offset"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "maxWidth"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9185
      expression: "offset < 0"
      range: "(9185,13)-(9185,22)"
      evaluatedAs: false
    - lineNumber: 9188
      expression: "maxWidth < 0"
      range: "(9188,13)-(9188,24)"
      evaluatedAs: false
    - lineNumber: 9191
      expression: "str == null"
      range: "(9191,13)-(9191,23)"
      evaluatedAs: false
    - lineNumber: 9194
      expression: "offset > str.length()"
      range: "(9194,13)-(9194,33)"
      evaluatedAs: false
    - lineNumber: 9197
      expression: "str.length() > maxWidth"
      range: "(9197,13)-(9197,35)"
      evaluatedAs: false
- method:
    name: "uncapitalize"
    sourceCodeSignature: "String uncapitalize(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "64DEFCD66E3552E8820BE10CB785C0A9"
  paths:
  - testPathName: "uncapitalizeWhenStrLenEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 9227
      expression: "strLen == 0"
      range: "(9227,13)-(9227,23)"
      evaluatedAs: true
  - testPathName: "uncapitalizeWhenFirstCodePointEqualsNewCodePoint"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 9227
      expression: "strLen == 0"
      range: "(9227,13)-(9227,23)"
      evaluatedAs: false
    - lineNumber: 9233
      expression: "firstCodePoint == newCodePoint"
      range: "(9233,13)-(9233,42)"
      evaluatedAs: true
  - testPathName: "uncapitalizeWhenInOffsetLessThanStrLen"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "length(str):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9227
      expression: "strLen == 0"
      range: "(9227,13)-(9227,23)"
      evaluatedAs: false
    - lineNumber: 9233
      expression: "firstCodePoint == newCodePoint"
      range: "(9233,13)-(9233,42)"
      evaluatedAs: false
    - lineNumber: 9241
      expression: "inOffset < strLen"
      range: "(9241,66)-(9241,82)"
      evaluatedAs: true
- method:
    name: "unwrap"
    sourceCodeSignature: "String unwrap(final String str, final char wrapChar)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "wrapChar"
      type: "char"
    instructionFingerprint: "C25D9C6BCB65CF5492AAE9664657CF33"
  paths:
  - testPathName: "unwrapWhenStrLengthEquals1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapChar"
      valueUuid: "wrapChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "wrapChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 9274
      expression: "isEmpty(str)"
      range: "(9274,13)-(9274,24)"
      evaluatedAs: false
    - lineNumber: 9274
      expression: "wrapChar == CharUtils.NUL"
      range: "(9274,29)-(9274,53)"
      evaluatedAs: false
    - lineNumber: 9274
      expression: "str.length() == 1"
      range: "(9274,58)-(9274,74)"
      evaluatedAs: true
  - testPathName: "unwrapWhenStrCharAtStrLengthMinus1EqualsWrapChar"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapChar"
      valueUuid: "wrapChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BCB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "wrapChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9274
      expression: "isEmpty(str)"
      range: "(9274,13)-(9274,24)"
      evaluatedAs: false
    - lineNumber: 9274
      expression: "wrapChar == CharUtils.NUL"
      range: "(9274,29)-(9274,53)"
      evaluatedAs: false
    - lineNumber: 9274
      expression: "str.length() == 1"
      range: "(9274,58)-(9274,74)"
      evaluatedAs: false
    - lineNumber: 9278
      expression: "str.charAt(0) == wrapChar"
      range: "(9278,13)-(9278,37)"
      evaluatedAs: true
    - lineNumber: 9278
      expression: "str.charAt(str.length() - 1) == wrapChar"
      range: "(9278,42)-(9278,81)"
      evaluatedAs: true
  - testPathName: "unwrapWhenStrCharAtStrLengthMinus1NotEqualsWrapChar"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapChar"
      valueUuid: "wrapChar"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "BC"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "wrapChar"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 9274
      expression: "isEmpty(str)"
      range: "(9274,13)-(9274,24)"
      evaluatedAs: false
    - lineNumber: 9274
      expression: "wrapChar == CharUtils.NUL"
      range: "(9274,29)-(9274,53)"
      evaluatedAs: false
    - lineNumber: 9274
      expression: "str.length() == 1"
      range: "(9274,58)-(9274,74)"
      evaluatedAs: false
    - lineNumber: 9278
      expression: "str.charAt(0) == wrapChar"
      range: "(9278,13)-(9278,37)"
      evaluatedAs: true
    - lineNumber: 9278
      expression: "str.charAt(str.length() - 1) == wrapChar"
      range: "(9278,42)-(9278,81)"
      evaluatedAs: false
- method:
    name: "unwrap"
    sourceCodeSignature: "String unwrap(final String str, final String wrapToken)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "wrapToken"
      type: "java.lang.String"
    instructionFingerprint: "2938540C5410E185E721380017FCC9B6"
  paths:
  - testPathName: "unwrap1WhenStrLengthLessThan2MultipliedByWrapTokenLength"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapToken"
      valueUuid: "wrapToken"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapToken):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "wrapToken"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 9314
      expression: "isEmpty(str)"
      range: "(9314,13)-(9314,24)"
      evaluatedAs: false
    - lineNumber: 9314
      expression: "isEmpty(wrapToken)"
      range: "(9314,29)-(9314,46)"
      evaluatedAs: false
    - lineNumber: 9314
      expression: "str.length() < 2 * wrapToken.length()"
      range: "(9314,51)-(9314,87)"
      evaluatedAs: true
  - testPathName: "unwrap1WhenEndsWithStrWrapToken"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapToken"
      valueUuid: "wrapToken"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapToken):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "startsWith(str,wrapToken):boolean3"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWith(str,wrapToken):boolean4"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "wrapToken1"
      valueType: "java.lang.String"
      uuid: "wrapToken"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9314
      expression: "isEmpty(str)"
      range: "(9314,13)-(9314,24)"
      evaluatedAs: false
    - lineNumber: 9314
      expression: "isEmpty(wrapToken)"
      range: "(9314,29)-(9314,46)"
      evaluatedAs: false
    - lineNumber: 9314
      expression: "str.length() < 2 * wrapToken.length()"
      range: "(9314,51)-(9314,87)"
      evaluatedAs: false
    - lineNumber: 9318
      expression: "startsWith(str, wrapToken)"
      range: "(9318,13)-(9318,38)"
      evaluatedAs: true
    - lineNumber: 9318
      expression: "endsWith(str, wrapToken)"
      range: "(9318,43)-(9318,66)"
      evaluatedAs: true
  - testPathName: "unwrap1WhenEndsWithNotStrWrapToken"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapToken"
      valueUuid: "wrapToken"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapToken):boolean2"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "startsWith(str,wrapToken):boolean3"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWith(str,wrapToken):boolean4"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "wrapToken"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    branches:
    - lineNumber: 9314
      expression: "isEmpty(str)"
      range: "(9314,13)-(9314,24)"
      evaluatedAs: false
    - lineNumber: 9314
      expression: "isEmpty(wrapToken)"
      range: "(9314,29)-(9314,46)"
      evaluatedAs: false
    - lineNumber: 9314
      expression: "str.length() < 2 * wrapToken.length()"
      range: "(9314,51)-(9314,87)"
      evaluatedAs: false
    - lineNumber: 9318
      expression: "startsWith(str, wrapToken)"
      range: "(9318,13)-(9318,38)"
      evaluatedAs: true
    - lineNumber: 9318
      expression: "endsWith(str, wrapToken)"
      range: "(9318,43)-(9318,66)"
      evaluatedAs: false
- method:
    name: "upperCase"
    sourceCodeSignature: "String upperCase(final String str)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "B65D0F77F7E81E6EE00C8F608A0721EB"
  paths:
  - testPathName: "upperCaseWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9345
      expression: "str == null"
      range: "(9345,13)-(9345,23)"
      evaluatedAs: true
  - testPathName: "upperCaseWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9345
      expression: "str == null"
      range: "(9345,13)-(9345,23)"
      evaluatedAs: false
- method:
    name: "upperCase"
    sourceCodeSignature: "String upperCase(final String str, final Locale locale)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "locale"
      type: "java.util.Locale"
    instructionFingerprint: "4A930BF14ECDB0A5E29F9126BEF7D2CB"
  paths:
  - testPathName: "upperCase1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9368
      expression: "str == null"
      range: "(9368,13)-(9368,23)"
      evaluatedAs: true
  - testPathName: "upperCase1WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9368
      expression: "str == null"
      range: "(9368,13)-(9368,23)"
      evaluatedAs: false
- method:
    name: "valueOf"
    sourceCodeSignature: "String valueOf(final char[] value)"
    returnType: "java.lang.String"
    parameters:
    - name: "value"
      type: "char[]"
    instructionFingerprint: "170B2E1BA47198D97B9337C13CFE2E07"
  paths:
  - testPathName: "valueOfWhenValueIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "char[]"
      uuid: "value"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9383
      expression: "value == null"
      range: "(9383,16)-(9383,28)"
      evaluatedAs: true
  - testPathName: "valueOfWhenValueIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "char[]"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: "[]"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9383
      expression: "value == null"
      range: "(9383,16)-(9383,28)"
      evaluatedAs: false
- method:
    name: "wrap"
    sourceCodeSignature: "String wrap(final String str, final char wrapWith)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "wrapWith"
      type: "char"
    instructionFingerprint: "1153458B8D716421520C9F903AE47F5D"
  paths:
  - testPathName: "wrapWhenWrapWithEqualsCharUtilsNUL"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\u0000"
      valueType: "char"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 9407
      expression: "isEmpty(str)"
      range: "(9407,13)-(9407,24)"
      evaluatedAs: false
    - lineNumber: 9407
      expression: "wrapWith == CharUtils.NUL"
      range: "(9407,29)-(9407,53)"
      evaluatedAs: true
  - testPathName: "wrapWhenWrapWithNotEqualsCharUtilsNUL"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ABA"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9407
      expression: "isEmpty(str)"
      range: "(9407,13)-(9407,24)"
      evaluatedAs: false
    - lineNumber: 9407
      expression: "wrapWith == CharUtils.NUL"
      range: "(9407,29)-(9407,53)"
      evaluatedAs: false
- method:
    name: "wrap"
    sourceCodeSignature: "String wrap(final String str, final String wrapWith)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "wrapWith"
      type: "java.lang.String"
    instructionFingerprint: "C952CDF6FFEC0D41BDA1F302A598CD06"
  paths:
  - testPathName: "wrap1WhenIsEmptyWrapWith"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapWith):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "wrapWith1"
      valueType: "java.lang.String"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 9443
      expression: "isEmpty(str)"
      range: "(9443,13)-(9443,24)"
      evaluatedAs: false
    - lineNumber: 9443
      expression: "isEmpty(wrapWith)"
      range: "(9443,29)-(9443,45)"
      evaluatedAs: true
  - testPathName: "wrap1WhenIsEmptyNotWrapWith"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapWith):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ABA"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 9443
      expression: "isEmpty(str)"
      range: "(9443,13)-(9443,24)"
      evaluatedAs: false
    - lineNumber: 9443
      expression: "isEmpty(wrapWith)"
      range: "(9443,29)-(9443,45)"
      evaluatedAs: false
- method:
    name: "wrapIfMissing"
    sourceCodeSignature: "String wrapIfMissing(final String str, final char wrapWith)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "wrapWith"
      type: "char"
    instructionFingerprint: "AB95FE6415A19377BBB3A972F4423D90"
  paths:
  - testPathName: "wrapIfMissingWhenWrapWithEqualsCharUtilsNUL"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\u0000"
      valueType: "char"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 9476
      expression: "isEmpty(str)"
      range: "(9476,13)-(9476,24)"
      evaluatedAs: false
    - lineNumber: 9476
      expression: "wrapWith == CharUtils.NUL"
      range: "(9476,29)-(9476,53)"
      evaluatedAs: true
  - testPathName: "wrapIfMissingWhenNotWrapEnd"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 9476
      expression: "isEmpty(str)"
      range: "(9476,13)-(9476,24)"
      evaluatedAs: false
    - lineNumber: 9476
      expression: "wrapWith == CharUtils.NUL"
      range: "(9476,29)-(9476,53)"
      evaluatedAs: false
    - lineNumber: 9479
      expression: "str.charAt(0) != wrapWith"
      range: "(9479,35)-(9479,59)"
      evaluatedAs: false
    - lineNumber: 9480
      expression: "str.charAt(str.length() - 1) != wrapWith"
      range: "(9480,33)-(9480,72)"
      evaluatedAs: false
    - lineNumber: 9481
      expression: "!wrapStart"
      range: "(9481,13)-(9481,22)"
      evaluatedAs: true
    - lineNumber: 9481
      expression: "!wrapEnd"
      range: "(9481,27)-(9481,34)"
      evaluatedAs: true
  - testPathName: "wrapIfMissingWhenWrapEnd"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "char"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CBC"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9476
      expression: "isEmpty(str)"
      range: "(9476,13)-(9476,24)"
      evaluatedAs: false
    - lineNumber: 9476
      expression: "wrapWith == CharUtils.NUL"
      range: "(9476,29)-(9476,53)"
      evaluatedAs: false
    - lineNumber: 9479
      expression: "str.charAt(0) != wrapWith"
      range: "(9479,35)-(9479,59)"
      evaluatedAs: true
    - lineNumber: 9480
      expression: "str.charAt(str.length() - 1) != wrapWith"
      range: "(9480,33)-(9480,72)"
      evaluatedAs: true
    - lineNumber: 9481
      expression: "!wrapStart"
      range: "(9481,13)-(9481,22)"
      evaluatedAs: false
    - lineNumber: 9486
      expression: "wrapStart"
      range: "(9486,13)-(9486,21)"
      evaluatedAs: true
    - lineNumber: 9490
      expression: "wrapEnd"
      range: "(9490,13)-(9490,19)"
      evaluatedAs: true
- method:
    name: "wrapIfMissing"
    sourceCodeSignature: "String wrapIfMissing(final String str, final String wrapWith)"
    returnType: "java.lang.String"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "wrapWith"
      type: "java.lang.String"
    instructionFingerprint: "79494D37AAAAEBF53F7EDDDC0EA19C7B"
  paths:
  - testPathName: "wrapIfMissing1WhenIsEmptyWrapWith"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapWith):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "wrapWith1"
      valueType: "java.lang.String"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 9526
      expression: "isEmpty(str)"
      range: "(9526,13)-(9526,24)"
      evaluatedAs: false
    - lineNumber: 9526
      expression: "isEmpty(wrapWith)"
      range: "(9526,29)-(9526,45)"
      evaluatedAs: true
  - testPathName: "wrapIfMissing1WhenNotWrapEnd"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapWith):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "str"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    branches:
    - lineNumber: 9526
      expression: "isEmpty(str)"
      range: "(9526,13)-(9526,24)"
      evaluatedAs: false
    - lineNumber: 9526
      expression: "isEmpty(wrapWith)"
      range: "(9526,29)-(9526,45)"
      evaluatedAs: false
    - lineNumber: 9530
      expression: "!str.startsWith(wrapWith)"
      range: "(9530,35)-(9530,59)"
      evaluatedAs: false
    - lineNumber: 9531
      expression: "!str.endsWith(wrapWith)"
      range: "(9531,33)-(9531,55)"
      evaluatedAs: false
    - lineNumber: 9532
      expression: "!wrapStart"
      range: "(9532,13)-(9532,22)"
      evaluatedAs: true
    - lineNumber: 9532
      expression: "!wrapEnd"
      range: "(9532,27)-(9532,34)"
      evaluatedAs: true
  - testPathName: "wrapIfMissing1WhenWrapEnd"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "wrapWith"
      valueUuid: "wrapWith"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(str):boolean1"
    - type: "STATIC"
      name: "StringUtils.class"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "isEmpty(wrapWith):boolean2"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "wrapWith"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BCB"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 9526
      expression: "isEmpty(str)"
      range: "(9526,13)-(9526,24)"
      evaluatedAs: false
    - lineNumber: 9526
      expression: "isEmpty(wrapWith)"
      range: "(9526,29)-(9526,45)"
      evaluatedAs: false
    - lineNumber: 9530
      expression: "!str.startsWith(wrapWith)"
      range: "(9530,35)-(9530,59)"
      evaluatedAs: true
    - lineNumber: 9531
      expression: "!str.endsWith(wrapWith)"
      range: "(9531,33)-(9531,55)"
      evaluatedAs: true
    - lineNumber: 9532
      expression: "!wrapStart"
      range: "(9532,13)-(9532,22)"
      evaluatedAs: false
    - lineNumber: 9537
      expression: "wrapStart"
      range: "(9537,13)-(9537,21)"
      evaluatedAs: true
    - lineNumber: 9541
      expression: "wrapEnd"
      range: "(9541,13)-(9541,19)"
      evaluatedAs: true
