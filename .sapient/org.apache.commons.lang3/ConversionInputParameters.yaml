---
targetClass:
  fullClassName: "org.apache.commons.lang3.Conversion"
methods:
- method:
    name: "binaryBeMsb0ToHexDigit"
    sourceCodeSignature: "char binaryBeMsb0ToHexDigit(final boolean[] src)"
    returnType: "char"
    parameters:
    - name: "src"
      type: "boolean[]"
    instructionFingerprint: "60087D46C1537084389BD28A309B0CB3"
  paths:
  - testPathName: "binaryBeMsb0ToHexDigitTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "binaryBeMsb0ToHexDigit(src,srcPos):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "char1"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
- method:
    name: "binaryBeMsb0ToHexDigit"
    sourceCodeSignature: "char binaryBeMsb0ToHexDigit(final boolean[] src, final int\
      \ srcPos)"
    returnType: "char"
    parameters:
    - name: "src"
      type: "boolean[]"
    - name: "srcPos"
      type: "int"
    instructionFingerprint: "3F0E0951177707B4E09FADDBD9304F19"
  paths:
  - testPathName: "binaryBeMsb0ToHexDigit1WhenSrcLengthEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Cannot convert an empty array."
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: true
    - lineNumber: 120
      expression: "src.length == 0"
      range: "(120,17)-(120,31)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1WhenSrcLengthNotEquals0ThrowsIndexOutOfBoundsException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "indexOutOfBoundsException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem0"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IndexOutOfBoundsException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "2 is not within array length 1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IndexOutOfBoundsException"
      uuid: "indexOutOfBoundsException"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: true
    - lineNumber: 120
      expression: "src.length == 0"
      range: "(120,17)-(120,31)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "f"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: true
    - lineNumber: 129
      expression: "src[pos - 1]"
      range: "(129,21)-(129,32)"
      evaluatedAs: true
    - lineNumber: 130
      expression: "src[pos]"
      range: "(130,28)-(130,35)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "e"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: true
    - lineNumber: 129
      expression: "src[pos - 1]"
      range: "(129,21)-(129,32)"
      evaluatedAs: true
    - lineNumber: 130
      expression: "src[pos]"
      range: "(130,28)-(130,35)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus1NotIndexOfSrcAndPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "d"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: true
    - lineNumber: 129
      expression: "src[pos - 1]"
      range: "(129,21)-(129,32)"
      evaluatedAs: false
    - lineNumber: 132
      expression: "src[pos]"
      range: "(132,24)-(132,31)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus1NotIndexOfSrcAndPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "c"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: true
    - lineNumber: 129
      expression: "src[pos - 1]"
      range: "(129,21)-(129,32)"
      evaluatedAs: false
    - lineNumber: 132
      expression: "src[pos]"
      range: "(132,24)-(132,31)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus1IndexOfSrcAndPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "b"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: false
    - lineNumber: 134
      expression: "src[pos - 1]"
      range: "(134,17)-(134,28)"
      evaluatedAs: true
    - lineNumber: 135
      expression: "src[pos]"
      range: "(135,24)-(135,31)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus1IndexOfSrcAndPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: false
    - lineNumber: 134
      expression: "src[pos - 1]"
      range: "(134,17)-(134,28)"
      evaluatedAs: true
    - lineNumber: 135
      expression: "src[pos]"
      range: "(135,24)-(135,31)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus2NotIndexOfSrcAndPosMinus1NotIndexOfSrcAndPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "9"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: false
    - lineNumber: 134
      expression: "src[pos - 1]"
      range: "(134,17)-(134,28)"
      evaluatedAs: false
    - lineNumber: 137
      expression: "src[pos]"
      range: "(137,20)-(137,27)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus2NotIndexOfSrcAndPosMinus1NotIndexOfSrcAndPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "8"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "src[pos - 2]"
      range: "(128,17)-(128,28)"
      evaluatedAs: false
    - lineNumber: 134
      expression: "src[pos - 1]"
      range: "(134,17)-(134,28)"
      evaluatedAs: false
    - lineNumber: 137
      expression: "src[pos]"
      range: "(137,20)-(137,27)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1When2LessThanOrEqualsToPosAndPosMinus2IndexOfSrcAndPosMinus1IndexOfSrcAndPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "7"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: true
    - lineNumber: 140
      expression: "src[pos - 1]"
      range: "(140,17)-(140,28)"
      evaluatedAs: true
    - lineNumber: 141
      expression: "src[pos]"
      range: "(141,24)-(141,31)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1When2LessThanOrEqualsToPosAndPosMinus2IndexOfSrcAndPosMinus1IndexOfSrcAndPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "6"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: true
    - lineNumber: 140
      expression: "src[pos - 1]"
      range: "(140,17)-(140,28)"
      evaluatedAs: true
    - lineNumber: 141
      expression: "src[pos]"
      range: "(141,24)-(141,31)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1When2LessThanOrEqualsToPosAndPosMinus2IndexOfSrcAndPosMinus1NotIndexOfSrcAndPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "5"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: true
    - lineNumber: 140
      expression: "src[pos - 1]"
      range: "(140,17)-(140,28)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "src[pos]"
      range: "(143,20)-(143,27)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1When2LessThanOrEqualsToPosAndPosMinus2IndexOfSrcAndPosMinus1NotIndexOfSrcAndPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "4"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: true
    - lineNumber: 140
      expression: "src[pos - 1]"
      range: "(140,17)-(140,28)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "src[pos]"
      range: "(143,20)-(143,27)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1When2LessThanOrEqualsToPosAndPosMinus2NotIndexOfSrcAnd1LessThanOrEqualsToPosAndPosMinus1IndexOfS"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: false
    - lineNumber: 145
      expression: "1 <= pos"
      range: "(145,13)-(145,20)"
      evaluatedAs: true
    - lineNumber: 145
      expression: "src[pos - 1]"
      range: "(145,25)-(145,36)"
      evaluatedAs: true
    - lineNumber: 146
      expression: "src[pos]"
      range: "(146,20)-(146,27)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus2NotIndexOfSrcAnd1LessThanOrEqualsToPosAndPosMinus1IndexOfSrcAndPosNotIndexOfSrc2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: false
    - lineNumber: 145
      expression: "1 <= pos"
      range: "(145,13)-(145,20)"
      evaluatedAs: true
    - lineNumber: 145
      expression: "src[pos - 1]"
      range: "(145,25)-(145,36)"
      evaluatedAs: true
    - lineNumber: 146
      expression: "src[pos]"
      range: "(146,20)-(146,27)"
      evaluatedAs: false
  - testPathName: "binaryBeMsb0ToHexDigit1When2LessThanOrEqualsToPosAndPosMinus2NotIndexOfSrcAnd1LessThanOrEqualsToPosAndPosMinus1NotIndex"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: false
    - lineNumber: 145
      expression: "1 <= pos"
      range: "(145,13)-(145,20)"
      evaluatedAs: true
    - lineNumber: 145
      expression: "src[pos - 1]"
      range: "(145,25)-(145,36)"
      evaluatedAs: false
    - lineNumber: 148
      expression: "src[pos]"
      range: "(148,16)-(148,23)"
      evaluatedAs: true
  - testPathName: "binaryBeMsb0ToHexDigit1WhenPosMinus2NotIndexOfSrcAnd1LessThanOrEqualsToPosAndPosMinus1NotIndexOfSrcAndPosNotIndexOfSrc2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 118
      expression: "Integer.compareUnsigned(srcPos, src.length) >= 0"
      range: "(118,13)-(118,60)"
      evaluatedAs: false
    - lineNumber: 127
      expression: "3 <= pos"
      range: "(127,13)-(127,20)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "src[pos - 3]"
      range: "(127,25)-(127,36)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "2 <= pos"
      range: "(139,13)-(139,20)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "src[pos - 2]"
      range: "(139,25)-(139,36)"
      evaluatedAs: false
    - lineNumber: 145
      expression: "1 <= pos"
      range: "(145,13)-(145,20)"
      evaluatedAs: true
    - lineNumber: 145
      expression: "src[pos - 1]"
      range: "(145,25)-(145,36)"
      evaluatedAs: false
    - lineNumber: 148
      expression: "src[pos]"
      range: "(148,16)-(148,23)"
      evaluatedAs: false
- method:
    name: "binaryToByte"
    sourceCodeSignature: "byte binaryToByte(final boolean[] src, final int srcPos,\
      \ final byte dstInit, final int dstPos, final int nBools)"
    returnType: "byte"
    parameters:
    - name: "src"
      type: "boolean[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "byte"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "B1D3FA4668F2C20B1FCD3C5299952A0B"
  paths:
  - testPathName: "binaryToByteWhenSrcPosNotEquals0And0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 168
      expression: "src.length == 0"
      range: "(168,13)-(168,27)"
      evaluatedAs: true
    - lineNumber: 168
      expression: "srcPos == 0"
      range: "(168,32)-(168,42)"
      evaluatedAs: false
    - lineNumber: 168
      expression: "0 == nBools"
      range: "(168,47)-(168,57)"
      evaluatedAs: true
  - testPathName: "binaryToByteWhen0NotEqualsNBoolsAndNBoolsMinus1PlusDstPosGreaterThanOrEqualsTo8ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+dstPos is greater or equal to than 8"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 168
      expression: "src.length == 0"
      range: "(168,13)-(168,27)"
      evaluatedAs: true
    - lineNumber: 168
      expression: "srcPos == 0"
      range: "(168,32)-(168,42)"
      evaluatedAs: false
    - lineNumber: 168
      expression: "0 == nBools"
      range: "(168,47)-(168,57)"
      evaluatedAs: false
    - lineNumber: 171
      expression: "nBools - 1 + dstPos >= 8"
      range: "(171,13)-(171,36)"
      evaluatedAs: true
  - testPathName: "binaryToByteWhenIPlusSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "byte2"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "byte2"
    branches:
    - lineNumber: 168
      expression: "src.length == 0"
      range: "(168,13)-(168,27)"
      evaluatedAs: false
    - lineNumber: 168
      expression: "0 == nBools"
      range: "(168,47)-(168,57)"
      evaluatedAs: false
    - lineNumber: 171
      expression: "nBools - 1 + dstPos >= 8"
      range: "(171,13)-(171,36)"
      evaluatedAs: false
    - lineNumber: 175
      expression: "i < nBools"
      range: "(175,25)-(175,34)"
      evaluatedAs: true
    - lineNumber: 177
      expression: "src[i + srcPos]"
      range: "(177,31)-(177,45)"
      evaluatedAs: false
  - testPathName: "binaryToByteWhenILessThanNBoolsAndIPlusSrcPosIndexOfSrc"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "byte1"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "byte1"
    branches:
    - lineNumber: 168
      expression: "src.length == 0"
      range: "(168,13)-(168,27)"
      evaluatedAs: true
    - lineNumber: 168
      expression: "srcPos == 0"
      range: "(168,32)-(168,42)"
      evaluatedAs: false
    - lineNumber: 168
      expression: "0 == nBools"
      range: "(168,47)-(168,57)"
      evaluatedAs: false
    - lineNumber: 171
      expression: "nBools - 1 + dstPos >= 8"
      range: "(171,13)-(171,36)"
      evaluatedAs: false
    - lineNumber: 175
      expression: "i < nBools"
      range: "(175,25)-(175,34)"
      evaluatedAs: true
    - lineNumber: 177
      expression: "src[i + srcPos]"
      range: "(177,31)-(177,45)"
      evaluatedAs: true
- method:
    name: "binaryToHexDigit"
    sourceCodeSignature: "char binaryToHexDigit(final boolean[] src)"
    returnType: "char"
    parameters:
    - name: "src"
      type: "boolean[]"
    instructionFingerprint: "6EFE2FD9D94B332D5413B4FB9038325B"
  paths:
  - testPathName: "binaryToHexDigitTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "binaryToHexDigit(src,srcPos):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "char1"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
- method:
    name: "binaryToHexDigit"
    sourceCodeSignature: "char binaryToHexDigit(final boolean[] src, final int srcPos)"
    returnType: "char"
    parameters:
    - name: "src"
      type: "boolean[]"
    - name: "srcPos"
      type: "int"
    instructionFingerprint: "49DA9805F79E932E1F866A71FDB8B600"
  paths:
  - testPathName: "binaryToHexDigit1WhenSrcLengthEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Cannot convert an empty array."
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus1IndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "f"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: true
    - lineNumber: 221
      expression: "src[srcPos + 1]"
      range: "(221,21)-(221,35)"
      evaluatedAs: true
    - lineNumber: 222
      expression: "src[srcPos]"
      range: "(222,28)-(222,38)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus1IndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "e"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: true
    - lineNumber: 221
      expression: "src[srcPos + 1]"
      range: "(221,21)-(221,35)"
      evaluatedAs: true
    - lineNumber: 222
      expression: "src[srcPos]"
      range: "(222,28)-(222,38)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus1NotIndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "d"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: true
    - lineNumber: 221
      expression: "src[srcPos + 1]"
      range: "(221,21)-(221,35)"
      evaluatedAs: false
    - lineNumber: 224
      expression: "src[srcPos]"
      range: "(224,24)-(224,34)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus1NotIndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "c"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: true
    - lineNumber: 221
      expression: "src[srcPos + 1]"
      range: "(221,21)-(221,35)"
      evaluatedAs: false
    - lineNumber: 224
      expression: "src[srcPos]"
      range: "(224,24)-(224,34)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "b"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: false
    - lineNumber: 226
      expression: "src[srcPos + 1]"
      range: "(226,17)-(226,31)"
      evaluatedAs: true
    - lineNumber: 227
      expression: "src[srcPos]"
      range: "(227,24)-(227,34)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: false
    - lineNumber: 226
      expression: "src[srcPos + 1]"
      range: "(226,17)-(226,31)"
      evaluatedAs: true
    - lineNumber: 227
      expression: "src[srcPos]"
      range: "(227,24)-(227,34)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "9"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: false
    - lineNumber: 226
      expression: "src[srcPos + 1]"
      range: "(226,17)-(226,31)"
      evaluatedAs: false
    - lineNumber: 229
      expression: "src[srcPos]"
      range: "(229,20)-(229,30)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "8"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: true
    - lineNumber: 220
      expression: "src[srcPos + 2]"
      range: "(220,17)-(220,31)"
      evaluatedAs: false
    - lineNumber: 226
      expression: "src[srcPos + 1]"
      range: "(226,17)-(226,31)"
      evaluatedAs: false
    - lineNumber: 229
      expression: "src[srcPos]"
      range: "(229,20)-(229,30)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus2AndSrcPosPlus2IndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "7"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: true
    - lineNumber: 232
      expression: "src[srcPos + 1]"
      range: "(232,17)-(232,31)"
      evaluatedAs: true
    - lineNumber: 233
      expression: "src[srcPos]"
      range: "(233,24)-(233,34)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus2AndSrcPosPlus2IndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosNotIndexOf"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "6"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: true
    - lineNumber: 232
      expression: "src[srcPos + 1]"
      range: "(232,17)-(232,31)"
      evaluatedAs: true
    - lineNumber: 233
      expression: "src[srcPos]"
      range: "(233,24)-(233,34)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus2AndSrcPosPlus2IndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosIndexOf"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "5"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: true
    - lineNumber: 232
      expression: "src[srcPos + 1]"
      range: "(232,17)-(232,31)"
      evaluatedAs: false
    - lineNumber: 235
      expression: "src[srcPos]"
      range: "(235,20)-(235,30)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus2AndSrcPosPlus2IndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosNotInde"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "4"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: true
    - lineNumber: 232
      expression: "src[srcPos + 1]"
      range: "(232,17)-(232,31)"
      evaluatedAs: false
    - lineNumber: 235
      expression: "src[srcPos]"
      range: "(235,20)-(235,30)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus1AndSrcPosPlus1IndexOfSrcAndSrcPosIndexOfSrc2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: false
    - lineNumber: 237
      expression: "src.length > srcPos + 1"
      range: "(237,13)-(237,35)"
      evaluatedAs: true
    - lineNumber: 237
      expression: "src[srcPos + 1]"
      range: "(237,40)-(237,54)"
      evaluatedAs: true
    - lineNumber: 238
      expression: "src[srcPos]"
      range: "(238,20)-(238,30)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus1AndSrcPosPlus1IndexOfSrcAndSrcPosNotIndexOfSrc3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: false
    - lineNumber: 237
      expression: "src.length > srcPos + 1"
      range: "(237,13)-(237,35)"
      evaluatedAs: true
    - lineNumber: 237
      expression: "src[srcPos + 1]"
      range: "(237,40)-(237,54)"
      evaluatedAs: true
    - lineNumber: 238
      expression: "src[srcPos]"
      range: "(238,20)-(238,30)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus1AndSrcPosPlus1NotIndexOfSrcAndSrcPosIndexOfSrc2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: false
    - lineNumber: 237
      expression: "src.length > srcPos + 1"
      range: "(237,13)-(237,35)"
      evaluatedAs: true
    - lineNumber: 237
      expression: "src[srcPos + 1]"
      range: "(237,40)-(237,54)"
      evaluatedAs: false
    - lineNumber: 240
      expression: "src[srcPos]"
      range: "(240,16)-(240,26)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigit1WhenSrcLengthGreaterThanSrcPosPlus1AndSrcPosPlus1NotIndexOfSrcAndSrcPosNotIndexOfSrc2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 216
      expression: "src.length == 0"
      range: "(216,13)-(216,27)"
      evaluatedAs: false
    - lineNumber: 219
      expression: "src.length > srcPos + 3"
      range: "(219,13)-(219,35)"
      evaluatedAs: true
    - lineNumber: 219
      expression: "src[srcPos + 3]"
      range: "(219,40)-(219,54)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "src.length > srcPos + 2"
      range: "(231,13)-(231,35)"
      evaluatedAs: true
    - lineNumber: 231
      expression: "src[srcPos + 2]"
      range: "(231,40)-(231,54)"
      evaluatedAs: false
    - lineNumber: 237
      expression: "src.length > srcPos + 1"
      range: "(237,13)-(237,35)"
      evaluatedAs: true
    - lineNumber: 237
      expression: "src[srcPos + 1]"
      range: "(237,40)-(237,54)"
      evaluatedAs: false
    - lineNumber: 240
      expression: "src[srcPos]"
      range: "(240,16)-(240,26)"
      evaluatedAs: false
- method:
    name: "binaryToHexDigitMsb0_4bits"
    sourceCodeSignature: "char binaryToHexDigitMsb0_4bits(final boolean[] src)"
    returnType: "char"
    parameters:
    - name: "src"
      type: "boolean[]"
    instructionFingerprint: "38F7C6A3958BBE1C3F8EAE89FC79B894"
  paths:
  - testPathName: "binaryToHexDigitMsb0_4bitsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "binaryToHexDigitMsb0_4bits(src,srcPos):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "char1"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
- method:
    name: "binaryToHexDigitMsb0_4bits"
    sourceCodeSignature: "char binaryToHexDigitMsb0_4bits(final boolean[] src, final\
      \ int srcPos)"
    returnType: "char"
    parameters:
    - name: "src"
      type: "boolean[]"
    - name: "srcPos"
      type: "int"
    instructionFingerprint: "B59B7661D120A00F6B9AEDEDE0CB2C06"
  paths:
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcLengthGreaterThan8ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem3"
          4:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem4"
          5:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem5"
          6:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem6"
          7:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem7"
          8:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem8"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "src.length>8: src.length=9"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcLengthMinusSrcPosLessThan4ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "srcItem0"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "src.length-srcPos<4: src.length=1, srcPos=2"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "f"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: true
    - lineNumber: 286
      expression: "src[srcPos + 1]"
      range: "(286,21)-(286,35)"
      evaluatedAs: true
    - lineNumber: 287
      expression: "src[srcPos]"
      range: "(287,28)-(287,38)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "7"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: true
    - lineNumber: 286
      expression: "src[srcPos + 1]"
      range: "(286,21)-(286,35)"
      evaluatedAs: true
    - lineNumber: 287
      expression: "src[srcPos]"
      range: "(287,28)-(287,38)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus1NotIndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "b"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: true
    - lineNumber: 286
      expression: "src[srcPos + 1]"
      range: "(286,21)-(286,35)"
      evaluatedAs: false
    - lineNumber: 289
      expression: "src[srcPos]"
      range: "(289,24)-(289,34)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus1NotIndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: true
    - lineNumber: 286
      expression: "src[srcPos + 1]"
      range: "(286,21)-(286,35)"
      evaluatedAs: false
    - lineNumber: 289
      expression: "src[srcPos]"
      range: "(289,24)-(289,34)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus1IndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "d"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: false
    - lineNumber: 291
      expression: "src[srcPos + 1]"
      range: "(291,17)-(291,31)"
      evaluatedAs: true
    - lineNumber: 292
      expression: "src[srcPos]"
      range: "(292,24)-(292,34)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus1IndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "5"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: false
    - lineNumber: 291
      expression: "src[srcPos + 1]"
      range: "(291,17)-(291,31)"
      evaluatedAs: true
    - lineNumber: 292
      expression: "src[srcPos]"
      range: "(292,24)-(292,34)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "9"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: false
    - lineNumber: 291
      expression: "src[srcPos + 1]"
      range: "(291,17)-(291,31)"
      evaluatedAs: false
    - lineNumber: 294
      expression: "src[srcPos]"
      range: "(294,20)-(294,30)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: true
    - lineNumber: 285
      expression: "src[srcPos + 2]"
      range: "(285,17)-(285,31)"
      evaluatedAs: false
    - lineNumber: 291
      expression: "src[srcPos + 1]"
      range: "(291,17)-(291,31)"
      evaluatedAs: false
    - lineNumber: 294
      expression: "src[srcPos]"
      range: "(294,20)-(294,30)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2IndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "e"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: true
    - lineNumber: 297
      expression: "src[srcPos + 1]"
      range: "(297,17)-(297,31)"
      evaluatedAs: true
    - lineNumber: 298
      expression: "src[srcPos]"
      range: "(298,24)-(298,34)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2IndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "6"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: true
    - lineNumber: 297
      expression: "src[srcPos + 1]"
      range: "(297,17)-(297,31)"
      evaluatedAs: true
    - lineNumber: 298
      expression: "src[srcPos]"
      range: "(298,24)-(298,34)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2IndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: true
    - lineNumber: 297
      expression: "src[srcPos + 1]"
      range: "(297,17)-(297,31)"
      evaluatedAs: false
    - lineNumber: 300
      expression: "src[srcPos]"
      range: "(300,20)-(300,30)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2IndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: true
    - lineNumber: 297
      expression: "src[srcPos + 1]"
      range: "(297,17)-(297,31)"
      evaluatedAs: false
    - lineNumber: 300
      expression: "src[srcPos]"
      range: "(300,20)-(300,30)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "c"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: false
    - lineNumber: 302
      expression: "src[srcPos + 1]"
      range: "(302,13)-(302,27)"
      evaluatedAs: true
    - lineNumber: 303
      expression: "src[srcPos]"
      range: "(303,20)-(303,30)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1IndexOfSrcAndSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "4"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: false
    - lineNumber: 302
      expression: "src[srcPos + 1]"
      range: "(302,13)-(302,27)"
      evaluatedAs: true
    - lineNumber: 303
      expression: "src[srcPos]"
      range: "(303,20)-(303,30)"
      evaluatedAs: false
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus3NotIndexOfSrcAndSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "8"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: false
    - lineNumber: 302
      expression: "src[srcPos + 1]"
      range: "(302,13)-(302,27)"
      evaluatedAs: false
    - lineNumber: 305
      expression: "src[srcPos]"
      range: "(305,16)-(305,26)"
      evaluatedAs: true
  - testPathName: "binaryToHexDigitMsb0_4bits1WhenSrcPosPlus3NotIndexOfSrcAndSrcPosPlus2NotIndexOfSrcAndSrcPosPlus1NotIndexOfSrcAndSrcPosN"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean5"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean4"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean3"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 278
      expression: "src.length > 8"
      range: "(278,13)-(278,26)"
      evaluatedAs: false
    - lineNumber: 281
      expression: "src.length - srcPos < 4"
      range: "(281,13)-(281,35)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "src[srcPos + 3]"
      range: "(284,13)-(284,27)"
      evaluatedAs: false
    - lineNumber: 296
      expression: "src[srcPos + 2]"
      range: "(296,13)-(296,27)"
      evaluatedAs: false
    - lineNumber: 302
      expression: "src[srcPos + 1]"
      range: "(302,13)-(302,27)"
      evaluatedAs: false
    - lineNumber: 305
      expression: "src[srcPos]"
      range: "(305,16)-(305,26)"
      evaluatedAs: false
- method:
    name: "binaryToInt"
    sourceCodeSignature: "int binaryToInt(final boolean[] src, final int srcPos, final\
      \ int dstInit, final int dstPos, final int nBools)"
    returnType: "int"
    parameters:
    - name: "src"
      type: "boolean[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "int"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "D3D703A81B93C143BCD62EF5D9484807"
  paths:
  - testPathName: "binaryToIntWhenSrcPosNotEquals0And0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 325
      expression: "src.length == 0"
      range: "(325,13)-(325,27)"
      evaluatedAs: true
    - lineNumber: 325
      expression: "srcPos == 0"
      range: "(325,32)-(325,42)"
      evaluatedAs: false
    - lineNumber: 325
      expression: "0 == nBools"
      range: "(325,47)-(325,57)"
      evaluatedAs: true
  - testPathName: "binaryToIntWhen0NotEqualsNBoolsAndNBoolsMinus1PlusDstPosGreaterThanOrEqualsTo32ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 32
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+dstPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 325
      expression: "src.length == 0"
      range: "(325,13)-(325,27)"
      evaluatedAs: true
    - lineNumber: 325
      expression: "srcPos == 0"
      range: "(325,32)-(325,42)"
      evaluatedAs: false
    - lineNumber: 325
      expression: "0 == nBools"
      range: "(325,47)-(325,57)"
      evaluatedAs: false
    - lineNumber: 328
      expression: "nBools - 1 + dstPos >= 32"
      range: "(328,13)-(328,37)"
      evaluatedAs: true
  - testPathName: "binaryToIntWhenIPlusSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "int16"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int16"
    branches:
    - lineNumber: 325
      expression: "src.length == 0"
      range: "(325,13)-(325,27)"
      evaluatedAs: false
    - lineNumber: 325
      expression: "0 == nBools"
      range: "(325,47)-(325,57)"
      evaluatedAs: false
    - lineNumber: 328
      expression: "nBools - 1 + dstPos >= 32"
      range: "(328,13)-(328,37)"
      evaluatedAs: false
    - lineNumber: 332
      expression: "i < nBools"
      range: "(332,25)-(332,34)"
      evaluatedAs: true
    - lineNumber: 334
      expression: "src[i + srcPos]"
      range: "(334,31)-(334,45)"
      evaluatedAs: false
  - testPathName: "binaryToIntWhenILessThanNBoolsAndIPlusSrcPosIndexOfSrc"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "int12"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int12"
    branches:
    - lineNumber: 325
      expression: "src.length == 0"
      range: "(325,13)-(325,27)"
      evaluatedAs: true
    - lineNumber: 325
      expression: "srcPos == 0"
      range: "(325,32)-(325,42)"
      evaluatedAs: false
    - lineNumber: 325
      expression: "0 == nBools"
      range: "(325,47)-(325,57)"
      evaluatedAs: false
    - lineNumber: 328
      expression: "nBools - 1 + dstPos >= 32"
      range: "(328,13)-(328,37)"
      evaluatedAs: false
    - lineNumber: 332
      expression: "i < nBools"
      range: "(332,25)-(332,34)"
      evaluatedAs: true
    - lineNumber: 334
      expression: "src[i + srcPos]"
      range: "(334,31)-(334,45)"
      evaluatedAs: true
- method:
    name: "binaryToLong"
    sourceCodeSignature: "long binaryToLong(final boolean[] src, final int srcPos,\
      \ final long dstInit, final int dstPos, final int nBools)"
    returnType: "long"
    parameters:
    - name: "src"
      type: "boolean[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "long"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "E065C49BCA0EF4BAA0E621BF3D2194D5"
  paths:
  - testPathName: "binaryToLongWhenSrcPosNotEquals0And0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 358
      expression: "src.length == 0"
      range: "(358,13)-(358,27)"
      evaluatedAs: true
    - lineNumber: 358
      expression: "srcPos == 0"
      range: "(358,32)-(358,42)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "0 == nBools"
      range: "(358,47)-(358,57)"
      evaluatedAs: true
  - testPathName: "binaryToLongWhen0NotEqualsNBoolsAndNBoolsMinus1PlusDstPosGreaterThanOrEqualsTo64ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 64
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+dstPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 358
      expression: "src.length == 0"
      range: "(358,13)-(358,27)"
      evaluatedAs: true
    - lineNumber: 358
      expression: "srcPos == 0"
      range: "(358,32)-(358,42)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "0 == nBools"
      range: "(358,47)-(358,57)"
      evaluatedAs: false
    - lineNumber: 361
      expression: "nBools - 1 + dstPos >= 64"
      range: "(361,13)-(361,37)"
      evaluatedAs: true
  - testPathName: "binaryToLongWhenIPlusSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "long8"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long8"
    branches:
    - lineNumber: 358
      expression: "src.length == 0"
      range: "(358,13)-(358,27)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "0 == nBools"
      range: "(358,47)-(358,57)"
      evaluatedAs: false
    - lineNumber: 361
      expression: "nBools - 1 + dstPos >= 64"
      range: "(361,13)-(361,37)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "i < nBools"
      range: "(365,25)-(365,34)"
      evaluatedAs: true
    - lineNumber: 367
      expression: "src[i + srcPos]"
      range: "(367,32)-(367,46)"
      evaluatedAs: false
  - testPathName: "binaryToLongWhenILessThanNBoolsAndIPlusSrcPosIndexOfSrc"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "long5"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long5"
    branches:
    - lineNumber: 358
      expression: "src.length == 0"
      range: "(358,13)-(358,27)"
      evaluatedAs: true
    - lineNumber: 358
      expression: "srcPos == 0"
      range: "(358,32)-(358,42)"
      evaluatedAs: false
    - lineNumber: 358
      expression: "0 == nBools"
      range: "(358,47)-(358,57)"
      evaluatedAs: false
    - lineNumber: 361
      expression: "nBools - 1 + dstPos >= 64"
      range: "(361,13)-(361,37)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "i < nBools"
      range: "(365,25)-(365,34)"
      evaluatedAs: true
    - lineNumber: 367
      expression: "src[i + srcPos]"
      range: "(367,32)-(367,46)"
      evaluatedAs: true
- method:
    name: "binaryToShort"
    sourceCodeSignature: "short binaryToShort(final boolean[] src, final int srcPos,\
      \ final short dstInit, final int dstPos, final int nBools)"
    returnType: "short"
    parameters:
    - name: "src"
      type: "boolean[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "short"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "3A85A80F3D2238F1D02BA1B2C74AB355"
  paths:
  - testPathName: "binaryToShortWhenSrcPosNotEquals0And0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 391
      expression: "src.length == 0"
      range: "(391,13)-(391,27)"
      evaluatedAs: true
    - lineNumber: 391
      expression: "srcPos == 0"
      range: "(391,32)-(391,42)"
      evaluatedAs: false
    - lineNumber: 391
      expression: "0 == nBools"
      range: "(391,47)-(391,57)"
      evaluatedAs: true
  - testPathName: "binaryToShortWhen0NotEqualsNBoolsAndNBoolsMinus1PlusDstPosGreaterThanOrEqualsTo16ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 16
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+dstPos is greater or equal to than 16"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 391
      expression: "src.length == 0"
      range: "(391,13)-(391,27)"
      evaluatedAs: true
    - lineNumber: 391
      expression: "srcPos == 0"
      range: "(391,32)-(391,42)"
      evaluatedAs: false
    - lineNumber: 391
      expression: "0 == nBools"
      range: "(391,47)-(391,57)"
      evaluatedAs: false
    - lineNumber: 394
      expression: "nBools - 1 + dstPos >= 16"
      range: "(394,13)-(394,37)"
      evaluatedAs: true
  - testPathName: "binaryToShortWhenIPlusSrcPosNotIndexOfSrc"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "short2"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "boolean2"
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "short2"
    branches:
    - lineNumber: 391
      expression: "src.length == 0"
      range: "(391,13)-(391,27)"
      evaluatedAs: false
    - lineNumber: 391
      expression: "0 == nBools"
      range: "(391,47)-(391,57)"
      evaluatedAs: false
    - lineNumber: 394
      expression: "nBools - 1 + dstPos >= 16"
      range: "(394,13)-(394,37)"
      evaluatedAs: false
    - lineNumber: 398
      expression: "i < nBools"
      range: "(398,25)-(398,34)"
      evaluatedAs: true
    - lineNumber: 400
      expression: "src[i + srcPos]"
      range: "(400,31)-(400,45)"
      evaluatedAs: false
  - testPathName: "binaryToShortWhenILessThanNBoolsAndIPlusSrcPosIndexOfSrc"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "short1"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "short1"
    branches:
    - lineNumber: 391
      expression: "src.length == 0"
      range: "(391,13)-(391,27)"
      evaluatedAs: true
    - lineNumber: 391
      expression: "srcPos == 0"
      range: "(391,32)-(391,42)"
      evaluatedAs: false
    - lineNumber: 391
      expression: "0 == nBools"
      range: "(391,47)-(391,57)"
      evaluatedAs: false
    - lineNumber: 394
      expression: "nBools - 1 + dstPos >= 16"
      range: "(394,13)-(394,37)"
      evaluatedAs: false
    - lineNumber: 398
      expression: "i < nBools"
      range: "(398,25)-(398,34)"
      evaluatedAs: true
    - lineNumber: 400
      expression: "src[i + srcPos]"
      range: "(400,31)-(400,45)"
      evaluatedAs: true
- method:
    name: "byteArrayToInt"
    sourceCodeSignature: "int byteArrayToInt(final byte[] src, final int srcPos, final\
      \ int dstInit, final int dstPos, final int nBytes)"
    returnType: "int"
    parameters:
    - name: "src"
      type: "byte[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "int"
    - name: "dstPos"
      type: "int"
    - name: "nBytes"
      type: "int"
    instructionFingerprint: "C07AB53AB26874D0730F38B6A0EABC2F"
  paths:
  - testPathName: "byteArrayToIntWhenSrcPosNotEquals0And0EqualsNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    branches:
    - lineNumber: 424
      expression: "src.length == 0"
      range: "(424,13)-(424,27)"
      evaluatedAs: true
    - lineNumber: 424
      expression: "srcPos == 0"
      range: "(424,32)-(424,42)"
      evaluatedAs: false
    - lineNumber: 424
      expression: "0 == nBytes"
      range: "(424,47)-(424,57)"
      evaluatedAs: true
  - testPathName: "byteArrayToIntWhen0NotEqualsNBytesAndNBytesMinus1MultipliedBy8PlusDstPosGreaterThanOrEquaThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 32
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nBytes-1)*8+dstPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 424
      expression: "src.length == 0"
      range: "(424,13)-(424,27)"
      evaluatedAs: true
    - lineNumber: 424
      expression: "srcPos == 0"
      range: "(424,32)-(424,42)"
      evaluatedAs: false
    - lineNumber: 424
      expression: "0 == nBytes"
      range: "(424,47)-(424,57)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "(nBytes - 1) * 8 + dstPos >= 32"
      range: "(427,13)-(427,43)"
      evaluatedAs: true
  - testPathName: "byteArrayToIntWhenNBytesMinus1MultipliedBy8PlusDstPosLessThan32AndILessThanNBytes"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "int15"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int15"
    branches:
    - lineNumber: 424
      expression: "src.length == 0"
      range: "(424,13)-(424,27)"
      evaluatedAs: true
    - lineNumber: 424
      expression: "srcPos == 0"
      range: "(424,32)-(424,42)"
      evaluatedAs: false
    - lineNumber: 424
      expression: "0 == nBytes"
      range: "(424,47)-(424,57)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "(nBytes - 1) * 8 + dstPos >= 32"
      range: "(427,13)-(427,43)"
      evaluatedAs: false
    - lineNumber: 431
      expression: "i < nBytes"
      range: "(431,25)-(431,34)"
      evaluatedAs: true
- method:
    name: "byteArrayToLong"
    sourceCodeSignature: "long byteArrayToLong(final byte[] src, final int srcPos,\
      \ final long dstInit, final int dstPos, final int nBytes)"
    returnType: "long"
    parameters:
    - name: "src"
      type: "byte[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "long"
    - name: "dstPos"
      type: "int"
    - name: "nBytes"
      type: "int"
    instructionFingerprint: "3ABFB86ADC6C51561703DDCE058353F4"
  paths:
  - testPathName: "byteArrayToLongWhenSrcPosNotEquals0And0EqualsNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    branches:
    - lineNumber: 457
      expression: "src.length == 0"
      range: "(457,13)-(457,27)"
      evaluatedAs: true
    - lineNumber: 457
      expression: "srcPos == 0"
      range: "(457,32)-(457,42)"
      evaluatedAs: false
    - lineNumber: 457
      expression: "0 == nBytes"
      range: "(457,47)-(457,57)"
      evaluatedAs: true
  - testPathName: "byteArrayToLongWhen0NotEqualsNBytesAndNBytesMinus1MultipliedBy8PlusDstPosGreaterThanOrEquThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 64
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nBytes-1)*8+dstPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 457
      expression: "src.length == 0"
      range: "(457,13)-(457,27)"
      evaluatedAs: true
    - lineNumber: 457
      expression: "srcPos == 0"
      range: "(457,32)-(457,42)"
      evaluatedAs: false
    - lineNumber: 457
      expression: "0 == nBytes"
      range: "(457,47)-(457,57)"
      evaluatedAs: false
    - lineNumber: 460
      expression: "(nBytes - 1) * 8 + dstPos >= 64"
      range: "(460,13)-(460,43)"
      evaluatedAs: true
  - testPathName: "byteArrayToLongWhenNBytesMinus1MultipliedBy8PlusDstPosLessThan64AndILessThanNBytes"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "long7"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long7"
    branches:
    - lineNumber: 457
      expression: "src.length == 0"
      range: "(457,13)-(457,27)"
      evaluatedAs: true
    - lineNumber: 457
      expression: "srcPos == 0"
      range: "(457,32)-(457,42)"
      evaluatedAs: false
    - lineNumber: 457
      expression: "0 == nBytes"
      range: "(457,47)-(457,57)"
      evaluatedAs: false
    - lineNumber: 460
      expression: "(nBytes - 1) * 8 + dstPos >= 64"
      range: "(460,13)-(460,43)"
      evaluatedAs: false
    - lineNumber: 464
      expression: "i < nBytes"
      range: "(464,25)-(464,34)"
      evaluatedAs: true
- method:
    name: "byteArrayToShort"
    sourceCodeSignature: "short byteArrayToShort(final byte[] src, final int srcPos,\
      \ final short dstInit, final int dstPos, final int nBytes)"
    returnType: "short"
    parameters:
    - name: "src"
      type: "byte[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "short"
    - name: "dstPos"
      type: "int"
    - name: "nBytes"
      type: "int"
    instructionFingerprint: "3268801CDC14C8DF05A6113D48ED0B60"
  paths:
  - testPathName: "byteArrayToShortWhenSrcPosNotEquals0And0EqualsNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    branches:
    - lineNumber: 490
      expression: "src.length == 0"
      range: "(490,13)-(490,27)"
      evaluatedAs: true
    - lineNumber: 490
      expression: "srcPos == 0"
      range: "(490,32)-(490,42)"
      evaluatedAs: false
    - lineNumber: 490
      expression: "0 == nBytes"
      range: "(490,47)-(490,57)"
      evaluatedAs: true
  - testPathName: "byteArrayToShortWhen0NotEqualsNBytesAndNBytesMinus1MultipliedBy8PlusDstPosGreaterThanOrEqThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 16
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nBytes-1)*8+dstPos is greater or equal to than 16"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 490
      expression: "src.length == 0"
      range: "(490,13)-(490,27)"
      evaluatedAs: true
    - lineNumber: 490
      expression: "srcPos == 0"
      range: "(490,32)-(490,42)"
      evaluatedAs: false
    - lineNumber: 490
      expression: "0 == nBytes"
      range: "(490,47)-(490,57)"
      evaluatedAs: false
    - lineNumber: 493
      expression: "(nBytes - 1) * 8 + dstPos >= 16"
      range: "(493,13)-(493,43)"
      evaluatedAs: true
  - testPathName: "byteArrayToShortWhenNBytesMinus1MultipliedBy8PlusDstPosLessThan16AndILessThanNBytes"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "short1"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "short1"
    branches:
    - lineNumber: 490
      expression: "src.length == 0"
      range: "(490,13)-(490,27)"
      evaluatedAs: true
    - lineNumber: 490
      expression: "srcPos == 0"
      range: "(490,32)-(490,42)"
      evaluatedAs: false
    - lineNumber: 490
      expression: "0 == nBytes"
      range: "(490,47)-(490,57)"
      evaluatedAs: false
    - lineNumber: 493
      expression: "(nBytes - 1) * 8 + dstPos >= 16"
      range: "(493,13)-(493,43)"
      evaluatedAs: false
    - lineNumber: 497
      expression: "i < nBytes"
      range: "(497,25)-(497,34)"
      evaluatedAs: true
- method:
    name: "byteArrayToUuid"
    sourceCodeSignature: "UUID byteArrayToUuid(final byte[] src, final int srcPos)"
    returnType: "java.util.UUID"
    parameters:
    - name: "src"
      type: "byte[]"
    - name: "srcPos"
      type: "int"
    instructionFingerprint: "4A4120CC041DA912EF5F77E9234F99C9"
  paths:
  - testPathName: "byteArrayToUuidWhenSrcLengthMinusSrcPosLessThan16ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Need at least 16 bytes for UUID"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 518
      expression: "src.length - srcPos < 16"
      range: "(518,13)-(518,36)"
      evaluatedAs: true
  - testPathName: "byteArrayToUuidWhenSrcLengthMinusSrcPosNotLessThan16"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "byteArrayToLong(src,srcPos,dstInit,dstPos,nBytes):long1"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "byteArrayToLong(src,int4,dstInit2,dstPos2,nBytes2):long2"
    - type: "RESULT"
      name: "result"
      valueUuid: "uUID"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: -16
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long2"
    - sapientType: "BASIC"
      content: !<regular>
        value: -8
      valueType: "int"
      uuid: "int4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "nBytes2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.UUID"
        parameters:
        - name: "mostSigBits"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "long1"
        - name: "leastSigBits"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "long2"
      valueType: "java.util.UUID"
      uuid: "uUID"
    branches:
    - lineNumber: 518
      expression: "src.length - srcPos < 16"
      range: "(518,13)-(518,36)"
      evaluatedAs: false
- method:
    name: "byteToBinary"
    sourceCodeSignature: "boolean[] byteToBinary(final byte src, final int srcPos,\
      \ final boolean[] dst, final int dstPos, final int nBools)"
    returnType: "boolean[]"
    parameters:
    - name: "src"
      type: "byte"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "boolean[]"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "D3528D9D17C5755EFF4749B197026A7B"
  paths:
  - testPathName: "byteToBinaryWhen0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 541
      expression: "0 == nBools"
      range: "(541,13)-(541,23)"
      evaluatedAs: true
  - testPathName: "byteToBinaryWhenNBoolsMinus1PlusSrcPosGreaterThanOrEqualsTo8ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 10
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+srcPos is greater or equal to than 8"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 541
      expression: "0 == nBools"
      range: "(541,13)-(541,23)"
      evaluatedAs: false
    - lineNumber: 544
      expression: "nBools - 1 + srcPos >= 8"
      range: "(544,13)-(544,36)"
      evaluatedAs: true
  - testPathName: "byteToBinaryWhenDstPosPlusI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "booleanArray17"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem0"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "booleanArray17Item1"
      valueType: "boolean[]"
      uuid: "booleanArray17"
    branches:
    - lineNumber: 541
      expression: "0 == nBools"
      range: "(541,13)-(541,23)"
      evaluatedAs: false
    - lineNumber: 544
      expression: "nBools - 1 + srcPos >= 8"
      range: "(544,13)-(544,36)"
      evaluatedAs: false
    - lineNumber: 547
      expression: "i < nBools"
      range: "(547,25)-(547,34)"
      evaluatedAs: true
    - lineNumber: 549
      expression: "dstPos + i"
      range: "(549,17)-(549,26)"
      evaluatedAs: true
  - testPathName: "byteToBinaryWhenDstPosNotPlusI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem1"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 541
      expression: "0 == nBools"
      range: "(541,13)-(541,23)"
      evaluatedAs: false
    - lineNumber: 544
      expression: "nBools - 1 + srcPos >= 8"
      range: "(544,13)-(544,36)"
      evaluatedAs: false
    - lineNumber: 547
      expression: "i < nBools"
      range: "(547,25)-(547,34)"
      evaluatedAs: true
    - lineNumber: 549
      expression: "dstPos + i"
      range: "(549,17)-(549,26)"
      evaluatedAs: false
- method:
    name: "byteToHex"
    sourceCodeSignature: "String byteToHex(final byte src, final int srcPos, final\
      \ String dstInit, final int dstPos, final int nHexs)"
    returnType: "java.lang.String"
    parameters:
    - name: "src"
      type: "byte"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "java.lang.String"
    - name: "dstPos"
      type: "int"
    - name: "nHexs"
      type: "int"
    instructionFingerprint: "575927B5E241616A3E0FC2C7EAB5E483"
  paths:
  - testPathName: "byteToHexWhen0EqualsNHexs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHexs"
    branches:
    - lineNumber: 570
      expression: "0 == nHexs"
      range: "(570,13)-(570,22)"
      evaluatedAs: true
  - testPathName: "byteToHexWhenNHexsMinus1MultipliedBy4PlusSrcPosGreaterThanOrEqualsTo8ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 16
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+srcPos is greater or equal to than 8"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 570
      expression: "0 == nHexs"
      range: "(570,13)-(570,22)"
      evaluatedAs: false
    - lineNumber: 573
      expression: "(nHexs - 1) * 4 + srcPos >= 8"
      range: "(573,13)-(573,41)"
      evaluatedAs: true
  - testPathName: "byteToHexWhenDstPosPlusIEqualsAppend"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int12):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 570
      expression: "0 == nHexs"
      range: "(570,13)-(570,22)"
      evaluatedAs: false
    - lineNumber: 573
      expression: "(nHexs - 1) * 4 + srcPos >= 8"
      range: "(573,13)-(573,41)"
      evaluatedAs: false
    - lineNumber: 578
      expression: "i < nHexs"
      range: "(578,25)-(578,33)"
      evaluatedAs: true
    - lineNumber: 581
      expression: "dstPos + i == append"
      range: "(581,17)-(581,36)"
      evaluatedAs: true
  - testPathName: "byteToHexWhenDstPosPlusINotEqualsAppend"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int10):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int10"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 570
      expression: "0 == nHexs"
      range: "(570,13)-(570,22)"
      evaluatedAs: false
    - lineNumber: 573
      expression: "(nHexs - 1) * 4 + srcPos >= 8"
      range: "(573,13)-(573,41)"
      evaluatedAs: false
    - lineNumber: 578
      expression: "i < nHexs"
      range: "(578,25)-(578,33)"
      evaluatedAs: true
    - lineNumber: 581
      expression: "dstPos + i == append"
      range: "(581,17)-(581,36)"
      evaluatedAs: false
- method:
    name: "hexDigitMsb0ToBinary"
    sourceCodeSignature: "boolean[] hexDigitMsb0ToBinary(final char hexDigit)"
    returnType: "boolean[]"
    parameters:
    - name: "hexDigit"
      type: "char"
    instructionFingerprint: "637DD6DCCE60616E2C17ADD1FE5A6C9C"
  paths:
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_0_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '0'"
      range: "(605,14)-(605,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_1_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '1'"
      range: "(607,14)-(607,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_2_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '2'"
      range: "(609,14)-(609,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_3_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "3"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '3'"
      range: "(611,14)-(611,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_4_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "4"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '4'"
      range: "(613,14)-(613,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_5_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "5"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '5'"
      range: "(615,14)-(615,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_6_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "6"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '6'"
      range: "(617,14)-(617,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_7_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "7"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '7'"
      range: "(619,14)-(619,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_8_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "8"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '8'"
      range: "(621,14)-(621,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_9_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "9"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = '9'"
      range: "(623,14)-(623,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_a_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = 'a' or switch(hexDigit) = 'A'"
      range: "(626,14)-(626,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_a_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = 'a' or switch(hexDigit) = 'A'"
      range: "(626,14)-(626,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_b_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = 'b' or switch(hexDigit) = 'B'"
      range: "(629,14)-(629,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_b_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "D"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = 'b' or switch(hexDigit) = 'B'"
      range: "(629,14)-(629,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_c_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "E"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = 'c' or switch(hexDigit) = 'C'"
      range: "(632,14)-(632,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCase_c_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "F"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = 'c' or switch(hexDigit) = 'C'"
      range: "(632,14)-(632,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToBinaryWhenSwitchHexDigitCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "LOOKUP_SWITCH_INSTRUCTION_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Cannot interpret 'A' as a hexadecimal digit"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 604
      expression: "switch(hexDigit) = default"
      range: "(643,9)-(643,15)"
      evaluatedAs: true
- method:
    name: "hexDigitMsb0ToInt"
    sourceCodeSignature: "int hexDigitMsb0ToInt(final char hexDigit)"
    returnType: "int"
    parameters:
    - name: "hexDigit"
      type: "char"
    instructionFingerprint: "5A18CFF1614B8858BC9062979D365F4B"
  paths:
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_0_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '0'"
      range: "(661,14)-(661,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_1_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '1'"
      range: "(663,14)-(663,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_2_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 4
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '2'"
      range: "(665,14)-(665,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_3_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "3"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '3'"
      range: "(667,14)-(667,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_4_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "4"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '4'"
      range: "(669,14)-(669,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_5_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "5"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 10
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '5'"
      range: "(671,14)-(671,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_6_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "6"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 6
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '6'"
      range: "(673,14)-(673,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_7_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "7"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '7'"
      range: "(675,14)-(675,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_8_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "8"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '8'"
      range: "(677,14)-(677,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_9_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "9"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 9
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = '9'"
      range: "(679,14)-(679,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_a_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = 'a' or switch(hexDigit) = 'A'"
      range: "(682,14)-(682,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_a_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = 'a' or switch(hexDigit) = 'A'"
      range: "(682,14)-(682,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_b_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = 'b' or switch(hexDigit) = 'B'"
      range: "(685,14)-(685,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_b_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "D"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 11
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = 'b' or switch(hexDigit) = 'B'"
      range: "(685,14)-(685,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_c_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "E"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = 'c' or switch(hexDigit) = 'C'"
      range: "(688,14)-(688,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCase_c_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "F"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 15
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = 'c' or switch(hexDigit) = 'C'"
      range: "(688,14)-(688,16)"
      evaluatedAs: true
  - testPathName: "hexDigitMsb0ToIntWhenSwitchHexDigitCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "LOOKUP_SWITCH_INSTRUCTION_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Cannot interpret 'A' as a hexadecimal digit"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 660
      expression: "switch(hexDigit) = default"
      range: "(699,9)-(699,15)"
      evaluatedAs: true
- method:
    name: "hexDigitToBinary"
    sourceCodeSignature: "boolean[] hexDigitToBinary(final char hexDigit)"
    returnType: "boolean[]"
    parameters:
    - name: "hexDigit"
      type: "char"
    instructionFingerprint: "F39B2727CF98207BB6A3DA1B21BCDEEE"
  paths:
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_0_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '0'"
      range: "(718,14)-(718,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_1_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '1'"
      range: "(720,14)-(720,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_2_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '2'"
      range: "(722,14)-(722,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_3_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "3"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '3'"
      range: "(724,14)-(724,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_4_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "4"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '4'"
      range: "(726,14)-(726,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_5_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "5"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '5'"
      range: "(728,14)-(728,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_6_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "6"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '6'"
      range: "(730,14)-(730,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_7_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "7"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '7'"
      range: "(732,14)-(732,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_8_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "8"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '8'"
      range: "(734,14)-(734,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_9_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "9"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = '9'"
      range: "(736,14)-(736,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_a_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = 'a' or switch(hexDigit) = 'A'"
      range: "(739,14)-(739,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_a_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = 'a' or switch(hexDigit) = 'A'"
      range: "(739,14)-(739,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_b_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = 'b' or switch(hexDigit) = 'B'"
      range: "(742,14)-(742,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_b_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "D"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = 'b' or switch(hexDigit) = 'B'"
      range: "(742,14)-(742,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_c_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "E"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = 'c' or switch(hexDigit) = 'C'"
      range: "(745,14)-(745,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCase_c_2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "F"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "object-item3"
      valueType: "boolean[]"
      uuid: "object"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = 'c' or switch(hexDigit) = 'C'"
      range: "(745,14)-(745,16)"
      evaluatedAs: true
  - testPathName: "hexDigitToBinaryWhenSwitchHexDigitCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "LOOKUP_SWITCH_INSTRUCTION_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Cannot interpret 'A' as a hexadecimal digit"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 717
      expression: "switch(hexDigit) = default"
      range: "(756,9)-(756,15)"
      evaluatedAs: true
- method:
    name: "hexDigitToInt"
    sourceCodeSignature: "int hexDigitToInt(final char hexDigit)"
    returnType: "int"
    parameters:
    - name: "hexDigit"
      type: "char"
    instructionFingerprint: "1B8E214847C28ABDC3E588C432F04C33"
  paths:
  - testPathName: "hexDigitToIntWhenDigitLessThan0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "s1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 774
      expression: "digit < 0"
      range: "(774,13)-(774,21)"
      evaluatedAs: true
  - testPathName: "hexDigitToIntWhenDigitNotLessThan0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "hexDigit"
      valueUuid: "hexDigit"
    - type: "RESULT"
      name: "result"
      valueUuid: "int2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "hexDigit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 10
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 774
      expression: "digit < 0"
      range: "(774,13)-(774,21)"
      evaluatedAs: false
- method:
    name: "hexToByte"
    sourceCodeSignature: "byte hexToByte(final String src, final int srcPos, final\
      \ byte dstInit, final int dstPos, final int nHex)"
    returnType: "byte"
    parameters:
    - name: "src"
      type: "java.lang.String"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "byte"
    - name: "dstPos"
      type: "int"
    - name: "nHex"
      type: "int"
    instructionFingerprint: "A1A0D804914725874B08FE12E89D0C8D"
  paths:
  - testPathName: "hexToByteWhen0EqualsNHex"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHex"
    branches:
    - lineNumber: 795
      expression: "0 == nHex"
      range: "(795,13)-(795,21)"
      evaluatedAs: true
  - testPathName: "hexToByteWhenNHexMinus1MultipliedBy4PlusDstPosGreaterThanOrEqualsTo8ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 16
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+dstPos is greater or equal to than 8"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 795
      expression: "0 == nHex"
      range: "(795,13)-(795,21)"
      evaluatedAs: false
    - lineNumber: 798
      expression: "(nHex - 1) * 4 + dstPos >= 8"
      range: "(798,13)-(798,40)"
      evaluatedAs: true
  - testPathName: "hexToByteWhenILessThanNHex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "hexDigitToInt(char1):int9"
    - type: "RESULT"
      name: "result"
      valueUuid: "byte1"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "byte1"
    branches:
    - lineNumber: 795
      expression: "0 == nHex"
      range: "(795,13)-(795,21)"
      evaluatedAs: false
    - lineNumber: 798
      expression: "(nHex - 1) * 4 + dstPos >= 8"
      range: "(798,13)-(798,40)"
      evaluatedAs: false
    - lineNumber: 802
      expression: "i < nHex"
      range: "(802,25)-(802,32)"
      evaluatedAs: true
- method:
    name: "hexToInt"
    sourceCodeSignature: "int hexToInt(final String src, final int srcPos, final int\
      \ dstInit, final int dstPos, final int nHex)"
    returnType: "int"
    parameters:
    - name: "src"
      type: "java.lang.String"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "int"
    - name: "dstPos"
      type: "int"
    - name: "nHex"
      type: "int"
    instructionFingerprint: "FC48D35F290D8B3C9D313E7C7E8B45DD"
  paths:
  - testPathName: "hexToIntWhen0EqualsNHex"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHex"
    branches:
    - lineNumber: 825
      expression: "0 == nHex"
      range: "(825,13)-(825,21)"
      evaluatedAs: true
  - testPathName: "hexToIntWhenNHexMinus1MultipliedBy4PlusDstPosGreaterThanOrEqualsTo32ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 40
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+dstPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 825
      expression: "0 == nHex"
      range: "(825,13)-(825,21)"
      evaluatedAs: false
    - lineNumber: 828
      expression: "(nHex - 1) * 4 + dstPos >= 32"
      range: "(828,13)-(828,41)"
      evaluatedAs: true
  - testPathName: "hexToIntWhenILessThanNHex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "hexDigitToInt(char1):int9"
    - type: "RESULT"
      name: "result"
      valueUuid: "int15"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int15"
    branches:
    - lineNumber: 825
      expression: "0 == nHex"
      range: "(825,13)-(825,21)"
      evaluatedAs: false
    - lineNumber: 828
      expression: "(nHex - 1) * 4 + dstPos >= 32"
      range: "(828,13)-(828,41)"
      evaluatedAs: false
    - lineNumber: 832
      expression: "i < nHex"
      range: "(832,25)-(832,32)"
      evaluatedAs: true
- method:
    name: "hexToLong"
    sourceCodeSignature: "long hexToLong(final String src, final int srcPos, final\
      \ long dstInit, final int dstPos, final int nHex)"
    returnType: "long"
    parameters:
    - name: "src"
      type: "java.lang.String"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "long"
    - name: "dstPos"
      type: "int"
    - name: "nHex"
      type: "int"
    instructionFingerprint: "5525992EEF794BD41617A257FA8DF1C2"
  paths:
  - testPathName: "hexToLongWhen0EqualsNHex"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHex"
    branches:
    - lineNumber: 856
      expression: "0 == nHex"
      range: "(856,13)-(856,21)"
      evaluatedAs: true
  - testPathName: "hexToLongWhenNHexMinus1MultipliedBy4PlusDstPosGreaterThanOrEqualsTo64ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 72
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+dstPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 856
      expression: "0 == nHex"
      range: "(856,13)-(856,21)"
      evaluatedAs: false
    - lineNumber: 859
      expression: "(nHex - 1) * 4 + dstPos >= 64"
      range: "(859,13)-(859,41)"
      evaluatedAs: true
  - testPathName: "hexToLongWhenILessThanNHex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "hexDigitToInt(char1):int9"
    - type: "RESULT"
      name: "result"
      valueUuid: "long7"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long7"
    branches:
    - lineNumber: 856
      expression: "0 == nHex"
      range: "(856,13)-(856,21)"
      evaluatedAs: false
    - lineNumber: 859
      expression: "(nHex - 1) * 4 + dstPos >= 64"
      range: "(859,13)-(859,41)"
      evaluatedAs: false
    - lineNumber: 863
      expression: "i < nHex"
      range: "(863,25)-(863,32)"
      evaluatedAs: true
- method:
    name: "hexToShort"
    sourceCodeSignature: "short hexToShort(final String src, final int srcPos, final\
      \ short dstInit, final int dstPos, final int nHex)"
    returnType: "short"
    parameters:
    - name: "src"
      type: "java.lang.String"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "short"
    - name: "dstPos"
      type: "int"
    - name: "nHex"
      type: "int"
    instructionFingerprint: "778435ABCAD83F80DCC582C64B46952A"
  paths:
  - testPathName: "hexToShortWhen0EqualsNHex"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHex"
    branches:
    - lineNumber: 887
      expression: "0 == nHex"
      range: "(887,13)-(887,21)"
      evaluatedAs: true
  - testPathName: "hexToShortWhenNHexMinus1MultipliedBy4PlusDstPosGreaterThanOrEqualsTo16ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "src1"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 24
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+dstPos is greater or equal to than 16"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 887
      expression: "0 == nHex"
      range: "(887,13)-(887,21)"
      evaluatedAs: false
    - lineNumber: 890
      expression: "(nHex - 1) * 4 + dstPos >= 16"
      range: "(890,13)-(890,41)"
      evaluatedAs: true
  - testPathName: "hexToShortWhenILessThanNHex"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHex"
      valueUuid: "nHex"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "hexDigitToInt(char1):int9"
    - type: "RESULT"
      name: "result"
      valueUuid: "short1"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHex"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "short1"
    branches:
    - lineNumber: 887
      expression: "0 == nHex"
      range: "(887,13)-(887,21)"
      evaluatedAs: false
    - lineNumber: 890
      expression: "(nHex - 1) * 4 + dstPos >= 16"
      range: "(890,13)-(890,41)"
      evaluatedAs: false
    - lineNumber: 894
      expression: "i < nHex"
      range: "(894,25)-(894,32)"
      evaluatedAs: true
- method:
    name: "intArrayToLong"
    sourceCodeSignature: "long intArrayToLong(final int[] src, final int srcPos, final\
      \ long dstInit, final int dstPos, final int nInts)"
    returnType: "long"
    parameters:
    - name: "src"
      type: "int[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "long"
    - name: "dstPos"
      type: "int"
    - name: "nInts"
      type: "int"
    instructionFingerprint: "5EB58711492C17CEBAD2D5F325FA8E7A"
  paths:
  - testPathName: "intArrayToLongWhenSrcPosNotEquals0And0EqualsNInts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nInts"
      valueUuid: "nInts"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nInts"
    branches:
    - lineNumber: 920
      expression: "src.length == 0"
      range: "(920,13)-(920,27)"
      evaluatedAs: true
    - lineNumber: 920
      expression: "srcPos == 0"
      range: "(920,32)-(920,42)"
      evaluatedAs: false
    - lineNumber: 920
      expression: "0 == nInts"
      range: "(920,47)-(920,56)"
      evaluatedAs: true
  - testPathName: "intArrayToLongWhen0NotEqualsNIntsAndNIntsMinus1MultipliedBy32PlusDstPosGreaterThanOrEqualThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nInts"
      valueUuid: "nInts"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 64
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nInts"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nInts-1)*32+dstPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 920
      expression: "src.length == 0"
      range: "(920,13)-(920,27)"
      evaluatedAs: true
    - lineNumber: 920
      expression: "srcPos == 0"
      range: "(920,32)-(920,42)"
      evaluatedAs: false
    - lineNumber: 920
      expression: "0 == nInts"
      range: "(920,47)-(920,56)"
      evaluatedAs: false
    - lineNumber: 923
      expression: "(nInts - 1) * 32 + dstPos >= 64"
      range: "(923,13)-(923,43)"
      evaluatedAs: true
  - testPathName: "intArrayToLongWhenNIntsMinus1MultipliedBy32PlusDstPosLessThan64AndILessThanNInts"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nInts"
      valueUuid: "nInts"
    - type: "RESULT"
      name: "result"
      valueUuid: "long7"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nInts"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long7"
    branches:
    - lineNumber: 920
      expression: "src.length == 0"
      range: "(920,13)-(920,27)"
      evaluatedAs: true
    - lineNumber: 920
      expression: "srcPos == 0"
      range: "(920,32)-(920,42)"
      evaluatedAs: false
    - lineNumber: 920
      expression: "0 == nInts"
      range: "(920,47)-(920,56)"
      evaluatedAs: false
    - lineNumber: 923
      expression: "(nInts - 1) * 32 + dstPos >= 64"
      range: "(923,13)-(923,43)"
      evaluatedAs: false
    - lineNumber: 927
      expression: "i < nInts"
      range: "(927,25)-(927,33)"
      evaluatedAs: true
- method:
    name: "intToBinary"
    sourceCodeSignature: "boolean[] intToBinary(final int src, final int srcPos, final\
      \ boolean[] dst, final int dstPos, final int nBools)"
    returnType: "boolean[]"
    parameters:
    - name: "src"
      type: "int"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "boolean[]"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "018C7BB72D2BDB79A3EAD4CC510B37F5"
  paths:
  - testPathName: "intToBinaryWhen0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 953
      expression: "0 == nBools"
      range: "(953,13)-(953,23)"
      evaluatedAs: true
  - testPathName: "intToBinaryWhenNBoolsMinus1PlusSrcPosGreaterThanOrEqualsTo32ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 34
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+srcPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 953
      expression: "0 == nBools"
      range: "(953,13)-(953,23)"
      evaluatedAs: false
    - lineNumber: 956
      expression: "nBools - 1 + srcPos >= 32"
      range: "(956,13)-(956,37)"
      evaluatedAs: true
  - testPathName: "intToBinaryWhenDstPosPlusI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "booleanArray17"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem0"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "booleanArray17Item1"
      valueType: "boolean[]"
      uuid: "booleanArray17"
    branches:
    - lineNumber: 953
      expression: "0 == nBools"
      range: "(953,13)-(953,23)"
      evaluatedAs: false
    - lineNumber: 956
      expression: "nBools - 1 + srcPos >= 32"
      range: "(956,13)-(956,37)"
      evaluatedAs: false
    - lineNumber: 959
      expression: "i < nBools"
      range: "(959,25)-(959,34)"
      evaluatedAs: true
    - lineNumber: 961
      expression: "dstPos + i"
      range: "(961,17)-(961,26)"
      evaluatedAs: true
  - testPathName: "intToBinaryWhenDstPosNotPlusI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem1"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 953
      expression: "0 == nBools"
      range: "(953,13)-(953,23)"
      evaluatedAs: false
    - lineNumber: 956
      expression: "nBools - 1 + srcPos >= 32"
      range: "(956,13)-(956,37)"
      evaluatedAs: false
    - lineNumber: 959
      expression: "i < nBools"
      range: "(959,25)-(959,34)"
      evaluatedAs: true
    - lineNumber: 961
      expression: "dstPos + i"
      range: "(961,17)-(961,26)"
      evaluatedAs: false
- method:
    name: "intToByteArray"
    sourceCodeSignature: "byte[] intToByteArray(final int src, final int srcPos, final\
      \ byte[] dst, final int dstPos, final int nBytes)"
    returnType: "byte[]"
    parameters:
    - name: "src"
      type: "int"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "byte[]"
    - name: "dstPos"
      type: "int"
    - name: "nBytes"
      type: "int"
    instructionFingerprint: "7988EE8D37E7243CDFE325E611AC3B64"
  paths:
  - testPathName: "intToByteArrayWhen0EqualsNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    branches:
    - lineNumber: 983
      expression: "0 == nBytes"
      range: "(983,13)-(983,23)"
      evaluatedAs: true
  - testPathName: "intToByteArrayWhenNBytesMinus1MultipliedBy8PlusSrcPosGreaterThanOrEqualsTo32ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 48
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nBytes-1)*8+srcPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 983
      expression: "0 == nBytes"
      range: "(983,13)-(983,23)"
      evaluatedAs: false
    - lineNumber: 986
      expression: "(nBytes - 1) * 8 + srcPos >= 32"
      range: "(986,13)-(986,43)"
      evaluatedAs: true
  - testPathName: "intToByteArrayWhenILessThanNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "byteArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "dstItem0"
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "byteArrayItem1"
      valueType: "byte[]"
      uuid: "byteArray"
    branches:
    - lineNumber: 983
      expression: "0 == nBytes"
      range: "(983,13)-(983,23)"
      evaluatedAs: false
    - lineNumber: 986
      expression: "(nBytes - 1) * 8 + srcPos >= 32"
      range: "(986,13)-(986,43)"
      evaluatedAs: false
    - lineNumber: 989
      expression: "i < nBytes"
      range: "(989,25)-(989,34)"
      evaluatedAs: true
- method:
    name: "intToHex"
    sourceCodeSignature: "String intToHex(final int src, final int srcPos, final String\
      \ dstInit, final int dstPos, final int nHexs)"
    returnType: "java.lang.String"
    parameters:
    - name: "src"
      type: "int"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "java.lang.String"
    - name: "dstPos"
      type: "int"
    - name: "nHexs"
      type: "int"
    instructionFingerprint: "E1CF91EBC6DD4A845C11CF38230C1F6B"
  paths:
  - testPathName: "intToHexWhen0EqualsNHexs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHexs"
    branches:
    - lineNumber: 1012
      expression: "0 == nHexs"
      range: "(1012,13)-(1012,22)"
      evaluatedAs: true
  - testPathName: "intToHexWhenNHexsMinus1MultipliedBy4PlusSrcPosGreaterThanOrEqualsTo32ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 40
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+srcPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1012
      expression: "0 == nHexs"
      range: "(1012,13)-(1012,22)"
      evaluatedAs: false
    - lineNumber: 1015
      expression: "(nHexs - 1) * 4 + srcPos >= 32"
      range: "(1015,13)-(1015,42)"
      evaluatedAs: true
  - testPathName: "intToHexWhenDstPosPlusIEqualsAppend"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int12):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1012
      expression: "0 == nHexs"
      range: "(1012,13)-(1012,22)"
      evaluatedAs: false
    - lineNumber: 1015
      expression: "(nHexs - 1) * 4 + srcPos >= 32"
      range: "(1015,13)-(1015,42)"
      evaluatedAs: false
    - lineNumber: 1020
      expression: "i < nHexs"
      range: "(1020,25)-(1020,33)"
      evaluatedAs: true
    - lineNumber: 1023
      expression: "dstPos + i == append"
      range: "(1023,17)-(1023,36)"
      evaluatedAs: true
  - testPathName: "intToHexWhenDstPosPlusINotEqualsAppend"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int10):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int10"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1012
      expression: "0 == nHexs"
      range: "(1012,13)-(1012,22)"
      evaluatedAs: false
    - lineNumber: 1015
      expression: "(nHexs - 1) * 4 + srcPos >= 32"
      range: "(1015,13)-(1015,42)"
      evaluatedAs: false
    - lineNumber: 1020
      expression: "i < nHexs"
      range: "(1020,25)-(1020,33)"
      evaluatedAs: true
    - lineNumber: 1023
      expression: "dstPos + i == append"
      range: "(1023,17)-(1023,36)"
      evaluatedAs: false
- method:
    name: "intToHexDigit"
    sourceCodeSignature: "char intToHexDigit(final int nibble)"
    returnType: "char"
    parameters:
    - name: "nibble"
      type: "int"
    instructionFingerprint: "ECDFCEA358646A654AFFCBE14E5417FF"
  paths:
  - testPathName: "intToHexDigitWhenCEqualsCharacterMIN_VALUEThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nibble"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "s1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1052
      expression: "c == Character.MIN_VALUE"
      range: "(1052,13)-(1052,36)"
      evaluatedAs: true
  - testPathName: "intToHexDigitWhenCNotEqualsCharacterMIN_VALUE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "char1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "char1"
    branches:
    - lineNumber: 1052
      expression: "c == Character.MIN_VALUE"
      range: "(1052,13)-(1052,36)"
      evaluatedAs: false
- method:
    name: "intToHexDigitMsb0"
    sourceCodeSignature: "char intToHexDigitMsb0(final int nibble)"
    returnType: "char"
    parameters:
    - name: "nibble"
      type: "int"
    instructionFingerprint: "89C8A48E8FD567FE8B03E447B8D60287"
  paths:
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x0"
      range: "(1077,14)-(1077,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "8"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x1"
      range: "(1079,14)-(1079,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "4"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x2"
      range: "(1081,14)-(1081,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "c"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x3"
      range: "(1083,14)-(1083,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 4
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "2"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x4"
      range: "(1085,14)-(1085,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "a"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x5"
      range: "(1087,14)-(1087,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 6
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "6"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x6"
      range: "(1089,14)-(1089,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 7
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "e"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x7"
      range: "(1091,14)-(1091,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "1"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x8"
      range: "(1093,14)-(1093,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 9
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "9"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0x9"
      range: "(1095,14)-(1095,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase10"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 10
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "5"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0xA"
      range: "(1097,14)-(1097,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase11"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 11
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "d"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0xB"
      range: "(1099,14)-(1099,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase12"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0xC"
      range: "(1101,14)-(1101,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase13"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "b"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0xD"
      range: "(1103,14)-(1103,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase14"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "7"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0xE"
      range: "(1105,14)-(1105,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCase15"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 15
      valueType: "int"
      uuid: "nibble"
    - sapientType: "BASIC"
      content: !<regular>
        value: "f"
      valueType: "char"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = 0xF"
      range: "(1107,14)-(1107,16)"
      evaluatedAs: true
  - testPathName: "intToHexDigitMsb0WhenSwitchNibbleCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "nibble"
      valueUuid: "nibble"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "LOOKUP_SWITCH_INSTRUCTION_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "nibble"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nibble value not between 0 and 15: 2"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1076
      expression: "switch(nibble) = default"
      range: "(1109,9)-(1109,15)"
      evaluatedAs: true
- method:
    name: "intToShortArray"
    sourceCodeSignature: "short[] intToShortArray(final int src, final int srcPos,\
      \ final short[] dst, final int dstPos, final int nShorts)"
    returnType: "short[]"
    parameters:
    - name: "src"
      type: "int"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "short[]"
    - name: "dstPos"
      type: "int"
    - name: "nShorts"
      type: "int"
    instructionFingerprint: "168DBCC89DF61885E1658065236AAD6B"
  paths:
  - testPathName: "intToShortArrayWhen0EqualsNShorts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nShorts"
    branches:
    - lineNumber: 1131
      expression: "0 == nShorts"
      range: "(1131,13)-(1131,24)"
      evaluatedAs: true
  - testPathName: "intToShortArrayWhenNShortsMinus1MultipliedBy16PlusSrcPosGreaterThanOrEqualsTo32ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 64
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nShorts-1)*16+srcPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1131
      expression: "0 == nShorts"
      range: "(1131,13)-(1131,24)"
      evaluatedAs: false
    - lineNumber: 1134
      expression: "(nShorts - 1) * 16 + srcPos >= 32"
      range: "(1134,13)-(1134,45)"
      evaluatedAs: true
  - testPathName: "intToShortArrayWhenILessThanNShorts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "shortArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "short"
            uuid: "dstItem0"
      valueType: "short[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "short"
            uuid: "shortArrayItem1"
      valueType: "short[]"
      uuid: "shortArray"
    branches:
    - lineNumber: 1131
      expression: "0 == nShorts"
      range: "(1131,13)-(1131,24)"
      evaluatedAs: false
    - lineNumber: 1134
      expression: "(nShorts - 1) * 16 + srcPos >= 32"
      range: "(1134,13)-(1134,45)"
      evaluatedAs: false
    - lineNumber: 1137
      expression: "i < nShorts"
      range: "(1137,25)-(1137,35)"
      evaluatedAs: true
- method:
    name: "longToBinary"
    sourceCodeSignature: "boolean[] longToBinary(final long src, final int srcPos,\
      \ final boolean[] dst, final int dstPos, final int nBools)"
    returnType: "boolean[]"
    parameters:
    - name: "src"
      type: "long"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "boolean[]"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "46B767466BAE84F34BBE3FA968D69A3C"
  paths:
  - testPathName: "longToBinaryWhen0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 1161
      expression: "0 == nBools"
      range: "(1161,13)-(1161,23)"
      evaluatedAs: true
  - testPathName: "longToBinaryWhenNBoolsMinus1PlusSrcPosGreaterThanOrEqualsTo64ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 66
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+srcPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1161
      expression: "0 == nBools"
      range: "(1161,13)-(1161,23)"
      evaluatedAs: false
    - lineNumber: 1164
      expression: "nBools - 1 + srcPos >= 64"
      range: "(1164,13)-(1164,37)"
      evaluatedAs: true
  - testPathName: "longToBinaryWhenDstPosPlusI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "booleanArray17"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem0"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "booleanArray17Item1"
      valueType: "boolean[]"
      uuid: "booleanArray17"
    branches:
    - lineNumber: 1161
      expression: "0 == nBools"
      range: "(1161,13)-(1161,23)"
      evaluatedAs: false
    - lineNumber: 1164
      expression: "nBools - 1 + srcPos >= 64"
      range: "(1164,13)-(1164,37)"
      evaluatedAs: false
    - lineNumber: 1167
      expression: "i < nBools"
      range: "(1167,25)-(1167,34)"
      evaluatedAs: true
    - lineNumber: 1169
      expression: "dstPos + i"
      range: "(1169,17)-(1169,26)"
      evaluatedAs: true
  - testPathName: "longToBinaryWhenDstPosNotPlusI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem1"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 1161
      expression: "0 == nBools"
      range: "(1161,13)-(1161,23)"
      evaluatedAs: false
    - lineNumber: 1164
      expression: "nBools - 1 + srcPos >= 64"
      range: "(1164,13)-(1164,37)"
      evaluatedAs: false
    - lineNumber: 1167
      expression: "i < nBools"
      range: "(1167,25)-(1167,34)"
      evaluatedAs: true
    - lineNumber: 1169
      expression: "dstPos + i"
      range: "(1169,17)-(1169,26)"
      evaluatedAs: false
- method:
    name: "longToByteArray"
    sourceCodeSignature: "byte[] longToByteArray(final long src, final int srcPos,\
      \ final byte[] dst, final int dstPos, final int nBytes)"
    returnType: "byte[]"
    parameters:
    - name: "src"
      type: "long"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "byte[]"
    - name: "dstPos"
      type: "int"
    - name: "nBytes"
      type: "int"
    instructionFingerprint: "3CF8DB35AC8C951BE41CB92BF0C3B9DD"
  paths:
  - testPathName: "longToByteArrayWhen0EqualsNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    branches:
    - lineNumber: 1191
      expression: "0 == nBytes"
      range: "(1191,13)-(1191,23)"
      evaluatedAs: true
  - testPathName: "longToByteArrayWhenNBytesMinus1MultipliedBy8PlusSrcPosGreaterThanOrEqualsTo64ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 80
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nBytes-1)*8+srcPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1191
      expression: "0 == nBytes"
      range: "(1191,13)-(1191,23)"
      evaluatedAs: false
    - lineNumber: 1194
      expression: "(nBytes - 1) * 8 + srcPos >= 64"
      range: "(1194,13)-(1194,43)"
      evaluatedAs: true
  - testPathName: "longToByteArrayWhenILessThanNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "byteArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "dstItem0"
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "byteArrayItem1"
      valueType: "byte[]"
      uuid: "byteArray"
    branches:
    - lineNumber: 1191
      expression: "0 == nBytes"
      range: "(1191,13)-(1191,23)"
      evaluatedAs: false
    - lineNumber: 1194
      expression: "(nBytes - 1) * 8 + srcPos >= 64"
      range: "(1194,13)-(1194,43)"
      evaluatedAs: false
    - lineNumber: 1197
      expression: "i < nBytes"
      range: "(1197,25)-(1197,34)"
      evaluatedAs: true
- method:
    name: "longToHex"
    sourceCodeSignature: "String longToHex(final long src, final int srcPos, final\
      \ String dstInit, final int dstPos, final int nHexs)"
    returnType: "java.lang.String"
    parameters:
    - name: "src"
      type: "long"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "java.lang.String"
    - name: "dstPos"
      type: "int"
    - name: "nHexs"
      type: "int"
    instructionFingerprint: "9659912FAF4FB2AF5E41530AC82CB4B0"
  paths:
  - testPathName: "longToHexWhen0EqualsNHexs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHexs"
    branches:
    - lineNumber: 1220
      expression: "0 == nHexs"
      range: "(1220,13)-(1220,22)"
      evaluatedAs: true
  - testPathName: "longToHexWhenNHexsMinus1MultipliedBy4PlusSrcPosGreaterThanOrEqualsTo64ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 72
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+srcPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1220
      expression: "0 == nHexs"
      range: "(1220,13)-(1220,22)"
      evaluatedAs: false
    - lineNumber: 1223
      expression: "(nHexs - 1) * 4 + srcPos >= 64"
      range: "(1223,13)-(1223,42)"
      evaluatedAs: true
  - testPathName: "longToHexWhenDstPosPlusIEqualsAppend"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int11):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1220
      expression: "0 == nHexs"
      range: "(1220,13)-(1220,22)"
      evaluatedAs: false
    - lineNumber: 1223
      expression: "(nHexs - 1) * 4 + srcPos >= 64"
      range: "(1223,13)-(1223,42)"
      evaluatedAs: false
    - lineNumber: 1228
      expression: "i < nHexs"
      range: "(1228,25)-(1228,33)"
      evaluatedAs: true
    - lineNumber: 1231
      expression: "dstPos + i == append"
      range: "(1231,17)-(1231,36)"
      evaluatedAs: true
  - testPathName: "longToHexWhenDstPosPlusINotEqualsAppend"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int9):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1220
      expression: "0 == nHexs"
      range: "(1220,13)-(1220,22)"
      evaluatedAs: false
    - lineNumber: 1223
      expression: "(nHexs - 1) * 4 + srcPos >= 64"
      range: "(1223,13)-(1223,42)"
      evaluatedAs: false
    - lineNumber: 1228
      expression: "i < nHexs"
      range: "(1228,25)-(1228,33)"
      evaluatedAs: true
    - lineNumber: 1231
      expression: "dstPos + i == append"
      range: "(1231,17)-(1231,36)"
      evaluatedAs: false
- method:
    name: "longToIntArray"
    sourceCodeSignature: "int[] longToIntArray(final long src, final int srcPos, final\
      \ int[] dst, final int dstPos, final int nInts)"
    returnType: "int[]"
    parameters:
    - name: "src"
      type: "long"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "int[]"
    - name: "dstPos"
      type: "int"
    - name: "nInts"
      type: "int"
    instructionFingerprint: "BA081EB6EF9291C479421DD11D16E132"
  paths:
  - testPathName: "longToIntArrayWhen0EqualsNInts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nInts"
      valueUuid: "nInts"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nInts"
    branches:
    - lineNumber: 1258
      expression: "0 == nInts"
      range: "(1258,13)-(1258,22)"
      evaluatedAs: true
  - testPathName: "longToIntArrayWhenNIntsMinus1MultipliedBy32PlusSrcPosGreaterThanOrEqualsTo64ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nInts"
      valueUuid: "nInts"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 128
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nInts"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nInts-1)*32+srcPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1258
      expression: "0 == nInts"
      range: "(1258,13)-(1258,22)"
      evaluatedAs: false
    - lineNumber: 1261
      expression: "(nInts - 1) * 32 + srcPos >= 64"
      range: "(1261,13)-(1261,43)"
      evaluatedAs: true
  - testPathName: "longToIntArrayWhenILessThanNInts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nInts"
      valueUuid: "nInts"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "dstItem1"
      valueType: "int[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nInts"
    branches:
    - lineNumber: 1258
      expression: "0 == nInts"
      range: "(1258,13)-(1258,22)"
      evaluatedAs: false
    - lineNumber: 1261
      expression: "(nInts - 1) * 32 + srcPos >= 64"
      range: "(1261,13)-(1261,43)"
      evaluatedAs: false
    - lineNumber: 1264
      expression: "i < nInts"
      range: "(1264,25)-(1264,33)"
      evaluatedAs: true
- method:
    name: "longToShortArray"
    sourceCodeSignature: "short[] longToShortArray(final long src, final int srcPos,\
      \ final short[] dst, final int dstPos, final int nShorts)"
    returnType: "short[]"
    parameters:
    - name: "src"
      type: "long"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "short[]"
    - name: "dstPos"
      type: "int"
    - name: "nShorts"
      type: "int"
    instructionFingerprint: "4683E1F1E993F617F4B2F530568C4A25"
  paths:
  - testPathName: "longToShortArrayWhen0EqualsNShorts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nShorts"
    branches:
    - lineNumber: 1288
      expression: "0 == nShorts"
      range: "(1288,13)-(1288,24)"
      evaluatedAs: true
  - testPathName: "longToShortArrayWhenNShortsMinus1MultipliedBy16PlusSrcPosGreaterThanOrEqualsTo64ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 96
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nShorts-1)*16+srcPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1288
      expression: "0 == nShorts"
      range: "(1288,13)-(1288,24)"
      evaluatedAs: false
    - lineNumber: 1291
      expression: "(nShorts - 1) * 16 + srcPos >= 64"
      range: "(1291,13)-(1291,45)"
      evaluatedAs: true
  - testPathName: "longToShortArrayWhenILessThanNShorts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "shortArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "short"
            uuid: "dstItem0"
      valueType: "short[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "short"
            uuid: "shortArrayItem1"
      valueType: "short[]"
      uuid: "shortArray"
    branches:
    - lineNumber: 1288
      expression: "0 == nShorts"
      range: "(1288,13)-(1288,24)"
      evaluatedAs: false
    - lineNumber: 1291
      expression: "(nShorts - 1) * 16 + srcPos >= 64"
      range: "(1291,13)-(1291,45)"
      evaluatedAs: false
    - lineNumber: 1294
      expression: "i < nShorts"
      range: "(1294,25)-(1294,35)"
      evaluatedAs: true
- method:
    name: "shortArrayToInt"
    sourceCodeSignature: "int shortArrayToInt(final short[] src, final int srcPos,\
      \ final int dstInit, final int dstPos, final int nShorts)"
    returnType: "int"
    parameters:
    - name: "src"
      type: "short[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "int"
    - name: "dstPos"
      type: "int"
    - name: "nShorts"
      type: "int"
    instructionFingerprint: "29F2A210FE531A1ABE6FE9095009728B"
  paths:
  - testPathName: "shortArrayToIntWhenSrcPosNotEquals0And0EqualsNShorts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nShorts"
    branches:
    - lineNumber: 1318
      expression: "src.length == 0"
      range: "(1318,13)-(1318,27)"
      evaluatedAs: true
    - lineNumber: 1318
      expression: "srcPos == 0"
      range: "(1318,32)-(1318,42)"
      evaluatedAs: false
    - lineNumber: 1318
      expression: "0 == nShorts"
      range: "(1318,47)-(1318,58)"
      evaluatedAs: true
  - testPathName: "shortArrayToIntWhen0NotEqualsNShortsAndNShortsMinus1MultipliedBy16PlusDstPosGreaterThanOrThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 32
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nShorts-1)*16+dstPos is greater or equal to than 32"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1318
      expression: "src.length == 0"
      range: "(1318,13)-(1318,27)"
      evaluatedAs: true
    - lineNumber: 1318
      expression: "srcPos == 0"
      range: "(1318,32)-(1318,42)"
      evaluatedAs: false
    - lineNumber: 1318
      expression: "0 == nShorts"
      range: "(1318,47)-(1318,58)"
      evaluatedAs: false
    - lineNumber: 1321
      expression: "(nShorts - 1) * 16 + dstPos >= 32"
      range: "(1321,13)-(1321,45)"
      evaluatedAs: true
  - testPathName: "shortArrayToIntWhenNShortsMinus1MultipliedBy16PlusDstPosLessThan32AndILessThanNShorts"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "int15"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int15"
    branches:
    - lineNumber: 1318
      expression: "src.length == 0"
      range: "(1318,13)-(1318,27)"
      evaluatedAs: true
    - lineNumber: 1318
      expression: "srcPos == 0"
      range: "(1318,32)-(1318,42)"
      evaluatedAs: false
    - lineNumber: 1318
      expression: "0 == nShorts"
      range: "(1318,47)-(1318,58)"
      evaluatedAs: false
    - lineNumber: 1321
      expression: "(nShorts - 1) * 16 + dstPos >= 32"
      range: "(1321,13)-(1321,45)"
      evaluatedAs: false
    - lineNumber: 1325
      expression: "i < nShorts"
      range: "(1325,25)-(1325,35)"
      evaluatedAs: true
- method:
    name: "shortArrayToLong"
    sourceCodeSignature: "long shortArrayToLong(final short[] src, final int srcPos,\
      \ final long dstInit, final int dstPos, final int nShorts)"
    returnType: "long"
    parameters:
    - name: "src"
      type: "short[]"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "long"
    - name: "dstPos"
      type: "int"
    - name: "nShorts"
      type: "int"
    instructionFingerprint: "F8E714673B456A62D880B916C8DEBCA0"
  paths:
  - testPathName: "shortArrayToLongWhenSrcPosNotEquals0And0EqualsNShorts"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nShorts"
    branches:
    - lineNumber: 1351
      expression: "src.length == 0"
      range: "(1351,13)-(1351,27)"
      evaluatedAs: true
    - lineNumber: 1351
      expression: "srcPos == 0"
      range: "(1351,32)-(1351,42)"
      evaluatedAs: false
    - lineNumber: 1351
      expression: "0 == nShorts"
      range: "(1351,47)-(1351,58)"
      evaluatedAs: true
  - testPathName: "shortArrayToLongWhen0NotEqualsNShortsAndNShortsMinus1MultipliedBy16PlusDstPosGreaterThanOThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 64
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nShorts-1)*16+dstPos is greater or equal to than 64"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1351
      expression: "src.length == 0"
      range: "(1351,13)-(1351,27)"
      evaluatedAs: true
    - lineNumber: 1351
      expression: "srcPos == 0"
      range: "(1351,32)-(1351,42)"
      evaluatedAs: false
    - lineNumber: 1351
      expression: "0 == nShorts"
      range: "(1351,47)-(1351,58)"
      evaluatedAs: false
    - lineNumber: 1354
      expression: "(nShorts - 1) * 16 + dstPos >= 64"
      range: "(1354,13)-(1354,45)"
      evaluatedAs: true
  - testPathName: "shortArrayToLongWhenNShortsMinus1MultipliedBy16PlusDstPosLessThan64AndILessThanNShorts"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nShorts"
      valueUuid: "nShorts"
    - type: "RESULT"
      name: "result"
      valueUuid: "long7"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nShorts"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long7"
    branches:
    - lineNumber: 1351
      expression: "src.length == 0"
      range: "(1351,13)-(1351,27)"
      evaluatedAs: true
    - lineNumber: 1351
      expression: "srcPos == 0"
      range: "(1351,32)-(1351,42)"
      evaluatedAs: false
    - lineNumber: 1351
      expression: "0 == nShorts"
      range: "(1351,47)-(1351,58)"
      evaluatedAs: false
    - lineNumber: 1354
      expression: "(nShorts - 1) * 16 + dstPos >= 64"
      range: "(1354,13)-(1354,45)"
      evaluatedAs: false
    - lineNumber: 1358
      expression: "i < nShorts"
      range: "(1358,25)-(1358,35)"
      evaluatedAs: true
- method:
    name: "shortToBinary"
    sourceCodeSignature: "boolean[] shortToBinary(final short src, final int srcPos,\
      \ final boolean[] dst, final int dstPos, final int nBools)"
    returnType: "boolean[]"
    parameters:
    - name: "src"
      type: "short"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "boolean[]"
    - name: "dstPos"
      type: "int"
    - name: "nBools"
      type: "int"
    instructionFingerprint: "E4D7423D810E1D7E0B510FA8BAF89711"
  paths:
  - testPathName: "shortToBinaryWhen0EqualsNBools"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 1384
      expression: "0 == nBools"
      range: "(1384,13)-(1384,23)"
      evaluatedAs: true
  - testPathName: "shortToBinaryWhenNBoolsMinus1PlusSrcPosGreaterThanOrEqualsTo16ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 18
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBools-1+srcPos is greater or equal to than 16"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1384
      expression: "0 == nBools"
      range: "(1384,13)-(1384,23)"
      evaluatedAs: false
    - lineNumber: 1387
      expression: "nBools - 1 + srcPos >= 16"
      range: "(1387,13)-(1387,37)"
      evaluatedAs: true
  - testPathName: "shortToBinaryWhenNBoolsNotMinus1ThrowsAssertionError"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "assertionError"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBools"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.AssertionError"
        parameters: []
      valueType: "java.lang.AssertionError"
      uuid: "assertionError"
    branches:
    - lineNumber: 1384
      expression: "0 == nBools"
      range: "(1384,13)-(1384,23)"
      evaluatedAs: false
    - lineNumber: 1387
      expression: "nBools - 1 + srcPos >= 16"
      range: "(1387,13)-(1387,37)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "(nBools - 1) < 16 - srcPos"
      range: "(1390,16)-(1390,41)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "nBools - 1"
      range: "(1390,17)-(1390,26)"
      evaluatedAs: false
  - testPathName: "shortToBinaryWhenDstPosPlusI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "booleanArray17"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem0"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "booleanArray17Item1"
      valueType: "boolean[]"
      uuid: "booleanArray17"
    branches:
    - lineNumber: 1384
      expression: "0 == nBools"
      range: "(1384,13)-(1384,23)"
      evaluatedAs: false
    - lineNumber: 1387
      expression: "nBools - 1 + srcPos >= 16"
      range: "(1387,13)-(1387,37)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "(nBools - 1) < 16 - srcPos"
      range: "(1390,16)-(1390,41)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "nBools - 1"
      range: "(1390,17)-(1390,26)"
      evaluatedAs: false
    - lineNumber: 1391
      expression: "i < nBools"
      range: "(1391,25)-(1391,34)"
      evaluatedAs: true
    - lineNumber: 1393
      expression: "dstPos + i"
      range: "(1393,17)-(1393,26)"
      evaluatedAs: true
  - testPathName: "shortToBinaryWhenDstPosNotPlusI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBools"
      valueUuid: "nBools"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "dstItem1"
      valueType: "boolean[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBools"
    branches:
    - lineNumber: 1384
      expression: "0 == nBools"
      range: "(1384,13)-(1384,23)"
      evaluatedAs: false
    - lineNumber: 1387
      expression: "nBools - 1 + srcPos >= 16"
      range: "(1387,13)-(1387,37)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "(nBools - 1) < 16 - srcPos"
      range: "(1390,16)-(1390,41)"
      evaluatedAs: false
    - lineNumber: 1390
      expression: "nBools - 1"
      range: "(1390,17)-(1390,26)"
      evaluatedAs: false
    - lineNumber: 1391
      expression: "i < nBools"
      range: "(1391,25)-(1391,34)"
      evaluatedAs: true
    - lineNumber: 1393
      expression: "dstPos + i"
      range: "(1393,17)-(1393,26)"
      evaluatedAs: false
- method:
    name: "shortToByteArray"
    sourceCodeSignature: "byte[] shortToByteArray(final short src, final int srcPos,\
      \ final byte[] dst, final int dstPos, final int nBytes)"
    returnType: "byte[]"
    parameters:
    - name: "src"
      type: "short"
    - name: "srcPos"
      type: "int"
    - name: "dst"
      type: "byte[]"
    - name: "dstPos"
      type: "int"
    - name: "nBytes"
      type: "int"
    instructionFingerprint: "A58EB550FA5CFB7557730E29ABD169B5"
  paths:
  - testPathName: "shortToByteArrayWhen0EqualsNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    branches:
    - lineNumber: 1415
      expression: "0 == nBytes"
      range: "(1415,13)-(1415,23)"
      evaluatedAs: true
  - testPathName: "shortToByteArrayWhenNBytesMinus1MultipliedBy8PlusSrcPosGreaterThanOrEqualsTo16ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 32
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nBytes-1)*8+srcPos is greater or equal to than 16"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1415
      expression: "0 == nBytes"
      range: "(1415,13)-(1415,23)"
      evaluatedAs: false
    - lineNumber: 1418
      expression: "(nBytes - 1) * 8 + srcPos >= 16"
      range: "(1418,13)-(1418,43)"
      evaluatedAs: true
  - testPathName: "shortToByteArrayWhenILessThanNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "byteArray"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "dstItem0"
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "byteArrayItem1"
      valueType: "byte[]"
      uuid: "byteArray"
    branches:
    - lineNumber: 1415
      expression: "0 == nBytes"
      range: "(1415,13)-(1415,23)"
      evaluatedAs: false
    - lineNumber: 1418
      expression: "(nBytes - 1) * 8 + srcPos >= 16"
      range: "(1418,13)-(1418,43)"
      evaluatedAs: false
    - lineNumber: 1421
      expression: "i < nBytes"
      range: "(1421,25)-(1421,34)"
      evaluatedAs: true
- method:
    name: "shortToHex"
    sourceCodeSignature: "String shortToHex(final short src, final int srcPos, final\
      \ String dstInit, final int dstPos, final int nHexs)"
    returnType: "java.lang.String"
    parameters:
    - name: "src"
      type: "short"
    - name: "srcPos"
      type: "int"
    - name: "dstInit"
      type: "java.lang.String"
    - name: "dstPos"
      type: "int"
    - name: "nHexs"
      type: "int"
    instructionFingerprint: "CE777B38E9EA928A2B3D7DB9BA46C446"
  paths:
  - testPathName: "shortToHexWhen0EqualsNHexs"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "dstInit"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nHexs"
    branches:
    - lineNumber: 1444
      expression: "0 == nHexs"
      range: "(1444,13)-(1444,22)"
      evaluatedAs: true
  - testPathName: "shortToHexWhenNHexsMinus1MultipliedBy4PlusSrcPosGreaterThanOrEqualsTo16ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 24
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "dstInit1"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "(nHexs-1)*4+srcPos is greater or equal to than 16"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1444
      expression: "0 == nHexs"
      range: "(1444,13)-(1444,22)"
      evaluatedAs: false
    - lineNumber: 1447
      expression: "(nHexs - 1) * 4 + srcPos >= 16"
      range: "(1447,13)-(1447,42)"
      evaluatedAs: true
  - testPathName: "shortToHexWhenDstPosPlusIEqualsAppend"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int12):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1444
      expression: "0 == nHexs"
      range: "(1444,13)-(1444,22)"
      evaluatedAs: false
    - lineNumber: 1447
      expression: "(nHexs - 1) * 4 + srcPos >= 16"
      range: "(1447,13)-(1447,42)"
      evaluatedAs: false
    - lineNumber: 1452
      expression: "i < nHexs"
      range: "(1452,25)-(1452,33)"
      evaluatedAs: true
    - lineNumber: 1455
      expression: "dstPos + i == append"
      range: "(1455,17)-(1455,36)"
      evaluatedAs: true
  - testPathName: "shortToHexWhenDstPosPlusINotEqualsAppend"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "srcPos"
      valueUuid: "srcPos"
    - type: "INPUT"
      name: "dstInit"
      valueUuid: "dstInit"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nHexs"
      valueUuid: "nHexs"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "intToHexDigit(int10):char1"
    - type: "RESULT"
      name: "result"
      valueUuid: "string"
    disabled: false
    failureReason:
      reason: "BITWISE_NOT_SUPPORTED"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "src"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "dstInit"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nHexs"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "char"
      uuid: "char1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int10"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 1444
      expression: "0 == nHexs"
      range: "(1444,13)-(1444,22)"
      evaluatedAs: false
    - lineNumber: 1447
      expression: "(nHexs - 1) * 4 + srcPos >= 16"
      range: "(1447,13)-(1447,42)"
      evaluatedAs: false
    - lineNumber: 1452
      expression: "i < nHexs"
      range: "(1452,25)-(1452,33)"
      evaluatedAs: true
    - lineNumber: 1455
      expression: "dstPos + i == append"
      range: "(1455,17)-(1455,36)"
      evaluatedAs: false
- method:
    name: "uuidToByteArray"
    sourceCodeSignature: "byte[] uuidToByteArray(final UUID src, final byte[] dst,\
      \ final int dstPos, final int nBytes)"
    returnType: "byte[]"
    parameters:
    - name: "src"
      type: "java.util.UUID"
    - name: "dst"
      type: "byte[]"
    - name: "dstPos"
      type: "int"
    - name: "nBytes"
      type: "int"
    instructionFingerprint: "987C577B6C19755423CDF33243D5B66F"
  paths:
  - testPathName: "uuidToByteArrayWhen0EqualsNBytes"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.UUID"
        method: "fromString"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "12345678-0000-abcd-1234-abcdef123456"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "java.util.UUID"
      uuid: "src"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "nBytes"
    branches:
    - lineNumber: 1480
      expression: "0 == nBytes"
      range: "(1480,13)-(1480,23)"
      evaluatedAs: true
  - testPathName: "uuidToByteArrayWhenNBytesGreaterThan16ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.UUID"
        method: "fromString"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "12345678-0000-abcd-1234-abcdef123456"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "java.util.UUID"
      uuid: "src"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 17
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "nBytes is greater than 16"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1480
      expression: "0 == nBytes"
      range: "(1480,13)-(1480,23)"
      evaluatedAs: false
    - lineNumber: 1483
      expression: "nBytes > 16"
      range: "(1483,13)-(1483,23)"
      evaluatedAs: true
  - testPathName: "uuidToByteArrayWhenNBytesGreaterThanOrEqualsTo8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "src"
      valueUuid: "src"
    - type: "INPUT"
      name: "dst"
      valueUuid: "dst"
    - type: "INPUT"
      name: "dstPos"
      valueUuid: "dstPos"
    - type: "INPUT"
      name: "nBytes"
      valueUuid: "nBytes"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "longToByteArray(long1,srcPos,dst,dstPos,int2):byteArray"
    - type: "STATIC"
      name: "Conversion.class"
      valueUuid: "Conversion.class"
      methodExercised:
        expression: "longToByteArray(long2,srcPos2,dst,dstPos2,nBytes2):byteArray2"
    - type: "RESULT"
      name: "result"
      valueUuid: "dst"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.UUID"
        method: "fromString"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "12345678-0000-abcd-1234-abcdef123456"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "java.util.UUID"
      uuid: "src"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "dst"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "dstPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 9
      valueType: "int"
      uuid: "nBytes"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.Conversion"
      uuid: "Conversion.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1311768464867765197
      valueType: "long"
      uuid: "long1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "int2"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1311862292439250006
      valueType: "long"
      uuid: "long2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "srcPos2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 16
      valueType: "int"
      uuid: "dstPos2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "nBytes2"
    branches:
    - lineNumber: 1480
      expression: "0 == nBytes"
      range: "(1480,13)-(1480,23)"
      evaluatedAs: false
    - lineNumber: 1483
      expression: "nBytes > 16"
      range: "(1483,13)-(1483,23)"
      evaluatedAs: false
    - lineNumber: 1487
      expression: "nBytes >= 8"
      range: "(1487,13)-(1487,23)"
      evaluatedAs: true
