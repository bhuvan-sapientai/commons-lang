---
targetClass:
  fullClassName: "org.apache.commons.lang3.math.NumberUtils"
methods:
- method:
    name: "compare"
    sourceCodeSignature: "int compare(final byte x, final byte y)"
    returnType: "int"
    parameters:
    - name: "x"
      type: "byte"
    - name: "y"
      type: "byte"
    instructionFingerprint: "F0C47D2611D1F4A321A0F1BDC7138844"
  paths:
  - testPathName: "compareTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "byte"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "byte"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
- method:
    name: "compare"
    sourceCodeSignature: "int compare(final int x, final int y)"
    returnType: "int"
    parameters:
    - name: "x"
      type: "int"
    - name: "y"
      type: "int"
    instructionFingerprint: "2219FB53FA59DE98D6D5B7E3739BAC25"
  paths:
  - testPathName: "compare1WhenXEqualsY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 114
      expression: "x == y"
      range: "(114,13)-(114,18)"
      evaluatedAs: true
  - testPathName: "compare1WhenXLessThanY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 114
      expression: "x == y"
      range: "(114,13)-(114,18)"
      evaluatedAs: false
    - lineNumber: 117
      expression: "x < y"
      range: "(117,16)-(117,20)"
      evaluatedAs: true
  - testPathName: "compare1WhenXNotLessThanY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 114
      expression: "x == y"
      range: "(114,13)-(114,18)"
      evaluatedAs: false
    - lineNumber: 117
      expression: "x < y"
      range: "(117,16)-(117,20)"
      evaluatedAs: false
- method:
    name: "compare"
    sourceCodeSignature: "int compare(final long x, final long y)"
    returnType: "int"
    parameters:
    - name: "x"
      type: "long"
    - name: "y"
      type: "long"
    instructionFingerprint: "E99E2D2EAABBD57D02B8083537D553F6"
  paths:
  - testPathName: "compare2WhenXEqualsY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "long"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "long"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 131
      expression: "x == y"
      range: "(131,13)-(131,18)"
      evaluatedAs: true
  - testPathName: "compare2WhenXLessThanY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "long"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "long"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 131
      expression: "x == y"
      range: "(131,13)-(131,18)"
      evaluatedAs: false
    - lineNumber: 134
      expression: "x < y"
      range: "(134,16)-(134,20)"
      evaluatedAs: true
  - testPathName: "compare2WhenXNotLessThanY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "long"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "long"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 131
      expression: "x == y"
      range: "(131,13)-(131,18)"
      evaluatedAs: false
    - lineNumber: 134
      expression: "x < y"
      range: "(134,16)-(134,20)"
      evaluatedAs: false
- method:
    name: "compare"
    sourceCodeSignature: "int compare(final short x, final short y)"
    returnType: "int"
    parameters:
    - name: "x"
      type: "short"
    - name: "y"
      type: "short"
    instructionFingerprint: "CBBA11E782892114D4E2D394F4C3FF24"
  paths:
  - testPathName: "compare3WhenXEqualsY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "short"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "short"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 148
      expression: "x == y"
      range: "(148,13)-(148,18)"
      evaluatedAs: true
  - testPathName: "compare3WhenXLessThanY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "short"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "short"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 148
      expression: "x == y"
      range: "(148,13)-(148,18)"
      evaluatedAs: false
    - lineNumber: 151
      expression: "x < y"
      range: "(151,16)-(151,20)"
      evaluatedAs: true
  - testPathName: "compare3WhenXNotLessThanY"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "x"
      valueUuid: "x"
    - type: "INPUT"
      name: "y"
      valueUuid: "y"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "short"
      uuid: "x"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "short"
      uuid: "y"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "expectedResult"
    branches:
    - lineNumber: 148
      expression: "x == y"
      range: "(148,13)-(148,18)"
      evaluatedAs: false
    - lineNumber: 151
      expression: "x < y"
      range: "(151,16)-(151,20)"
      evaluatedAs: false
- method:
    name: "createBigDecimal"
    sourceCodeSignature: "BigDecimal createBigDecimal(final String str)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "7A382B5477DD91673CB66578943D72BF"
  paths:
  - testPathName: "createBigDecimalWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 164
      expression: "str == null"
      range: "(164,13)-(164,23)"
      evaluatedAs: true
  - testPathName: "createBigDecimalWhenStringUtilsIsBlankStrThrowsNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "numberFormatException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NumberFormatException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A blank string is not a valid number"
            valueType: "java.lang.String"
            uuid: "s4"
      valueType: "java.lang.NumberFormatException"
      uuid: "numberFormatException"
    branches:
    - lineNumber: 164
      expression: "str == null"
      range: "(164,13)-(164,23)"
      evaluatedAs: false
    - lineNumber: 168
      expression: "StringUtils.isBlank(str)"
      range: "(168,13)-(168,36)"
      evaluatedAs: true
  - testPathName: "createBigDecimalWhenStringUtilsNotIsBlankStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 164
      expression: "str == null"
      range: "(164,13)-(164,23)"
      evaluatedAs: false
    - lineNumber: 168
      expression: "StringUtils.isBlank(str)"
      range: "(168,13)-(168,36)"
      evaluatedAs: false
- method:
    name: "createBigInteger"
    sourceCodeSignature: "BigInteger createBigInteger(final String str)"
    returnType: "java.math.BigInteger"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "1D70BA19E97A7563EFCA4686F532FE68"
  paths:
  - testPathName: "createBigIntegerWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigInteger"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.math.BigInteger"
      uuid: "bigInteger"
    branches:
    - lineNumber: 185
      expression: "str == null"
      range: "(185,13)-(185,23)"
      evaluatedAs: true
  - testPathName: "createBigIntegerWhenStrIsEmptyThrowsNumberFormatException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "numberFormatException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NumberFormatException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "An empty string is not a valid number"
            valueType: "java.lang.String"
            uuid: "s4"
      valueType: "java.lang.NumberFormatException"
      uuid: "numberFormatException"
    branches:
    - lineNumber: 185
      expression: "str == null"
      range: "(185,13)-(185,23)"
      evaluatedAs: false
    - lineNumber: 188
      expression: "str.isEmpty()"
      range: "(188,13)-(188,25)"
      evaluatedAs: true
  - testPathName: "createBigIntegerWhenStrStartsWith_PosAndNegate"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigInteger2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-#AB"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -171
      valueType: "java.math.BigInteger"
      uuid: "bigInteger2"
    branches:
    - lineNumber: 185
      expression: "str == null"
      range: "(185,13)-(185,23)"
      evaluatedAs: false
    - lineNumber: 188
      expression: "str.isEmpty()"
      range: "(188,13)-(188,25)"
      evaluatedAs: false
    - lineNumber: 195
      expression: "char0 == '-'"
      range: "(195,13)-(195,24)"
      evaluatedAs: true
    - lineNumber: 201
      expression: "str.startsWith(\\\"0x\\\", pos)"
      range: "(201,13)-(201,37)"
      evaluatedAs: false
    - lineNumber: 201
      expression: "str.startsWith(\\\"0X\\\", pos)"
      range: "(201,42)-(201,66)"
      evaluatedAs: false
    - lineNumber: 204
      expression: "str.startsWith(\\\"#\\\", pos)"
      range: "(204,20)-(204,43)"
      evaluatedAs: true
    - lineNumber: 213
      expression: "negate"
      range: "(213,16)-(213,21)"
      evaluatedAs: true
  - testPathName: "createBigIntegerWhenStrStartsWith0XPosAndNotNegate"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigInteger"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "+0XA"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 10
      valueType: "java.math.BigInteger"
      uuid: "bigInteger"
    branches:
    - lineNumber: 185
      expression: "str == null"
      range: "(185,13)-(185,23)"
      evaluatedAs: false
    - lineNumber: 188
      expression: "str.isEmpty()"
      range: "(188,13)-(188,25)"
      evaluatedAs: false
    - lineNumber: 195
      expression: "char0 == '-'"
      range: "(195,13)-(195,24)"
      evaluatedAs: false
    - lineNumber: 198
      expression: "char0 == '+'"
      range: "(198,20)-(198,31)"
      evaluatedAs: true
    - lineNumber: 201
      expression: "str.startsWith(\\\"0x\\\", pos)"
      range: "(201,13)-(201,37)"
      evaluatedAs: false
    - lineNumber: 201
      expression: "str.startsWith(\\\"0X\\\", pos)"
      range: "(201,42)-(201,66)"
      evaluatedAs: true
    - lineNumber: 213
      expression: "negate"
      range: "(213,16)-(213,21)"
      evaluatedAs: false
  - testPathName: "createBigIntegerWhenStrLengthGreaterThanPosPlus1AndNegate"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigInteger2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-0A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "java.math.BigInteger"
      uuid: "bigInteger2"
    branches:
    - lineNumber: 185
      expression: "str == null"
      range: "(185,13)-(185,23)"
      evaluatedAs: false
    - lineNumber: 188
      expression: "str.isEmpty()"
      range: "(188,13)-(188,25)"
      evaluatedAs: false
    - lineNumber: 195
      expression: "char0 == '-'"
      range: "(195,13)-(195,24)"
      evaluatedAs: true
    - lineNumber: 201
      expression: "str.startsWith(\\\"0x\\\", pos)"
      range: "(201,13)-(201,37)"
      evaluatedAs: false
    - lineNumber: 201
      expression: "str.startsWith(\\\"0X\\\", pos)"
      range: "(201,42)-(201,66)"
      evaluatedAs: false
    - lineNumber: 204
      expression: "str.startsWith(\\\"#\\\", pos)"
      range: "(204,20)-(204,43)"
      evaluatedAs: false
    - lineNumber: 207
      expression: "str.startsWith(\\\"0\\\", pos)"
      range: "(207,20)-(207,43)"
      evaluatedAs: true
    - lineNumber: 207
      expression: "str.length() > pos + 1"
      range: "(207,48)-(207,69)"
      evaluatedAs: true
    - lineNumber: 213
      expression: "negate"
      range: "(213,16)-(213,21)"
      evaluatedAs: true
- method:
    name: "createDouble"
    sourceCodeSignature: "Double createDouble(final String str)"
    returnType: "java.lang.Double"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "B419F59A4D4390C341EC50774E4362B1"
  paths:
  - testPathName: "createDoubleWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.Double"
      uuid: "double4"
    branches:
    - lineNumber: 226
      expression: "str == null"
      range: "(226,13)-(226,23)"
      evaluatedAs: true
  - testPathName: "createDoubleWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1.0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "java.lang.Double"
      uuid: "double4"
    branches:
    - lineNumber: 226
      expression: "str == null"
      range: "(226,13)-(226,23)"
      evaluatedAs: false
- method:
    name: "createFloat"
    sourceCodeSignature: "Float createFloat(final String str)"
    returnType: "java.lang.Float"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "1946294B3B3E1DE779ED536E48848512"
  paths:
  - testPathName: "createFloatWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "float4"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.Float"
      uuid: "float4"
    branches:
    - lineNumber: 242
      expression: "str == null"
      range: "(242,13)-(242,23)"
      evaluatedAs: true
  - testPathName: "createFloatWhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "float4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1.0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "java.lang.Float"
      uuid: "float4"
    branches:
    - lineNumber: 242
      expression: "str == null"
      range: "(242,13)-(242,23)"
      evaluatedAs: false
- method:
    name: "createInteger"
    sourceCodeSignature: "Integer createInteger(final String str)"
    returnType: "java.lang.Integer"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "B3008C15EDC10E0A63CFC6A113BFFEB3"
  paths:
  - testPathName: "createIntegerWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "integer5"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.Integer"
      uuid: "integer5"
    branches:
    - lineNumber: 260
      expression: "str == null"
      range: "(260,13)-(260,23)"
      evaluatedAs: true
  - testPathName: "createIntegerWhenStrIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "integer5"
    disabled: false
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Integer"
      uuid: "integer5"
    branches:
    - lineNumber: 260
      expression: "str == null"
      range: "(260,13)-(260,23)"
      evaluatedAs: false
- method:
    name: "createLong"
    sourceCodeSignature: "Long createLong(final String str)"
    returnType: "java.lang.Long"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "E378A589E954892340A035716FFB9B70"
  paths:
  - testPathName: "createLongWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "long6"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.Long"
      uuid: "long6"
    branches:
    - lineNumber: 279
      expression: "str == null"
      range: "(279,13)-(279,23)"
      evaluatedAs: true
  - testPathName: "createLongWhenStrIsNotNull"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "long6"
    disabled: false
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Long"
      uuid: "long6"
    branches:
    - lineNumber: 279
      expression: "str == null"
      range: "(279,13)-(279,23)"
      evaluatedAs: false
- method:
    name: "createNumber"
    sourceCodeSignature: "Number createNumber(final String str)"
    returnType: "java.lang.Number"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "0E07363FDDCB6A084614B76D82AF79A3"
  paths:
  - testPathName: "createNumberWhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "number"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "NULL"
      valueType: "java.lang.Number"
      uuid: "number"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: true
  - testPathName: "createNumberWhenStringUtilsIsBlankStrThrowsNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "numberFormatException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NumberFormatException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A blank string is not a valid number"
            valueType: "java.lang.String"
            uuid: "s4"
      valueType: "java.lang.NumberFormatException"
      uuid: "numberFormatException"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: true
  - testPathName: "createNumberWhenFirstSigDigitGreaterThan_7_"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createBigInteger(str):bigInteger"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigInteger"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-0x\\uFDFFCDEFGHIJKLMNOPQ"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigInteger"
      uuid: "bigInteger"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: true
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: true
    - lineNumber: 336
      expression: "i < length"
      range: "(336,34)-(336,43)"
      evaluatedAs: true
    - lineNumber: 338
      expression: "firstSigDigit != '0'"
      range: "(338,21)-(338,40)"
      evaluatedAs: true
    - lineNumber: 344
      expression: "hexDigits > 16"
      range: "(344,17)-(344,30)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "hexDigits == 16"
      range: "(344,35)-(344,49)"
      evaluatedAs: true
    - lineNumber: 344
      expression: "firstSigDigit > '7'"
      range: "(344,54)-(344,72)"
      evaluatedAs: true
  - testPathName: "createNumberWhenFirstSigDigitNotGreaterThan_7_AndHexDigitsGreaterThan8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createLong(str):long6"
    - type: "RESULT"
      name: "result"
      valueUuid: "long6"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-0x\\u0001CDEFGHIJKLMNOPQ"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Long"
      uuid: "long6"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: true
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: true
    - lineNumber: 336
      expression: "i < length"
      range: "(336,34)-(336,43)"
      evaluatedAs: true
    - lineNumber: 338
      expression: "firstSigDigit != '0'"
      range: "(338,21)-(338,40)"
      evaluatedAs: true
    - lineNumber: 344
      expression: "hexDigits > 16"
      range: "(344,17)-(344,30)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "hexDigits == 16"
      range: "(344,35)-(344,49)"
      evaluatedAs: true
    - lineNumber: 344
      expression: "firstSigDigit > '7'"
      range: "(344,54)-(344,72)"
      evaluatedAs: false
    - lineNumber: 347
      expression: "hexDigits > 8"
      range: "(347,17)-(347,29)"
      evaluatedAs: true
  - testPathName: "createNumberWhenExpPosGreaterThanLengthThrowsNumberFormatException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "numberFormatException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-.eE"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NumberFormatException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "-.eE is not a valid number."
            valueType: "java.lang.String"
            uuid: "string7"
      valueType: "java.lang.NumberFormatException"
      uuid: "numberFormatException"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: true
  - testPathName: "createNumberWhenHexDigitsEquals8AndFirstSigDigitNotGreaterThan_7_"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createInteger(str):integer5"
    - type: "RESULT"
      name: "result"
      valueUuid: "integer5"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-0x0DEFGHIJK"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Integer"
      uuid: "integer5"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: true
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: true
    - lineNumber: 336
      expression: "i < length"
      range: "(336,34)-(336,43)"
      evaluatedAs: true
    - lineNumber: 338
      expression: "firstSigDigit != '0'"
      range: "(338,21)-(338,40)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "hexDigits > 16"
      range: "(344,17)-(344,30)"
      evaluatedAs: false
    - lineNumber: 344
      expression: "hexDigits == 16"
      range: "(344,35)-(344,49)"
      evaluatedAs: false
    - lineNumber: 347
      expression: "hexDigits > 8"
      range: "(347,17)-(347,29)"
      evaluatedAs: false
    - lineNumber: 347
      expression: "hexDigits == 8"
      range: "(347,34)-(347,47)"
      evaluatedAs: true
    - lineNumber: 347
      expression: "firstSigDigit > '7'"
      range: "(347,52)-(347,70)"
      evaluatedAs: false
  - testPathName: "createNumberWhenIsDigitsNotNumericThrowsNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "isDigits(string11):boolean7"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "isDigits(string10):boolean8"
    - type: "RESULT"
      name: "result"
      valueUuid: "numberFormatException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string11"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string10"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NumberFormatException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "s1"
            valueType: "java.lang.String"
            uuid: "string12"
      valueType: "java.lang.NumberFormatException"
      uuid: "numberFormatException"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'f' or switch(lastChar) = 'F'"
      range: "(410,22)-(410,24)"
      evaluatedAs: true
    - lineNumber: 397
      expression: "dec == null"
      range: "(397,25)-(397,35)"
      evaluatedAs: true
    - lineNumber: 397
      expression: "exp == null"
      range: "(398,28)-(398,38)"
      evaluatedAs: true
    - lineNumber: 399
      expression: "!numeric.isEmpty()"
      range: "(399,29)-(399,46)"
      evaluatedAs: true
    - lineNumber: 399
      expression: "isDigits(numeric.substring(1))"
      range: "(399,79)-(399,108)"
      evaluatedAs: false
    - lineNumber: 399
      expression: "isDigits(numeric)"
      range: "(399,113)-(399,129)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenIsDigitsNotNumeric"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "isDigits(string11):boolean7"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "isDigits(string10):boolean8"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createLong(string10):long6"
    - type: "RESULT"
      name: "result"
      valueUuid: "long6"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string11"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string10"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Long"
      uuid: "long6"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'f' or switch(lastChar) = 'F'"
      range: "(410,22)-(410,24)"
      evaluatedAs: true
    - lineNumber: 397
      expression: "dec == null"
      range: "(397,25)-(397,35)"
      evaluatedAs: true
    - lineNumber: 397
      expression: "exp == null"
      range: "(398,28)-(398,38)"
      evaluatedAs: true
    - lineNumber: 399
      expression: "!numeric.isEmpty()"
      range: "(399,29)-(399,46)"
      evaluatedAs: true
    - lineNumber: 399
      expression: "isDigits(numeric.substring(1))"
      range: "(399,79)-(399,108)"
      evaluatedAs: false
    - lineNumber: 399
      expression: "isDigits(numeric)"
      range: "(399,113)-(399,129)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenFFloatValueNotEquals0_0F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createFloat(str):float4"
    - type: "RESULT"
      name: "result"
      valueUuid: "float4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Float"
      uuid: "float4"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 413
      expression: "!(f.isInfinite() || f.floatValue() == 0.0F && !isZero(mant, dec))"
      range: "(413,29)-(413,93)"
      evaluatedAs: false
    - lineNumber: 413
      expression: "f.isInfinite()"
      range: "(413,31)-(413,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 413
      expression: "f.floatValue() == 0.0F"
      range: "(413,49)-(413,70)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenDDoubleValueNotEquals0_0D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createDouble(str):double4"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "double4"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 427
      expression: "!(d.isInfinite() || d.doubleValue() == 0.0D && !isZero(mant, dec))"
      range: "(427,29)-(427,94)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "d.isInfinite()"
      range: "(427,31)-(427,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 427
      expression: "d.doubleValue() == 0.0D"
      range: "(427,49)-(427,71)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenDDoubleValueEquals0_0D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createDouble(str):double4"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createBigDecimal(string10):bigDecimal"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "double4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string10"
      valueType: "java.lang.String"
      uuid: "string10"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 427
      expression: "!(d.isInfinite() || d.doubleValue() == 0.0D && !isZero(mant, dec))"
      range: "(427,29)-(427,94)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "d.isInfinite()"
      range: "(427,31)-(427,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: false
      internalMethodName: "isZero"
    - lineNumber: 427
      expression: "d.doubleValue() == 0.0D"
      range: "(427,49)-(427,71)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenStrCharAtIEquals_0_AndIsAllZerosDecAndFFloatValueNotEquals0_0F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createFloat(str):float4"
    - type: "RESULT"
      name: "result"
      valueUuid: "float4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Float"
      uuid: "float4"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 413
      expression: "!(f.isInfinite() || f.floatValue() == 0.0F && !isZero(mant, dec))"
      range: "(413,29)-(413,93)"
      evaluatedAs: false
    - lineNumber: 413
      expression: "f.isInfinite()"
      range: "(413,31)-(413,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 413
      expression: "f.floatValue() == 0.0F"
      range: "(413,49)-(413,70)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenFFloatValueEquals0_0FAndDIsInfiniteNotOrDDoubleValueEquals0_0DAndIsZeroNotMantDec"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createFloat(str):float4"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createDouble(str):double4"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createBigDecimal(string10):bigDecimal"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Float"
      uuid: "float4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "double4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string10"
      valueType: "java.lang.String"
      uuid: "string10"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 413
      expression: "!(f.isInfinite() || f.floatValue() == 0.0F && !isZero(mant, dec))"
      range: "(413,29)-(413,93)"
      evaluatedAs: false
    - lineNumber: 413
      expression: "f.isInfinite()"
      range: "(413,31)-(413,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: false
      internalMethodName: "isZero"
    - lineNumber: 413
      expression: "f.floatValue() == 0.0F"
      range: "(413,49)-(413,70)"
      evaluatedAs: true
    - lineNumber: 427
      expression: "!(d.isInfinite() || d.doubleValue() == 0.0D && !isZero(mant, dec))"
      range: "(427,29)-(427,94)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenStrCharAtIEquals_0_AndIsAllZerosMantAndIsAllZerosDecAndFFloatValueNotEquals0_0F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createFloat(str):float4"
    - type: "RESULT"
      name: "result"
      valueUuid: "float4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Float"
      uuid: "float4"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 413
      expression: "!(f.isInfinite() || f.floatValue() == 0.0F && !isZero(mant, dec))"
      range: "(413,29)-(413,93)"
      evaluatedAs: false
    - lineNumber: 413
      expression: "f.isInfinite()"
      range: "(413,31)-(413,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 413
      expression: "f.floatValue() == 0.0F"
      range: "(413,49)-(413,70)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenIsAllZerosNotDecAndDDoubleValueEquals0_0D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createDouble(str):double4"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createBigDecimal(string10):bigDecimal"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "double4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: "string10"
      valueType: "java.lang.String"
      uuid: "string10"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 427
      expression: "!(d.isInfinite() || d.doubleValue() == 0.0D && !isZero(mant, dec))"
      range: "(427,29)-(427,94)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "d.isInfinite()"
      range: "(427,31)-(427,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: false
      internalMethodName: "isZero"
    - lineNumber: 427
      expression: "d.doubleValue() == 0.0D"
      range: "(427,49)-(427,71)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenStrCharAtIEquals_0_AndIsAllZerosDecAndDDoubleValueNotEquals0_0D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createDouble(str):double4"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "double4"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 427
      expression: "!(d.isInfinite() || d.doubleValue() == 0.0D && !isZero(mant, dec))"
      range: "(427,29)-(427,94)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "d.isInfinite()"
      range: "(427,31)-(427,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 427
      expression: "d.doubleValue() == 0.0D"
      range: "(427,49)-(427,71)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenStrCharAtIEquals_0_AndIsAllZerosMantAndIsAllZerosDecAndDDoubleValueNotEquals0_0D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createDouble(str):double4"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "double4"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 427
      expression: "!(d.isInfinite() || d.doubleValue() == 0.0D && !isZero(mant, dec))"
      range: "(427,29)-(427,94)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "d.isInfinite()"
      range: "(427,31)-(427,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: false
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 427
      expression: "d.doubleValue() == 0.0D"
      range: "(427,49)-(427,71)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "createNumberWhenDNotIsInfiniteAndDDoubleValueNotEquals0_0D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createFloat(str):float4"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createDouble(str):double4"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Float"
      uuid: "float4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "double4"
    branches:
    - lineNumber: 317
      expression: "str == null"
      range: "(317,13)-(317,23)"
      evaluatedAs: false
    - lineNumber: 320
      expression: "StringUtils.isBlank(str)"
      range: "(320,13)-(320,36)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '+'"
      range: "(326,28)-(326,47)"
      evaluatedAs: false
    - lineNumber: 326
      expression: "str.charAt(0) == '-'"
      range: "(326,52)-(326,71)"
      evaluatedAs: true
    - lineNumber: 328
      expression: "for-each(hexPrefixes)"
      range: "(328,33)-(328,43)"
      evaluatedAs: true
    - lineNumber: 329
      expression: "str.startsWith(pfx, offset)"
      range: "(329,17)-(329,43)"
      evaluatedAs: false
    - lineNumber: 334
      expression: "pfxLen > 0"
      range: "(334,13)-(334,22)"
      evaluatedAs: false
    - lineNumber: 362
      expression: "!Character.isDigit(lastChar)"
      range: "(362,37)-(362,64)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "lastChar != '.'"
      range: "(362,69)-(362,83)"
      evaluatedAs: true
    - lineNumber: 363
      expression: "decPos > -1"
      range: "(363,13)-(363,23)"
      evaluatedAs: true
    - lineNumber: 364
      expression: "expPos > -1"
      range: "(364,17)-(364,27)"
      evaluatedAs: true
    - lineNumber: 365
      expression: "expPos < decPos"
      range: "(365,21)-(365,35)"
      evaluatedAs: false
    - lineNumber: 365
      expression: "expPos > length"
      range: "(365,40)-(365,54)"
      evaluatedAs: false
    - lineNumber: 499
      expression: "firstChar == '-'"
      range: "(499,33)-(499,48)"
      evaluatedAs: false
      internalMethodName: "getMantissa"
    - lineNumber: 499
      expression: "firstChar == '+'"
      range: "(499,53)-(499,68)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 501
      expression: "hasSign"
      range: "(501,16)-(501,22)"
      evaluatedAs: true
      internalMethodName: "getMantissa"
    - lineNumber: 386
      expression: "requestType"
      range: "(386,13)-(386,23)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos > -1"
      range: "(387,17)-(387,27)"
      evaluatedAs: true
    - lineNumber: 387
      expression: "expPos < length - 1"
      range: "(387,32)-(387,50)"
      evaluatedAs: true
    - lineNumber: 394
      expression: "switch(lastChar) = 'l' or switch(lastChar) = 'L'"
      range: "(396,22)-(396,24)"
      evaluatedAs: true
    - lineNumber: 413
      expression: "!(f.isInfinite() || f.floatValue() == 0.0F && !isZero(mant, dec))"
      range: "(413,29)-(413,93)"
      evaluatedAs: false
    - lineNumber: 413
      expression: "f.isInfinite()"
      range: "(413,31)-(413,44)"
      evaluatedAs: false
    - lineNumber: 513
      expression: "str == null"
      range: "(513,13)-(513,23)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(mant)"
      range: "(764,16)-(764,31)"
      evaluatedAs: true
      internalMethodName: "isZero"
    - lineNumber: 516
      expression: "i >= 0"
      range: "(516,40)-(516,45)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 517
      expression: "str.charAt(i) != '0'"
      range: "(517,17)-(517,36)"
      evaluatedAs: true
      internalMethodName: "isAllZeros"
    - lineNumber: 764
      expression: "isAllZeros(dec)"
      range: "(764,36)-(764,50)"
      evaluatedAs: false
      internalMethodName: "isZero"
    - lineNumber: 413
      expression: "f.floatValue() == 0.0F"
      range: "(413,49)-(413,70)"
      evaluatedAs: true
    - lineNumber: 427
      expression: "!(d.isInfinite() || d.doubleValue() == 0.0D && !isZero(mant, dec))"
      range: "(427,29)-(427,94)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "d.isInfinite()"
      range: "(427,31)-(427,44)"
      evaluatedAs: false
    - lineNumber: 427
      expression: "d.doubleValue() == 0.0D"
      range: "(427,49)-(427,71)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "isCreatable"
    sourceCodeSignature: "boolean isCreatable(final String str)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "7A75C9D67844AF243B573FD552FD9B78"
  paths:
  - testPathName: "isCreatableWhenStringUtilsIsEmptyStr"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 547
      expression: "StringUtils.isEmpty(str)"
      range: "(547,13)-(547,36)"
      evaluatedAs: true
  - testPathName: "isCreatableWhenIIndexOfCharsNotGreaterThan_f_"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 547
      expression: "StringUtils.isEmpty(str)"
      range: "(547,13)-(547,36)"
      evaluatedAs: false
    - lineNumber: 557
      expression: "chars[0] == '-'"
      range: "(557,27)-(557,41)"
      evaluatedAs: false
    - lineNumber: 557
      expression: "chars[0] == '+'"
      range: "(557,46)-(557,60)"
      evaluatedAs: true
    - lineNumber: 558
      expression: "sz > start + 1"
      range: "(558,13)-(558,26)"
      evaluatedAs: true
    - lineNumber: 558
      expression: "chars[start] == '0'"
      range: "(558,31)-(558,49)"
      evaluatedAs: true
    - lineNumber: 558
      expression: "!StringUtils.contains(str, '.')"
      range: "(558,54)-(558,84)"
      evaluatedAs: true
    - lineNumber: 559
      expression: "chars[start + 1] == 'x'"
      range: "(559,17)-(559,39)"
      evaluatedAs: false
    - lineNumber: 559
      expression: "chars[start + 1] == 'X'"
      range: "(559,44)-(559,66)"
      evaluatedAs: true
    - lineNumber: 561
      expression: "i == sz"
      range: "(561,21)-(561,27)"
      evaluatedAs: false
    - lineNumber: 565
      expression: "i < chars.length"
      range: "(565,24)-(565,39)"
      evaluatedAs: true
    - lineNumber: 566
      expression: "chars[i] < '0'"
      range: "(566,26)-(566,39)"
      evaluatedAs: false
    - lineNumber: 566
      expression: "chars[i] > '9'"
      range: "(566,44)-(566,57)"
      evaluatedAs: true
    - lineNumber: 566
      expression: "chars[i] < 'a'"
      range: "(567,29)-(567,42)"
      evaluatedAs: false
    - lineNumber: 566
      expression: "chars[i] > 'f'"
      range: "(567,47)-(567,60)"
      evaluatedAs: false
  - testPathName: "isCreatableWhenNotHasExp"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "int5"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "int5"
    branches:
    - lineNumber: 547
      expression: "StringUtils.isEmpty(str)"
      range: "(547,13)-(547,36)"
      evaluatedAs: false
    - lineNumber: 557
      expression: "chars[0] == '-'"
      range: "(557,27)-(557,41)"
      evaluatedAs: false
    - lineNumber: 557
      expression: "chars[0] == '+'"
      range: "(557,46)-(557,60)"
      evaluatedAs: true
    - lineNumber: 558
      expression: "sz > start + 1"
      range: "(558,13)-(558,26)"
      evaluatedAs: true
    - lineNumber: 558
      expression: "chars[start] == '0'"
      range: "(558,31)-(558,49)"
      evaluatedAs: true
    - lineNumber: 558
      expression: "!StringUtils.contains(str, '.')"
      range: "(558,54)-(558,84)"
      evaluatedAs: true
    - lineNumber: 559
      expression: "chars[start + 1] == 'x'"
      range: "(559,17)-(559,39)"
      evaluatedAs: false
    - lineNumber: 559
      expression: "chars[start + 1] == 'X'"
      range: "(559,44)-(559,66)"
      evaluatedAs: false
    - lineNumber: 574
      expression: "Character.isDigit(chars[start + 1])"
      range: "(574,17)-(574,51)"
      evaluatedAs: false
    - lineNumber: 590
      expression: "i < sz"
      range: "(590,16)-(590,21)"
      evaluatedAs: false
    - lineNumber: 590
      expression: "i < sz + 1"
      range: "(590,26)-(590,35)"
      evaluatedAs: true
    - lineNumber: 590
      expression: "allowSigns"
      range: "(590,40)-(590,49)"
      evaluatedAs: false
    - lineNumber: 623
      expression: "i < chars.length"
      range: "(623,13)-(623,28)"
      evaluatedAs: true
    - lineNumber: 624
      expression: "chars[i] >= '0'"
      range: "(624,17)-(624,31)"
      evaluatedAs: true
    - lineNumber: 624
      expression: "chars[i] <= '9'"
      range: "(624,36)-(624,50)"
      evaluatedAs: false
    - lineNumber: 628
      expression: "chars[i] == 'e'"
      range: "(628,17)-(628,31)"
      evaluatedAs: false
    - lineNumber: 628
      expression: "chars[i] == 'E'"
      range: "(628,36)-(628,50)"
      evaluatedAs: false
    - lineNumber: 632
      expression: "chars[i] == '.'"
      range: "(632,17)-(632,31)"
      evaluatedAs: true
    - lineNumber: 633
      expression: "hasDecPoint"
      range: "(633,21)-(633,31)"
      evaluatedAs: false
    - lineNumber: 633
      expression: "hasExp"
      range: "(633,36)-(633,41)"
      evaluatedAs: false
- method:
    name: "isDigits"
    sourceCodeSignature: "boolean isDigits(final String str)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "F4536B80CC7E5777C20F8946DF9C8DF3"
  paths:
  - testPathName: "isDigitsWhenStringUtilsIsNumericStr"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 671
      expression: "StringUtils.isNumeric(str)"
      range: "(671,16)-(671,41)"
      evaluatedAs: true
  - testPathName: "isDigitsWhenStringUtilsNotIsNumericStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 671
      expression: "StringUtils.isNumeric(str)"
      range: "(671,16)-(671,41)"
      evaluatedAs: false
- method:
    name: "isNumber"
    sourceCodeSignature: "boolean isNumber(final String str)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "5DAC8BF2BE05604B672F1ECDFE9FDF17"
  paths:
  - testPathName: "isNumberWhenIsCreatableStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "isCreatable(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 701
      expression: "isCreatable(str)"
      range: "(701,16)-(701,31)"
      evaluatedAs: true
  - testPathName: "isNumberWhenIsCreatableNotStr"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "isCreatable(str):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 701
      expression: "isCreatable(str)"
      range: "(701,16)-(701,31)"
      evaluatedAs: false
- method:
    name: "isParsable"
    sourceCodeSignature: "boolean isParsable(final String str)"
    returnType: "boolean"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "2527CC4CCF8D9BBAF792C90C3BF1AFD4"
  paths:
  - testPathName: "isParsableWhenStringUtilsIsEmptyStr"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: true
  - testPathName: "isParsableWhenStrCharAtStrLengthMinus1Equals___"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "."
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: true
  - testPathName: "isParsableWhenStrLengthEquals1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: false
    - lineNumber: 728
      expression: "str.charAt(0) == '-'"
      range: "(728,13)-(728,32)"
      evaluatedAs: true
    - lineNumber: 729
      expression: "str.length() == 1"
      range: "(729,17)-(729,33)"
      evaluatedAs: true
  - testPathName: "isParsableWhenIsDecimalPoint"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ".A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: false
    - lineNumber: 728
      expression: "str.charAt(0) == '-'"
      range: "(728,13)-(728,32)"
      evaluatedAs: false
    - lineNumber: 1826
      expression: "i < str.length()"
      range: "(1826,32)-(1826,47)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1827
      expression: "str.charAt(i) == '.'"
      range: "(1827,44)-(1827,63)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1828
      expression: "isDecimalPoint"
      range: "(1828,17)-(1828,30)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1831
      expression: "decimalPoints > 1"
      range: "(1831,17)-(1831,33)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!isDecimalPoint"
      range: "(1834,17)-(1834,31)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "isParsableWhenDecimalPointsNotGreaterThan1AndIsDecimalPoint"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-.A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: false
    - lineNumber: 728
      expression: "str.charAt(0) == '-'"
      range: "(728,13)-(728,32)"
      evaluatedAs: true
    - lineNumber: 729
      expression: "str.length() == 1"
      range: "(729,17)-(729,33)"
      evaluatedAs: false
    - lineNumber: 1826
      expression: "i < str.length()"
      range: "(1826,32)-(1826,47)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1827
      expression: "str.charAt(i) == '.'"
      range: "(1827,44)-(1827,63)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1828
      expression: "isDecimalPoint"
      range: "(1828,17)-(1828,30)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1831
      expression: "decimalPoints > 1"
      range: "(1831,17)-(1831,33)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!isDecimalPoint"
      range: "(1834,17)-(1834,31)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "isParsableWhenCharacterNotIsDigitStrCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: false
    - lineNumber: 728
      expression: "str.charAt(0) == '-'"
      range: "(728,13)-(728,32)"
      evaluatedAs: false
    - lineNumber: 1826
      expression: "i < str.length()"
      range: "(1826,32)-(1826,47)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1827
      expression: "str.charAt(i) == '.'"
      range: "(1827,44)-(1827,63)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1828
      expression: "isDecimalPoint"
      range: "(1828,17)-(1828,30)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1831
      expression: "decimalPoints > 1"
      range: "(1831,17)-(1831,33)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!isDecimalPoint"
      range: "(1834,17)-(1834,31)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!Character.isDigit(str.charAt(i))"
      range: "(1834,36)-(1834,68)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "isParsableWhenCharacterIsDigitStrCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: false
    - lineNumber: 728
      expression: "str.charAt(0) == '-'"
      range: "(728,13)-(728,32)"
      evaluatedAs: false
    - lineNumber: 1826
      expression: "i < str.length()"
      range: "(1826,32)-(1826,47)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1827
      expression: "str.charAt(i) == '.'"
      range: "(1827,44)-(1827,63)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1828
      expression: "isDecimalPoint"
      range: "(1828,17)-(1828,30)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1831
      expression: "decimalPoints > 1"
      range: "(1831,17)-(1831,33)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!isDecimalPoint"
      range: "(1834,17)-(1834,31)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!Character.isDigit(str.charAt(i))"
      range: "(1834,36)-(1834,68)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "isParsableWhenNotIsDecimalPointAndCharacterNotIsDigitStrCharAtI"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "-A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: false
    - lineNumber: 728
      expression: "str.charAt(0) == '-'"
      range: "(728,13)-(728,32)"
      evaluatedAs: true
    - lineNumber: 729
      expression: "str.length() == 1"
      range: "(729,17)-(729,33)"
      evaluatedAs: false
    - lineNumber: 1826
      expression: "i < str.length()"
      range: "(1826,32)-(1826,47)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1827
      expression: "str.charAt(i) == '.'"
      range: "(1827,44)-(1827,63)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1828
      expression: "isDecimalPoint"
      range: "(1828,17)-(1828,30)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1831
      expression: "decimalPoints > 1"
      range: "(1831,17)-(1831,33)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!isDecimalPoint"
      range: "(1834,17)-(1834,31)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!Character.isDigit(str.charAt(i))"
      range: "(1834,36)-(1834,68)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
  - testPathName: "isParsableWhenNotIsDecimalPointAndCharacterIsDigitStrCharAtI"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 722
      expression: "StringUtils.isEmpty(str)"
      range: "(722,13)-(722,36)"
      evaluatedAs: false
    - lineNumber: 725
      expression: "str.charAt(str.length() - 1) == '.'"
      range: "(725,13)-(725,47)"
      evaluatedAs: false
    - lineNumber: 728
      expression: "str.charAt(0) == '-'"
      range: "(728,13)-(728,32)"
      evaluatedAs: true
    - lineNumber: 729
      expression: "str.length() == 1"
      range: "(729,17)-(729,33)"
      evaluatedAs: false
    - lineNumber: 1826
      expression: "i < str.length()"
      range: "(1826,32)-(1826,47)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1827
      expression: "str.charAt(i) == '.'"
      range: "(1827,44)-(1827,63)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1828
      expression: "isDecimalPoint"
      range: "(1828,17)-(1828,30)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1831
      expression: "decimalPoints > 1"
      range: "(1831,17)-(1831,33)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!isDecimalPoint"
      range: "(1834,17)-(1834,31)"
      evaluatedAs: true
      internalMethodName: "withDecimalsParsing"
    - lineNumber: 1834
      expression: "!Character.isDigit(str.charAt(i))"
      range: "(1834,36)-(1834,68)"
      evaluatedAs: false
      internalMethodName: "withDecimalsParsing"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "max"
    sourceCodeSignature: "byte max(final byte... array)"
    returnType: "byte"
    parameters:
    - name: "array"
      type: "byte[]"
    instructionFingerprint: "4EB51504D023CB80FDBBD06DB8D321F4"
  paths:
  - testPathName: "maxWhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "max"
    sourceCodeSignature: "byte max(byte a, final byte b, final byte c)"
    returnType: "byte"
    parameters:
    - name: "a"
      type: "byte"
    - name: "b"
      type: "byte"
    - name: "c"
      type: "byte"
    instructionFingerprint: "1224B5A4611FE32DDAB3953F5E49F830"
  paths:
  - testPathName: "max1WhenCGreaterThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "byte"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "byte"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "byte"
      uuid: "c"
    branches:
    - lineNumber: 800
      expression: "b > a"
      range: "(800,13)-(800,17)"
      evaluatedAs: true
    - lineNumber: 803
      expression: "c > a"
      range: "(803,13)-(803,17)"
      evaluatedAs: true
- method:
    name: "max"
    sourceCodeSignature: "double max(final double... array)"
    returnType: "double"
    parameters:
    - name: "array"
      type: "double[]"
    instructionFingerprint: "DEA4CFCC55DC357A7A922F638A6567D8"
  paths:
  - testPathName: "max2WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "double[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "max"
    sourceCodeSignature: "double max(final double a, final double b, final double\
      \ c)"
    returnType: "double"
    parameters:
    - name: "a"
      type: "double"
    - name: "b"
      type: "double"
    - name: "c"
      type: "double"
    instructionFingerprint: "74AAD864014799812D9AF42496C2D7F7"
  paths:
  - testPathName: "max3Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "double5"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "double"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7718.0
      valueType: "double"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7718.0
      valueType: "double"
      uuid: "c"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "double"
      uuid: "double5"
- method:
    name: "max"
    sourceCodeSignature: "float max(final float... array)"
    returnType: "float"
    parameters:
    - name: "array"
      type: "float[]"
    instructionFingerprint: "D5254EEBA75AAE066704636C0E7DF530"
  paths:
  - testPathName: "max4WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "float[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "max"
    sourceCodeSignature: "float max(final float a, final float b, final float c)"
    returnType: "float"
    parameters:
    - name: "a"
      type: "float"
    - name: "b"
      type: "float"
    - name: "c"
      type: "float"
    instructionFingerprint: "E6E9D2F1323DF2EEC3472A18F030DCB1"
  paths:
  - testPathName: "max5Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "float5"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "float"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7718.0
      valueType: "float"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7718.0
      valueType: "float"
      uuid: "c"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "float"
      uuid: "float5"
- method:
    name: "max"
    sourceCodeSignature: "int max(final int... array)"
    returnType: "int"
    parameters:
    - name: "array"
      type: "int[]"
    instructionFingerprint: "516AFBB0EF8B593B128A7F5165A56D98"
  paths:
  - testPathName: "max6WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "max"
    sourceCodeSignature: "int max(int a, final int b, final int c)"
    returnType: "int"
    parameters:
    - name: "a"
      type: "int"
    - name: "b"
      type: "int"
    - name: "c"
      type: "int"
    instructionFingerprint: "F30B2CA4D8CFD650DDBD92F65744C425"
  paths:
  - testPathName: "max7WhenCGreaterThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "c"
    branches:
    - lineNumber: 965
      expression: "b > a"
      range: "(965,13)-(965,17)"
      evaluatedAs: true
    - lineNumber: 968
      expression: "c > a"
      range: "(968,13)-(968,17)"
      evaluatedAs: true
- method:
    name: "max"
    sourceCodeSignature: "long max(final long... array)"
    returnType: "long"
    parameters:
    - name: "array"
      type: "long[]"
    instructionFingerprint: "2E5F80961374F6D9F3BFDF1AC20C4415"
  paths:
  - testPathName: "max8WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "long[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "max"
    sourceCodeSignature: "long max(long a, final long b, final long c)"
    returnType: "long"
    parameters:
    - name: "a"
      type: "long"
    - name: "b"
      type: "long"
    - name: "c"
      type: "long"
    instructionFingerprint: "E03A584B9D58061D8A73161E0ACA103F"
  paths:
  - testPathName: "max9WhenCGreaterThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "long"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "long"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "long"
      uuid: "c"
    branches:
    - lineNumber: 1008
      expression: "b > a"
      range: "(1008,13)-(1008,17)"
      evaluatedAs: true
    - lineNumber: 1011
      expression: "c > a"
      range: "(1011,13)-(1011,17)"
      evaluatedAs: true
- method:
    name: "max"
    sourceCodeSignature: "short max(final short... array)"
    returnType: "short"
    parameters:
    - name: "array"
      type: "short[]"
    instructionFingerprint: "D19F299EEAEA6AD2481CBCCC7A007962"
  paths:
  - testPathName: "max10WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "max"
    sourceCodeSignature: "short max(short a, final short b, final short c)"
    returnType: "short"
    parameters:
    - name: "a"
      type: "short"
    - name: "b"
      type: "short"
    - name: "c"
      type: "short"
    instructionFingerprint: "57A69F224E6EBB6C4456F47BF80C3216"
  paths:
  - testPathName: "max11WhenCGreaterThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "short"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "short"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "short"
      uuid: "c"
    branches:
    - lineNumber: 1050
      expression: "b > a"
      range: "(1050,13)-(1050,17)"
      evaluatedAs: true
    - lineNumber: 1053
      expression: "c > a"
      range: "(1053,13)-(1053,17)"
      evaluatedAs: true
- method:
    name: "min"
    sourceCodeSignature: "byte min(final byte... array)"
    returnType: "byte"
    parameters:
    - name: "array"
      type: "byte[]"
    instructionFingerprint: "2FA5AEE66DED68E14CABDFC72CEF3236"
  paths:
  - testPathName: "minWhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "min"
    sourceCodeSignature: "byte min(byte a, final byte b, final byte c)"
    returnType: "byte"
    parameters:
    - name: "a"
      type: "byte"
    - name: "b"
      type: "byte"
    - name: "c"
      type: "byte"
    instructionFingerprint: "39E09182811817EC78E6B6558F922BC3"
  paths:
  - testPathName: "min1WhenCLessThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "byte"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "byte"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "byte"
      uuid: "c"
    branches:
    - lineNumber: 1092
      expression: "b < a"
      range: "(1092,13)-(1092,17)"
      evaluatedAs: true
    - lineNumber: 1095
      expression: "c < a"
      range: "(1095,13)-(1095,17)"
      evaluatedAs: true
- method:
    name: "min"
    sourceCodeSignature: "double min(final double... array)"
    returnType: "double"
    parameters:
    - name: "array"
      type: "double[]"
    instructionFingerprint: "E99D78D2FE15BCFAC5E595CC70292546"
  paths:
  - testPathName: "min2WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "double[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "min"
    sourceCodeSignature: "double min(final double a, final double b, final double\
      \ c)"
    returnType: "double"
    parameters:
    - name: "a"
      type: "double"
    - name: "b"
      type: "double"
    - name: "c"
      type: "double"
    instructionFingerprint: "2E3CC4C1876297E05DF93DA09DE28749"
  paths:
  - testPathName: "min3Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "double5"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "double"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7720.0
      valueType: "double"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7720.0
      valueType: "double"
      uuid: "c"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "double"
      uuid: "double5"
- method:
    name: "min"
    sourceCodeSignature: "float min(final float... array)"
    returnType: "float"
    parameters:
    - name: "array"
      type: "float[]"
    instructionFingerprint: "5668E16D2197B9CB422E28B38E378BF5"
  paths:
  - testPathName: "min4WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "float[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "min"
    sourceCodeSignature: "float min(final float a, final float b, final float c)"
    returnType: "float"
    parameters:
    - name: "a"
      type: "float"
    - name: "b"
      type: "float"
    - name: "c"
      type: "float"
    instructionFingerprint: "CF39760B274DE7B2BD4FFE808509B128"
  paths:
  - testPathName: "min5Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "float5"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "float"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7720.0
      valueType: "float"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7720.0
      valueType: "float"
      uuid: "c"
    - sapientType: "BASIC"
      content: !<regular>
        value: 7719.0
      valueType: "float"
      uuid: "float5"
- method:
    name: "min"
    sourceCodeSignature: "int min(final int... array)"
    returnType: "int"
    parameters:
    - name: "array"
      type: "int[]"
    instructionFingerprint: "108C1F6C6CB722AAFFA383294EC4C83A"
  paths:
  - testPathName: "min6WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "min"
    sourceCodeSignature: "int min(int a, final int b, final int c)"
    returnType: "int"
    parameters:
    - name: "a"
      type: "int"
    - name: "b"
      type: "int"
    - name: "c"
      type: "int"
    instructionFingerprint: "DEB0D7E8E3413F721E00A919DF55378D"
  paths:
  - testPathName: "min7WhenCLessThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "c"
    branches:
    - lineNumber: 1222
      expression: "b < a"
      range: "(1222,13)-(1222,17)"
      evaluatedAs: true
    - lineNumber: 1225
      expression: "c < a"
      range: "(1225,13)-(1225,17)"
      evaluatedAs: true
- method:
    name: "min"
    sourceCodeSignature: "long min(final long... array)"
    returnType: "long"
    parameters:
    - name: "array"
      type: "long[]"
    instructionFingerprint: "864F96025A7460221A189BD9BFF37450"
  paths:
  - testPathName: "min8WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "long[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "min"
    sourceCodeSignature: "long min(long a, final long b, final long c)"
    returnType: "long"
    parameters:
    - name: "a"
      type: "long"
    - name: "b"
      type: "long"
    - name: "c"
      type: "long"
    instructionFingerprint: "303010420C268E6DE277AFF7B90B4C1B"
  paths:
  - testPathName: "min9WhenCLessThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "long"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "long"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "long"
      uuid: "c"
    branches:
    - lineNumber: 1265
      expression: "b < a"
      range: "(1265,13)-(1265,17)"
      evaluatedAs: true
    - lineNumber: 1268
      expression: "c < a"
      range: "(1268,13)-(1268,17)"
      evaluatedAs: true
- method:
    name: "min"
    sourceCodeSignature: "short min(final short... array)"
    returnType: "short"
    parameters:
    - name: "array"
      type: "short[]"
    instructionFingerprint: "C931F0CF1706ADF045DD668711A83004"
  paths:
  - testPathName: "min10WhenArrayGetLengthArrayNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "array"
      valueUuid: "array"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "short[]"
      uuid: "array"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters: []
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1821
      expression: "Array.getLength(array) != 0"
      range: "(1821,25)-(1821,51)"
      evaluatedAs: true
      internalMethodName: "validateArray"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.math.NumberUtils"
- method:
    name: "min"
    sourceCodeSignature: "short min(short a, final short b, final short c)"
    returnType: "short"
    parameters:
    - name: "a"
      type: "short"
    - name: "b"
      type: "short"
    - name: "c"
      type: "short"
    instructionFingerprint: "A946DF6675356A5D0BAE06E678222906"
  paths:
  - testPathName: "min11WhenCLessThanA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "a"
      valueUuid: "a"
    - type: "INPUT"
      name: "b"
      valueUuid: "b"
    - type: "INPUT"
      name: "c"
      valueUuid: "c"
    - type: "RESULT"
      name: "result"
      valueUuid: "c"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "short"
      uuid: "a"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "short"
      uuid: "b"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "short"
      uuid: "c"
    branches:
    - lineNumber: 1307
      expression: "b < a"
      range: "(1307,13)-(1307,17)"
      evaluatedAs: true
    - lineNumber: 1310
      expression: "c < a"
      range: "(1310,13)-(1310,17)"
      evaluatedAs: true
- method:
    name: "toByte"
    sourceCodeSignature: "byte toByte(final String str)"
    returnType: "byte"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "BFBB7B9B112F35EF76855A2DF78E76E2"
  paths:
  - testPathName: "toByteTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toByte(str,defaultValue):byte4"
    - type: "RESULT"
      name: "result"
      valueUuid: "byte4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "byte4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "defaultValue"
- method:
    name: "toByte"
    sourceCodeSignature: "byte toByte(final String str, final byte defaultValue)"
    returnType: "byte"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "defaultValue"
      type: "byte"
    instructionFingerprint: "3FFEC8DE69C9AB0AF5E10070E797DA70"
  paths:
  - testPathName: "toByte1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1355
      expression: "str == null"
      range: "(1355,13)-(1355,23)"
      evaluatedAs: true
  - testPathName: "toByte1WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "byte4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "defaultValue"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "byte4"
    branches:
    - lineNumber: 1355
      expression: "str == null"
      range: "(1355,13)-(1355,23)"
      evaluatedAs: false
  - testPathName: "toByte1WhenCaughtNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "byte"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1355
      expression: "str == null"
      range: "(1355,13)-(1355,23)"
      evaluatedAs: false
    - lineNumber: 1360
      expression: "catch-exception (NumberFormatException)"
      range: "(1360,11)-(1360,48)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 10
      catchExceptions:
      - "java.lang.NumberFormatException"
- method:
    name: "toDouble"
    sourceCodeSignature: "double toDouble(final BigDecimal value)"
    returnType: "double"
    parameters:
    - name: "value"
      type: "java.math.BigDecimal"
    instructionFingerprint: "31FD64D040C4901EEBA625E9FA1B42A6"
  paths:
  - testPathName: "toDoubleTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toDouble(value,defaultValue):double4"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "double4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "defaultValue"
- method:
    name: "toDouble"
    sourceCodeSignature: "double toDouble(final BigDecimal value, final double defaultValue)"
    returnType: "double"
    parameters:
    - name: "value"
      type: "java.math.BigDecimal"
    - name: "defaultValue"
      type: "double"
    instructionFingerprint: "D0BC494177A4E741EBBB9F24AC63DED9"
  paths:
  - testPathName: "toDouble1WhenValueIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.math.BigDecimal"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1403
      expression: "value == null"
      range: "(1403,16)-(1403,28)"
      evaluatedAs: true
  - testPathName: "toDouble1WhenValueIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.math.BigDecimal"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "defaultValue"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "double4"
    branches:
    - lineNumber: 1403
      expression: "value == null"
      range: "(1403,16)-(1403,28)"
      evaluatedAs: false
- method:
    name: "toDouble"
    sourceCodeSignature: "double toDouble(final String str)"
    returnType: "double"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "B37620B779AB58072FA8F0D482FC03A4"
  paths:
  - testPathName: "toDouble2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toDouble(str,defaultValue):double4"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "double4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "defaultValue"
- method:
    name: "toDouble"
    sourceCodeSignature: "double toDouble(final String str, final double defaultValue)"
    returnType: "double"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "defaultValue"
      type: "double"
    instructionFingerprint: "223383AEBE4DFA80DE6CEC1FE7ED81AD"
  paths:
  - testPathName: "toDouble3WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1448
      expression: "str == null"
      range: "(1448,11)-(1448,21)"
      evaluatedAs: true
  - testPathName: "toDouble3WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "double4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1.0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "defaultValue"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "double"
      uuid: "double4"
    branches:
    - lineNumber: 1448
      expression: "str == null"
      range: "(1448,11)-(1448,21)"
      evaluatedAs: false
  - testPathName: "toDouble3WhenCaughtNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1.0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "double"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1448
      expression: "str == null"
      range: "(1448,11)-(1448,21)"
      evaluatedAs: false
    - lineNumber: 1453
      expression: "catch-exception (NumberFormatException)"
      range: "(1453,9)-(1453,46)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 11
      catchExceptions:
      - "java.lang.NumberFormatException"
- method:
    name: "toFloat"
    sourceCodeSignature: "float toFloat(final String str)"
    returnType: "float"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "FC80317959CEEBDBA31AEDA149F7697B"
  paths:
  - testPathName: "toFloatTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toFloat(str,defaultValue):float4"
    - type: "RESULT"
      name: "result"
      valueUuid: "float4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "float4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "defaultValue"
- method:
    name: "toFloat"
    sourceCodeSignature: "float toFloat(final String str, final float defaultValue)"
    returnType: "float"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "defaultValue"
      type: "float"
    instructionFingerprint: "7CA4A497AA025AE5BFFEEE9DA89D8772"
  paths:
  - testPathName: "toFloat1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1500
      expression: "str == null"
      range: "(1500,11)-(1500,21)"
      evaluatedAs: true
  - testPathName: "toFloat1WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "float4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1.0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "defaultValue"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "float"
      uuid: "float4"
    branches:
    - lineNumber: 1500
      expression: "str == null"
      range: "(1500,11)-(1500,21)"
      evaluatedAs: false
  - testPathName: "toFloat1WhenCaughtNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "1.0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "float"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1500
      expression: "str == null"
      range: "(1500,11)-(1500,21)"
      evaluatedAs: false
    - lineNumber: 1505
      expression: "catch-exception (NumberFormatException)"
      range: "(1505,9)-(1505,46)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 12
      catchExceptions:
      - "java.lang.NumberFormatException"
- method:
    name: "toInt"
    sourceCodeSignature: "int toInt(final String str)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "B3A3363EDF0B4C8F3E4252D855D91BB1"
  paths:
  - testPathName: "toIntTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toInt(str,defaultValue):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "defaultValue"
- method:
    name: "toInt"
    sourceCodeSignature: "int toInt(final String str, final int defaultValue)"
    returnType: "int"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "defaultValue"
      type: "int"
    instructionFingerprint: "13C9279C4FB0A6EB4FA3BBFB9D958910"
  paths:
  - testPathName: "toInt1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1549
      expression: "str == null"
      range: "(1549,13)-(1549,23)"
      evaluatedAs: true
  - testPathName: "toInt1WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "defaultValue"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    branches:
    - lineNumber: 1549
      expression: "str == null"
      range: "(1549,13)-(1549,23)"
      evaluatedAs: false
  - testPathName: "toInt1WhenCaughtNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1549
      expression: "str == null"
      range: "(1549,13)-(1549,23)"
      evaluatedAs: false
    - lineNumber: 1554
      expression: "catch-exception (NumberFormatException)"
      range: "(1554,11)-(1554,48)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 13
      catchExceptions:
      - "java.lang.NumberFormatException"
- method:
    name: "toLong"
    sourceCodeSignature: "long toLong(final String str)"
    returnType: "long"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "97CBBCC430B54DE489A3F750D61C5410"
  paths:
  - testPathName: "toLongTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toLong(str,defaultValue):long6"
    - type: "RESULT"
      name: "result"
      valueUuid: "long6"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long6"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "defaultValue"
- method:
    name: "toLong"
    sourceCodeSignature: "long toLong(final String str, final long defaultValue)"
    returnType: "long"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "defaultValue"
      type: "long"
    instructionFingerprint: "0A6F0DF7F03C7429F125C6D9CE3260D0"
  paths:
  - testPathName: "toLong1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1598
      expression: "str == null"
      range: "(1598,13)-(1598,23)"
      evaluatedAs: true
  - testPathName: "toLong1WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "long6"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "defaultValue"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long6"
    branches:
    - lineNumber: 1598
      expression: "str == null"
      range: "(1598,13)-(1598,23)"
      evaluatedAs: false
  - testPathName: "toLong1WhenCaughtNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1598
      expression: "str == null"
      range: "(1598,13)-(1598,23)"
      evaluatedAs: false
    - lineNumber: 1603
      expression: "catch-exception (NumberFormatException)"
      range: "(1603,11)-(1603,48)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 14
      catchExceptions:
      - "java.lang.NumberFormatException"
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final BigDecimal value)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.math.BigDecimal"
    instructionFingerprint: "8C1A09DC2B850F2ED1BD33192260E4F1"
  paths:
  - testPathName: "toScaledBigDecimalTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toScaledBigDecimal(value,int1,Enum-java.math.RoundingMode-HALF_EVEN):bigDecimal"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int1"
    - sapientType: "ENUM"
      content: !<regular>
        value: "HALF_EVEN"
      valueType: "java.math.RoundingMode"
      uuid: "Enum-java.math.RoundingMode-HALF_EVEN"
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final BigDecimal value, final\
      \ int scale, final RoundingMode roundingMode)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.math.BigDecimal"
    - name: "scale"
      type: "int"
    - name: "roundingMode"
      type: "java.math.RoundingMode"
    instructionFingerprint: "42E471258A996D473B012FF01DB976F2"
  paths:
  - testPathName: "toScaledBigDecimal1WhenValueIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.math.BigDecimal"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UP"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1637
      expression: "value == null"
      range: "(1637,13)-(1637,25)"
      evaluatedAs: true
  - testPathName: "toScaledBigDecimal1WhenRoundingModeIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "java.math.BigDecimal"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "scale"
    - sapientType: "NULL"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1637
      expression: "value == null"
      range: "(1637,13)-(1637,25)"
      evaluatedAs: false
    - lineNumber: 1642
      expression: "roundingMode == null"
      range: "(1642,13)-(1642,32)"
      evaluatedAs: true
  - testPathName: "toScaledBigDecimal1WhenRoundingModeIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "java.math.BigDecimal"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "HALF_EVEN"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1.0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1637
      expression: "value == null"
      range: "(1637,13)-(1637,25)"
      evaluatedAs: false
    - lineNumber: 1642
      expression: "roundingMode == null"
      range: "(1642,13)-(1642,32)"
      evaluatedAs: false
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final Double value)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.lang.Double"
    instructionFingerprint: "BC3AC1D58EC99B2838BBDBBDC2040645"
  paths:
  - testPathName: "toScaledBigDecimal2Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toScaledBigDecimal(value,int1,Enum-java.math.RoundingMode-HALF_EVEN):bigDecimal"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int1"
    - sapientType: "ENUM"
      content: !<regular>
        value: "HALF_EVEN"
      valueType: "java.math.RoundingMode"
      uuid: "Enum-java.math.RoundingMode-HALF_EVEN"
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final Double value, final\
      \ int scale, final RoundingMode roundingMode)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.lang.Double"
    - name: "scale"
      type: "int"
    - name: "roundingMode"
      type: "java.math.RoundingMode"
    instructionFingerprint: "6F8AC9CE62672F72E386AA0BD25AD338"
  paths:
  - testPathName: "toScaledBigDecimal3WhenValueIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Double"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UP"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1675
      expression: "value == null"
      range: "(1675,13)-(1675,25)"
      evaluatedAs: true
  - testPathName: "toScaledBigDecimal3WhenValueIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toScaledBigDecimal(bigDecimal,scale,roundingMode):bigDecimal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Double"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UP"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1675
      expression: "value == null"
      range: "(1675,13)-(1675,25)"
      evaluatedAs: false
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final Float value)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.lang.Float"
    instructionFingerprint: "FC2912FAD0D10AC1153E88DFF6D97B0F"
  paths:
  - testPathName: "toScaledBigDecimal4Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toScaledBigDecimal(value,int1,Enum-java.math.RoundingMode-HALF_EVEN):bigDecimal"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Float"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int1"
    - sapientType: "ENUM"
      content: !<regular>
        value: "HALF_EVEN"
      valueType: "java.math.RoundingMode"
      uuid: "Enum-java.math.RoundingMode-HALF_EVEN"
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final Float value, final int\
      \ scale, final RoundingMode roundingMode)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.lang.Float"
    - name: "scale"
      type: "int"
    - name: "roundingMode"
      type: "java.math.RoundingMode"
    instructionFingerprint: "BDAEFDCD170DA43DB3178573E679729B"
  paths:
  - testPathName: "toScaledBigDecimal5WhenValueIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Float"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UP"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1714
      expression: "value == null"
      range: "(1714,13)-(1714,25)"
      evaluatedAs: true
  - testPathName: "toScaledBigDecimal5WhenValueIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toScaledBigDecimal(bigDecimal,scale,roundingMode):bigDecimal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.lang.Float"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UP"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0.0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1714
      expression: "value == null"
      range: "(1714,13)-(1714,25)"
      evaluatedAs: false
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final String value)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.lang.String"
    instructionFingerprint: "597F3E1AB7335B82626A39F1D39B9D0B"
  paths:
  - testPathName: "toScaledBigDecimal6Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toScaledBigDecimal(value,int1,Enum-java.math.RoundingMode-HALF_EVEN):bigDecimal"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "value1"
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int1"
    - sapientType: "ENUM"
      content: !<regular>
        value: "HALF_EVEN"
      valueType: "java.math.RoundingMode"
      uuid: "Enum-java.math.RoundingMode-HALF_EVEN"
- method:
    name: "toScaledBigDecimal"
    sourceCodeSignature: "BigDecimal toScaledBigDecimal(final String value, final\
      \ int scale, final RoundingMode roundingMode)"
    returnType: "java.math.BigDecimal"
    parameters:
    - name: "value"
      type: "java.lang.String"
    - name: "scale"
      type: "int"
    - name: "roundingMode"
      type: "java.math.RoundingMode"
    instructionFingerprint: "0849AC79489C6632136243E5C5A58750"
  paths:
  - testPathName: "toScaledBigDecimal7WhenValueIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UP"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    branches:
    - lineNumber: 1753
      expression: "value == null"
      range: "(1753,13)-(1753,25)"
      evaluatedAs: true
  - testPathName: "toScaledBigDecimal7WhenValueIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "value"
      valueUuid: "value"
    - type: "INPUT"
      name: "scale"
      valueUuid: "scale"
    - type: "INPUT"
      name: "roundingMode"
      valueUuid: "roundingMode"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "createBigDecimal(value):bigDecimal"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toScaledBigDecimal(bigDecimal,scale,roundingMode):bigDecimal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "bigDecimal2"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "value1"
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "scale"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UP"
      valueType: "java.math.RoundingMode"
      uuid: "roundingMode"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.math.BigDecimal"
      uuid: "bigDecimal2"
    branches:
    - lineNumber: 1753
      expression: "value == null"
      range: "(1753,13)-(1753,25)"
      evaluatedAs: false
- method:
    name: "toShort"
    sourceCodeSignature: "short toShort(final String str)"
    returnType: "short"
    parameters:
    - name: "str"
      type: "java.lang.String"
    instructionFingerprint: "42E75F58962BC77DBE4B3D018CB8E3EC"
  paths:
  - testPathName: "toShortTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "STATIC"
      name: "NumberUtils.class"
      valueUuid: "NumberUtils.class"
      methodExercised:
        expression: "toShort(str,defaultValue):short4"
    - type: "RESULT"
      name: "result"
      valueUuid: "short4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.math.NumberUtils"
      uuid: "NumberUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "short4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "defaultValue"
- method:
    name: "toShort"
    sourceCodeSignature: "short toShort(final String str, final short defaultValue)"
    returnType: "short"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "defaultValue"
      type: "short"
    instructionFingerprint: "E76712979558EDEE8790A7D179BE7D0E"
  paths:
  - testPathName: "toShort1WhenStrIsNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1802
      expression: "str == null"
      range: "(1802,13)-(1802,23)"
      evaluatedAs: true
  - testPathName: "toShort1WhenStrIsNotNull"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "short4"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "defaultValue"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "short4"
    branches:
    - lineNumber: 1802
      expression: "str == null"
      range: "(1802,13)-(1802,23)"
      evaluatedAs: false
  - testPathName: "toShort1WhenCaughtNumberFormatException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "defaultValue"
      valueUuid: "defaultValue"
    - type: "RESULT"
      name: "result"
      valueUuid: "defaultValue"
    disabled: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "0"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "short"
      uuid: "defaultValue"
    branches:
    - lineNumber: 1802
      expression: "str == null"
      range: "(1802,13)-(1802,23)"
      evaluatedAs: false
    - lineNumber: 1807
      expression: "catch-exception (NumberFormatException)"
      range: "(1807,11)-(1807,48)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 15
      catchExceptions:
      - "java.lang.NumberFormatException"
