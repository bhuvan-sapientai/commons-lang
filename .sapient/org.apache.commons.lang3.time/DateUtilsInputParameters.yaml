---
targetClass:
  fullClassName: "org.apache.commons.lang3.time.DateUtils"
methods:
- method:
    name: "addDays"
    sourceCodeSignature: "Date addDays(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "E89CED7DAFB64519734353F35B4E71AA"
  paths:
  - testPathName: "addDaysTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "addHours"
    sourceCodeSignature: "Date addHours(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "02429A9820E3D642B21B203B320F0BF8"
  paths:
  - testPathName: "addHoursTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "addMilliseconds"
    sourceCodeSignature: "Date addMilliseconds(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "E875D392A4D9152D0CA2F7F8B6B35993"
  paths:
  - testPathName: "addMillisecondsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "addMinutes"
    sourceCodeSignature: "Date addMinutes(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "2E2A5A63E37FE13EFAE066D30EF817AE"
  paths:
  - testPathName: "addMinutesTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "addMonths"
    sourceCodeSignature: "Date addMonths(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "ABCDE9E4FFB927C9879C2249A3D0A201"
  paths:
  - testPathName: "addMonthsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "addSeconds"
    sourceCodeSignature: "Date addSeconds(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "6ADF86E5F9EAC22C40D8212295884041"
  paths:
  - testPathName: "addSecondsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "addWeeks"
    sourceCodeSignature: "Date addWeeks(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "DF28DC895359D2805397A6889C5686EA"
  paths:
  - testPathName: "addWeeksTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "addYears"
    sourceCodeSignature: "Date addYears(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "499B5016A061612D200FCE8FB3C80A53"
  paths:
  - testPathName: "addYearsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "ceiling"
    sourceCodeSignature: "Calendar ceiling(final Calendar calendar, final int field)"
    returnType: "java.util.Calendar"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "field"
      type: "int"
    instructionFingerprint: "83D34E60970885F494DDD99A78206ABE"
  paths:
  - testPathName: "ceilingWhenValGetCalendarYEARGreaterThan280000000ThrowsArithmeticException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "arithmeticException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ArithmeticException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Calendar value too large for accurate calculations"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.ArithmeticException"
      uuid: "arithmeticException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceilingWhenFieldEqualsCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "field"
    - sapientType: "NOT_NULL"
      valueType: "java.util.Calendar"
      uuid: "objectNotNull"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceilingWhenFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "object"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceilingWhenFieldNotEqualsSEMI_MONTHAndFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "object"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "ceiling"
    sourceCodeSignature: "Date ceiling(final Date date, final int field)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "field"
      type: "int"
    instructionFingerprint: "5AC20D8885544C7197DBE0610E1F382E"
  paths:
  - testPathName: "ceiling1WhenFieldEqualsCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceiling1WhenFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date4"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceiling1WhenFieldNotEqualsSEMI_MONTHAndFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date4"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceiling1WhenOffsetGreaterThanMaxMinusMinDividedBy2AndOffsetNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1001
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The field 1001 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "minutes < 30"
      range: "(1133,57)-(1133,68)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = Calendar.AM_PM"
      range: "(1202,22)-(1202,35)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1187
      expression: "aField[0] == Calendar.DATE"
      range: "(1187,25)-(1187,50)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceiling1WhenNotOffsetSetAndOffsetGreaterThanMaxMinusMinDividedBy2AndOffsetNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 9
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The field 9 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "minutes < 30"
      range: "(1133,57)-(1133,68)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = SEMI_MONTH"
      range: "(1186,22)-(1186,31)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1203
      expression: "aField[0] == Calendar.HOUR_OF_DAY"
      range: "(1203,25)-(1203,57)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "ceiling1WhenModTypeEqualsModifyTypeCEILINGAndFieldNotEqualsSEMI_MONTHAndFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 11
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date4"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "minutes < 30"
      range: "(1133,57)-(1133,68)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "ceiling"
    sourceCodeSignature: "Date ceiling(final Object date, final int field)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.lang.Object"
    - name: "field"
      type: "int"
    instructionFingerprint: "D4040B4EE31E4744A0D95E5BD236DA2B"
  paths:
  - testPathName: "ceiling2WhenDateInstanceOfDate"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "ceiling(date,field):date2"
    - type: "RESULT"
      name: "result"
      valueUuid: "date2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    branches:
    - lineNumber: 378
      expression: "date instanceof Date"
      range: "(378,13)-(378,32)"
      evaluatedAs: true
  - testPathName: "ceiling2WhenDateInstanceOfCalendar"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "ceiling(date,field):calendar"
    - type: "RESULT"
      name: "result"
      valueUuid: "date2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.getTime() : java.util.Date"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    branches:
    - lineNumber: 378
      expression: "date instanceof Date"
      range: "(378,13)-(378,32)"
      evaluatedAs: false
    - lineNumber: 381
      expression: "date instanceof Calendar"
      range: "(381,13)-(381,36)"
      evaluatedAs: true
  - testPathName: "ceiling2WhenDateNotInstanceOfCalendarThrowsClassCastException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "classCastException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ClassCastException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not find ceiling of for type: "
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.ClassCastException"
      uuid: "classCastException"
    branches:
    - lineNumber: 378
      expression: "date instanceof Date"
      range: "(378,13)-(378,32)"
      evaluatedAs: false
    - lineNumber: 381
      expression: "date instanceof Calendar"
      range: "(381,13)-(381,36)"
      evaluatedAs: false
- method:
    name: "getFragmentInDays"
    sourceCodeSignature: "long getFragmentInDays(final Calendar calendar, final int\
      \ fragment)"
    returnType: "long"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "DC718BD3776DDAD4FE2607F05646F930"
  paths:
  - testPathName: "getFragmentInDaysWhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInDaysWhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 247
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInDaysWhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInDays"
    sourceCodeSignature: "long getFragmentInDays(final Date date, final int fragment)"
    returnType: "long"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "42371CBD7536F6D9466AEA41496A5AE0"
  paths:
  - testPathName: "getFragmentInDays1WhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "calendar.setTime(date);"
      lineNumber: 454
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: calendar - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInDays1WhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 247
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInDays1WhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInHours"
    sourceCodeSignature: "long getFragmentInHours(final Calendar calendar, final int\
      \ fragment)"
    returnType: "long"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "6E7FEE4D376444D5D2AF712715934B39"
  paths:
  - testPathName: "getFragmentInHoursWhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInHoursWhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5920
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInHoursWhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInHours"
    sourceCodeSignature: "long getFragmentInHours(final Date date, final int fragment)"
    returnType: "long"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "C9BF0240D415196E4409267C9ABE2CE8"
  paths:
  - testPathName: "getFragmentInHours1WhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "calendar.setTime(date);"
      lineNumber: 454
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: calendar - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInHours1WhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5920
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInHours1WhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInMilliseconds"
    sourceCodeSignature: "long getFragmentInMilliseconds(final Calendar calendar,\
      \ final int fragment)"
    returnType: "long"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "475B9FAA026EE0A579E0721D3A1D31FD"
  paths:
  - testPathName: "getFragmentInMillisecondsWhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMillisecondsWhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 21312647867
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMillisecondsWhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInMilliseconds"
    sourceCodeSignature: "long getFragmentInMilliseconds(final Date date, final int\
      \ fragment)"
    returnType: "long"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "D35D6DCF5D883E576DCDD927E5577F32"
  paths:
  - testPathName: "getFragmentInMilliseconds1WhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "calendar.setTime(date);"
      lineNumber: 454
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: calendar - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMilliseconds1WhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 21312647876
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMilliseconds1WhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInMinutes"
    sourceCodeSignature: "long getFragmentInMinutes(final Calendar calendar, final\
      \ int fragment)"
    returnType: "long"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "E8B6195056BF8BAD607C05E106F5ADF0"
  paths:
  - testPathName: "getFragmentInMinutesWhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMinutesWhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 355210
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMinutesWhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInMinutes"
    sourceCodeSignature: "long getFragmentInMinutes(final Date date, final int fragment)"
    returnType: "long"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "EBC2B70BE263D6C2C19B32E6190F88B6"
  paths:
  - testPathName: "getFragmentInMinutes1WhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "calendar.setTime(date);"
      lineNumber: 454
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: calendar - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMinutes1WhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 355210
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInMinutes1WhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInSeconds"
    sourceCodeSignature: "long getFragmentInSeconds(final Calendar calendar, final\
      \ int fragment)"
    returnType: "long"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "2EFEFA2737FFF02BE5F21E203FEA1972"
  paths:
  - testPathName: "getFragmentInSecondsWhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInSecondsWhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 21312647
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInSecondsWhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "getFragmentInSeconds"
    sourceCodeSignature: "long getFragmentInSeconds(final Date date, final int fragment)"
    returnType: "long"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "fragment"
      type: "int"
    instructionFingerprint: "BBB35C7CE0334F253A6BEA8F3083514E"
  paths:
  - testPathName: "getFragmentInSeconds1WhenSwitchFragmentCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "calendar.setTime(date);"
      lineNumber: 454
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: calendar - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "fragment"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The fragment 2 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.MONTH"
      range: "(408,18)-(408,31)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = default"
      range: "(435,17)-(435,23)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInSeconds1WhenSwitchFragmentCaseCalendarYEARAndSwitchFragmentCaseCalendarYEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long21"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 21312647
      valueType: "long"
      uuid: "long21"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = Calendar.YEAR"
      range: "(405,18)-(405,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.YEAR or switch(fragment) = Calendar.MONTH\
        \ or switch(fragment) = Calendar.DAY_OF_YEAR or switch(fragment) = Calendar.DATE"
      range: "(422,18)-(422,30)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "getFragmentInSeconds1WhenSwitchFragmentCaseCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "fragment"
      valueUuid: "fragment"
    - type: "RESULT"
      name: "result"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "fragment"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    branches:
    - lineNumber: 401
      expression: "unit == TimeUnit.DAYS"
      range: "(401,29)-(401,49)"
      evaluatedAs: false
      internalMethodName: "getFragment"
    - lineNumber: 404
      expression: "switch(fragment) = default"
      range: "(411,13)-(411,19)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    - lineNumber: 415
      expression: "switch(fragment) = Calendar.MILLISECOND"
      range: "(434,18)-(434,37)"
      evaluatedAs: true
      internalMethodName: "getFragment"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "isSameDay"
    sourceCodeSignature: "boolean isSameDay(final Calendar cal1, final Calendar cal2)"
    returnType: "boolean"
    parameters:
    - name: "cal1"
      type: "java.util.Calendar"
    - name: "cal2"
      type: "java.util.Calendar"
    instructionFingerprint: "A7C771EEA4CE223E44FCC6BCB724FFA9"
  paths:
  - testPathName: "isSameDayWhenCal1GetCalendarDAY_OF_YEAREqualsCal2GetCalendarDAY_OF_YEAR"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 853
      expression: "cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)"
      range: "(853,16)-(853,63)"
      evaluatedAs: true
    - lineNumber: 854
      expression: "cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)"
      range: "(854,17)-(854,66)"
      evaluatedAs: true
    - lineNumber: 855
      expression: "cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)"
      range: "(855,17)-(855,80)"
      evaluatedAs: true
  - testPathName: "isSameDayWhenCal1GetCalendarDAY_OF_YEARNotEqualsCal2GetCalendarDAY_OF_YEAR"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 853
      expression: "cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)"
      range: "(853,16)-(853,63)"
      evaluatedAs: true
    - lineNumber: 854
      expression: "cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)"
      range: "(854,17)-(854,66)"
      evaluatedAs: true
    - lineNumber: 855
      expression: "cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)"
      range: "(855,17)-(855,80)"
      evaluatedAs: false
- method:
    name: "isSameDay"
    sourceCodeSignature: "boolean isSameDay(final Date date1, final Date date2)"
    returnType: "boolean"
    parameters:
    - name: "date1"
      type: "java.util.Date"
    - name: "date2"
      type: "java.util.Date"
    instructionFingerprint: "7B4CD575209AF94FCD7FB609A9B3C083"
  paths:
  - testPathName: "isSameDay1WhenIsSameDayToCalendarDate1ToCalendarDate2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date1"
      valueUuid: "date1"
    - type: "INPUT"
      name: "date2"
      valueUuid: "date2"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "isSameDay(calendar,calendar2):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar2"
    branches:
    - lineNumber: 872
      expression: "isSameDay(toCalendar(date1), toCalendar(date2))"
      range: "(872,16)-(872,62)"
      evaluatedAs: true
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "isSameDay1WhenIsSameDayNotToCalendarDate1ToCalendarDate2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date1"
      valueUuid: "date1"
    - type: "INPUT"
      name: "date2"
      valueUuid: "date2"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "isSameDay(calendar,calendar2):boolean1"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar2"
    branches:
    - lineNumber: 872
      expression: "isSameDay(toCalendar(date1), toCalendar(date2))"
      range: "(872,16)-(872,62)"
      evaluatedAs: false
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "isSameInstant"
    sourceCodeSignature: "boolean isSameInstant(final Calendar cal1, final Calendar\
      \ cal2)"
    returnType: "boolean"
    parameters:
    - name: "cal1"
      type: "java.util.Calendar"
    - name: "cal2"
      type: "java.util.Calendar"
    instructionFingerprint: "1FAAD57C6825CB802F27D05E9BADE406"
  paths:
  - testPathName: "isSameInstantWhenCal1GetTimeGetTimeEqualsCal2GetTimeGetTime"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.getTime() : java.util.Date"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 889
      expression: "cal1.getTime().getTime() == cal2.getTime().getTime()"
      range: "(889,16)-(889,67)"
      evaluatedAs: true
  - testPathName: "isSameInstantWhenCal1GetTimeGetTimeNotEqualsCal2GetTimeGetTime"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.getTime() : java.util.Date"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 889
      expression: "cal1.getTime().getTime() == cal2.getTime().getTime()"
      range: "(889,16)-(889,67)"
      evaluatedAs: false
- method:
    name: "isSameInstant"
    sourceCodeSignature: "boolean isSameInstant(final Date date1, final Date date2)"
    returnType: "boolean"
    parameters:
    - name: "date1"
      type: "java.util.Date"
    - name: "date2"
      type: "java.util.Date"
    instructionFingerprint: "62470038D10B8ED0029578E905E7EF05"
  paths:
  - testPathName: "isSameInstant1WhenDate1GetTimeEqualsDate2GetTime"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date1"
      valueUuid: "date1"
    - type: "INPUT"
      name: "date2"
      valueUuid: "date2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 906
      expression: "date1.getTime() == date2.getTime()"
      range: "(906,16)-(906,49)"
      evaluatedAs: true
  - testPathName: "isSameInstant1WhenDate1GetTimeNotEqualsDate2GetTime"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date1"
      valueUuid: "date1"
    - type: "INPUT"
      name: "date2"
      valueUuid: "date2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 906
      expression: "date1.getTime() == date2.getTime()"
      range: "(906,16)-(906,49)"
      evaluatedAs: false
- method:
    name: "isSameLocalTime"
    sourceCodeSignature: "boolean isSameLocalTime(final Calendar cal1, final Calendar\
      \ cal2)"
    returnType: "boolean"
    parameters:
    - name: "cal1"
      type: "java.util.Calendar"
    - name: "cal2"
      type: "java.util.Calendar"
    instructionFingerprint: "42688EC18183227B09AA4C9D2BD5D8D4"
  paths:
  - testPathName: "isSameLocalTimeWhenCal1GetClassEqualsCal2GetClass"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 924
      expression: "cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)"
      range: "(924,16)-(924,79)"
      evaluatedAs: true
    - lineNumber: 925
      expression: "cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND)"
      range: "(925,17)-(925,70)"
      evaluatedAs: true
    - lineNumber: 926
      expression: "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)"
      range: "(926,17)-(926,70)"
      evaluatedAs: true
    - lineNumber: 927
      expression: "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)"
      range: "(927,17)-(927,80)"
      evaluatedAs: true
    - lineNumber: 928
      expression: "cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)"
      range: "(928,17)-(928,80)"
      evaluatedAs: true
    - lineNumber: 929
      expression: "cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)"
      range: "(929,17)-(929,66)"
      evaluatedAs: true
    - lineNumber: 930
      expression: "cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)"
      range: "(930,17)-(930,64)"
      evaluatedAs: true
    - lineNumber: 931
      expression: "cal1.getClass() == cal2.getClass()"
      range: "(931,17)-(931,50)"
      evaluatedAs: true
  - testPathName: "isSameLocalTimeWhenCal1GetClassNotEqualsCal2GetClass"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 924
      expression: "cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)"
      range: "(924,16)-(924,79)"
      evaluatedAs: true
    - lineNumber: 925
      expression: "cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND)"
      range: "(925,17)-(925,70)"
      evaluatedAs: true
    - lineNumber: 926
      expression: "cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE)"
      range: "(926,17)-(926,70)"
      evaluatedAs: true
    - lineNumber: 927
      expression: "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)"
      range: "(927,17)-(927,80)"
      evaluatedAs: true
    - lineNumber: 928
      expression: "cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)"
      range: "(928,17)-(928,80)"
      evaluatedAs: true
    - lineNumber: 929
      expression: "cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)"
      range: "(929,17)-(929,66)"
      evaluatedAs: true
    - lineNumber: 930
      expression: "cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)"
      range: "(930,17)-(930,64)"
      evaluatedAs: true
    - lineNumber: 931
      expression: "cal1.getClass() == cal2.getClass()"
      range: "(931,17)-(931,50)"
      evaluatedAs: false
- method:
    name: "iterator"
    sourceCodeSignature: "Iterator<Calendar> iterator(final Calendar calendar, final\
      \ int rangeStyle)"
    returnType: "java.util.Iterator"
    genericReturnType: "java.util.Calendar"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "rangeStyle"
      type: "int"
    instructionFingerprint: "53CB5C2D1AC9AAFDAF7CF26B69F662C7"
  paths:
  - testPathName: "iteratorWhenSwitchRangeStyleCaseDefaultThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "rangeStyle"
      valueUuid: "rangeStyle"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 8
      valueType: "int"
      uuid: "rangeStyle"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The range style 8 is not valid."
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 964
      expression: "switch(rangeStyle) = default"
      range: "(1006,13)-(1006,19)"
      evaluatedAs: true
  - testPathName: "iteratorWhenEndGetCalendarDAY_OF_WEEKNotEqualsEndCutoff"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "rangeStyle"
      valueUuid: "rangeStyle"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(calendar,field5):calendar3"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(calendar,field6):calendar4"
    - type: "RESULT"
      name: "result"
      valueUuid: "dateUtilsDateIterator"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.get(int) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "rangeStyle"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar3"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "field5"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar4"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "field6"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.time.DateUtils$DateIterator"
        parameters:
        - name: "startFinal"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.util.Calendar"
              method: "getInstance"
              methodParameters: []
            valueType: "java.util.Calendar"
            uuid: "calendar3"
        - name: "endFinal"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.util.Calendar"
              method: "getInstance"
              methodParameters: []
            valueType: "java.util.Calendar"
            uuid: "calendar4"
      valueType: "org.apache.commons.lang3.time.DateUtils$DateIterator"
      uuid: "dateUtilsDateIterator"
    branches:
    - lineNumber: 964
      expression: "switch(rangeStyle) = RANGE_MONTH_SUNDAY or switch(rangeStyle) =\
        \ RANGE_MONTH_MONDAY"
      range: "(966,18)-(966,35)"
      evaluatedAs: true
    - lineNumber: 986
      expression: "switch(rangeStyle) = RANGE_WEEK_SUNDAY"
      range: "(987,26)-(987,42)"
      evaluatedAs: true
    - lineNumber: 1009
      expression: "startCutoff < Calendar.SUNDAY"
      range: "(1009,13)-(1009,41)"
      evaluatedAs: false
    - lineNumber: 1012
      expression: "startCutoff > Calendar.SATURDAY"
      range: "(1012,13)-(1012,43)"
      evaluatedAs: false
    - lineNumber: 1015
      expression: "endCutoff < Calendar.SUNDAY"
      range: "(1015,13)-(1015,39)"
      evaluatedAs: false
    - lineNumber: 1018
      expression: "endCutoff > Calendar.SATURDAY"
      range: "(1018,13)-(1018,41)"
      evaluatedAs: false
    - lineNumber: 1021
      expression: "start.get(Calendar.DAY_OF_WEEK) != startCutoff"
      range: "(1021,16)-(1021,61)"
      evaluatedAs: true
    - lineNumber: 1024
      expression: "end.get(Calendar.DAY_OF_WEEK) != endCutoff"
      range: "(1024,16)-(1024,57)"
      evaluatedAs: true
  - testPathName: "iteratorWhenStartGetCalendarDAY_OF_WEEKNotEqualsStartCutoffAndEndGetCalendarDAY_OF_WEEKNotEqualsEndCutoff"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "rangeStyle"
      valueUuid: "rangeStyle"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(calendar,field5):calendar3"
    - type: "RESULT"
      name: "result"
      valueUuid: "dateUtilsDateIterator"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 5
      valueType: "int"
      uuid: "rangeStyle"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar3"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "field5"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.lang3.time.DateUtils$DateIterator"
        parameters:
        - name: "startFinal"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.util.Calendar"
              method: "getInstance"
              methodParameters: []
            valueType: "java.util.Calendar"
            uuid: "calendar3"
        - name: "endFinal"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.util.Calendar"
              method: "getInstance"
              methodParameters: []
            valueType: "java.util.Calendar"
            uuid: "object"
      valueType: "org.apache.commons.lang3.time.DateUtils$DateIterator"
      uuid: "dateUtilsDateIterator"
    branches:
    - lineNumber: 964
      expression: "switch(rangeStyle) = RANGE_WEEK_SUNDAY or switch(rangeStyle) =\
        \ RANGE_WEEK_MONDAY or switch(rangeStyle) = RANGE_WEEK_RELATIVE or switch(rangeStyle)\
        \ = RANGE_WEEK_CENTER"
      range: "(982,18)-(982,34)"
      evaluatedAs: true
    - lineNumber: 974
      expression: "rangeStyle == RANGE_MONTH_MONDAY"
      range: "(974,21)-(974,52)"
      evaluatedAs: false
    - lineNumber: 1009
      expression: "startCutoff < Calendar.SUNDAY"
      range: "(1009,13)-(1009,41)"
      evaluatedAs: false
    - lineNumber: 1012
      expression: "startCutoff > Calendar.SATURDAY"
      range: "(1012,13)-(1012,43)"
      evaluatedAs: false
    - lineNumber: 1015
      expression: "endCutoff < Calendar.SUNDAY"
      range: "(1015,13)-(1015,39)"
      evaluatedAs: false
    - lineNumber: 1018
      expression: "endCutoff > Calendar.SATURDAY"
      range: "(1018,13)-(1018,41)"
      evaluatedAs: false
    - lineNumber: 1021
      expression: "start.get(Calendar.DAY_OF_WEEK) != startCutoff"
      range: "(1021,16)-(1021,61)"
      evaluatedAs: true
    - lineNumber: 1024
      expression: "end.get(Calendar.DAY_OF_WEEK) != endCutoff"
      range: "(1024,16)-(1024,57)"
      evaluatedAs: true
- method:
    name: "iterator"
    sourceCodeSignature: "Iterator<Calendar> iterator(final Date focus, final int\
      \ rangeStyle)"
    returnType: "java.util.Iterator"
    genericReturnType: "java.util.Calendar"
    parameters:
    - name: "focus"
      type: "java.util.Date"
    - name: "rangeStyle"
      type: "int"
    instructionFingerprint: "14541B97EB85E29B93C9666534B9C9AA"
  paths:
  - testPathName: "iterator1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "focus"
      valueUuid: "focus"
    - type: "INPUT"
      name: "rangeStyle"
      valueUuid: "rangeStyle"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "iterator(calendar,rangeStyle):iterator"
    - type: "RESULT"
      name: "result"
      valueUuid: "iteratorNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "focus"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "rangeStyle"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.util.Calendar"
          uuid: "iteratorCollection"
      valueType: "java.util.Iterator"
      genericValueType: "java.util.Calendar"
      uuid: "iterator"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "NOT_NULL"
      valueType: "java.util.Iterator"
      genericValueType: "java.util.Calendar"
      uuid: "iteratorNotNull"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "iterator"
    sourceCodeSignature: "Iterator<?> iterator(final Object calendar, final int rangeStyle)"
    returnType: "java.util.Iterator"
    genericReturnType: "?"
    parameters:
    - name: "calendar"
      type: "java.lang.Object"
    - name: "rangeStyle"
      type: "int"
    instructionFingerprint: "AFD090F02DDC05FF026C4DCFB98886ED"
  paths:
  - testPathName: "iterator2WhenCalendarInstanceOfDate"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "rangeStyle"
      valueUuid: "rangeStyle"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "iterator(calendar,rangeStyle):iterator"
    - type: "RESULT"
      name: "result"
      valueUuid: "iteratorNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "rangeStyle"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.util.Calendar"
          uuid: "iteratorCollection"
      valueType: "java.util.Iterator"
      genericValueType: "java.util.Calendar"
      uuid: "iterator"
    - sapientType: "NOT_NULL"
      valueType: "java.util.Iterator"
      genericValueType: "java.util.Calendar"
      uuid: "iteratorNotNull"
    branches:
    - lineNumber: 1076
      expression: "calendar instanceof Date"
      range: "(1076,13)-(1076,36)"
      evaluatedAs: true
  - testPathName: "iterator2WhenCalendarInstanceOfCalendar"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "rangeStyle"
      valueUuid: "rangeStyle"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "iterator(calendar,rangeStyle):iterator"
    - type: "RESULT"
      name: "result"
      valueUuid: "iteratorNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "rangeStyle"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.util.Calendar"
          uuid: "iteratorCollection"
      valueType: "java.util.Iterator"
      genericValueType: "java.util.Calendar"
      uuid: "iterator"
    - sapientType: "NOT_NULL"
      valueType: "java.util.Iterator"
      genericValueType: "java.util.Calendar"
      uuid: "iteratorNotNull"
    branches:
    - lineNumber: 1076
      expression: "calendar instanceof Date"
      range: "(1076,13)-(1076,36)"
      evaluatedAs: false
    - lineNumber: 1079
      expression: "calendar instanceof Calendar"
      range: "(1079,13)-(1079,40)"
      evaluatedAs: true
  - testPathName: "iterator2WhenCalendarNotInstanceOfCalendarThrowsClassCastException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "rangeStyle"
      valueUuid: "rangeStyle"
    - type: "RESULT"
      name: "result"
      valueUuid: "classCastException"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "calendar"
      nameForMock: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "rangeStyle"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ClassCastException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not iterate based on calendar"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.ClassCastException"
      uuid: "classCastException"
    branches:
    - lineNumber: 1076
      expression: "calendar instanceof Date"
      range: "(1076,13)-(1076,36)"
      evaluatedAs: false
    - lineNumber: 1079
      expression: "calendar instanceof Calendar"
      range: "(1079,13)-(1079,40)"
      evaluatedAs: false
- method:
    name: "parseDate"
    sourceCodeSignature: "Date parseDate(final String str, final Locale locale, final\
      \ String... parsePatterns)"
    returnType: "java.util.Date"
    throwsExceptions:
    - "java.text.ParseException"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "locale"
      type: "java.util.Locale"
    - name: "parsePatterns"
      type: "java.lang.String[]"
    instructionFingerprint: "55DFB74447BD8EEDF29D9A899CB4D75A"
  paths:
  - testPathName: "parseDateWhenPosGetIndexEqualsDateStrLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "RESULT"
      name: "result"
      valueUuid: "date"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.LocaleUtils.toLocale(java.util.Locale)\
        \ : java.util.Locale"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "parsePatternsItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    branches:
    - lineNumber: 1342
      expression: "for-each(parsePatterns)"
      range: "(1342,42)-(1342,54)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "fdp.parse(dateStr, pos, calendar)"
      range: "(1346,21)-(1346,53)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "pos.getIndex() == dateStr.length()"
      range: "(1346,58)-(1346,91)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "parseDateWhenPosGetIndexNotEqualsDateStrLengthThrowsParseException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "RESULT"
      name: "result"
      valueUuid: "parseException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.LocaleUtils.toLocale(java.util.Locale)\
        \ : java.util.Locale"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "parsePatternsItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.text.ParseException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to parse the date: A"
            valueType: "java.lang.String"
            uuid: "string3"
        - name: "errorOffset"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "errorOffset"
      valueType: "java.text.ParseException"
      uuid: "parseException"
    branches:
    - lineNumber: 1342
      expression: "for-each(parsePatterns)"
      range: "(1342,42)-(1342,54)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "fdp.parse(dateStr, pos, calendar)"
      range: "(1346,21)-(1346,53)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "pos.getIndex() == dateStr.length()"
      range: "(1346,58)-(1346,91)"
      evaluatedAs: false
      internalMethodName: "parseDateWithLeniency"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "parseDateWhenCaughtIllegalArgumentExceptionThrowsParseException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "RESULT"
      name: "result"
      valueUuid: "parseException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.LocaleUtils.toLocale(java.util.Locale)\
        \ : java.util.Locale"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "parsePatternsItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.text.ParseException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to parse the date: "
            valueType: "java.lang.String"
            uuid: "string3"
        - name: "errorOffset"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "errorOffset"
      valueType: "java.text.ParseException"
      uuid: "parseException"
    branches:
    - lineNumber: 1342
      expression: "for-each(parsePatterns)"
      range: "(1342,42)-(1342,54)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "fdp.parse(dateStr, pos, calendar)"
      range: "(1346,21)-(1346,53)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "pos.getIndex() == dateStr.length()"
      range: "(1346,58)-(1346,91)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1349
      expression: "catch-exception (IllegalArgumentException)"
      range: "(1349,15)-(1349,59)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
    catchBlockExercised:
      idExternalInstruction: 6
      id: 1
      catchExceptions:
      - "java.lang.IllegalArgumentException"
- method:
    name: "parseDate"
    sourceCodeSignature: "Date parseDate(final String str, final String... parsePatterns)"
    returnType: "java.util.Date"
    throwsExceptions:
    - "java.text.ParseException"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "parsePatterns"
      type: "java.lang.String[]"
    instructionFingerprint: "3E9088501D35CC3A9C18E99ACEDD3D12"
  paths:
  - testPathName: "parseDate1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "parseDate(str,locale,parsePatterns):date"
    - type: "RESULT"
      name: "result"
      valueUuid: "date"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "NULL"
      valueType: "java.util.Locale"
      uuid: "locale"
- method:
    name: "parseDateStrictly"
    sourceCodeSignature: "Date parseDateStrictly(final String str, final Locale locale,\
      \ final String... parsePatterns)"
    returnType: "java.util.Date"
    throwsExceptions:
    - "java.text.ParseException"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "locale"
      type: "java.util.Locale"
    - name: "parsePatterns"
      type: "java.lang.String[]"
    instructionFingerprint: "F81A2CFC7460C9AEFCB999E320CDB907"
  paths:
  - testPathName: "parseDateStrictlyWhenPosGetIndexEqualsDateStrLength"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "RESULT"
      name: "result"
      valueUuid: "date"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.LocaleUtils.toLocale(java.util.Locale)\
        \ : java.util.Locale"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "parsePatternsItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    branches:
    - lineNumber: 1342
      expression: "for-each(parsePatterns)"
      range: "(1342,42)-(1342,54)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "fdp.parse(dateStr, pos, calendar)"
      range: "(1346,21)-(1346,53)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "pos.getIndex() == dateStr.length()"
      range: "(1346,58)-(1346,91)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "parseDateStrictlyWhenPosGetIndexNotEqualsDateStrLengthThrowsParseException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "RESULT"
      name: "result"
      valueUuid: "parseException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.LocaleUtils.toLocale(java.util.Locale)\
        \ : java.util.Locale"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "parsePatternsItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.text.ParseException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to parse the date: A"
            valueType: "java.lang.String"
            uuid: "string3"
        - name: "errorOffset"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "errorOffset"
      valueType: "java.text.ParseException"
      uuid: "parseException"
    branches:
    - lineNumber: 1342
      expression: "for-each(parsePatterns)"
      range: "(1342,42)-(1342,54)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "fdp.parse(dateStr, pos, calendar)"
      range: "(1346,21)-(1346,53)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "pos.getIndex() == dateStr.length()"
      range: "(1346,58)-(1346,91)"
      evaluatedAs: false
      internalMethodName: "parseDateWithLeniency"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "parseDateStrictlyWhenCaughtIllegalArgumentExceptionThrowsParseException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "locale"
      valueUuid: "locale"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "RESULT"
      name: "result"
      valueUuid: "parseException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.commons.lang3.LocaleUtils.toLocale(java.util.Locale)\
        \ : java.util.Locale"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "parsePatternsItem1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.text.ParseException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to parse the date: "
            valueType: "java.lang.String"
            uuid: "string3"
        - name: "errorOffset"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "errorOffset"
      valueType: "java.text.ParseException"
      uuid: "parseException"
    branches:
    - lineNumber: 1342
      expression: "for-each(parsePatterns)"
      range: "(1342,42)-(1342,54)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "fdp.parse(dateStr, pos, calendar)"
      range: "(1346,21)-(1346,53)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1346
      expression: "pos.getIndex() == dateStr.length()"
      range: "(1346,58)-(1346,91)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    - lineNumber: 1349
      expression: "catch-exception (IllegalArgumentException)"
      range: "(1349,15)-(1349,59)"
      evaluatedAs: true
      internalMethodName: "parseDateWithLeniency"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
    catchBlockExercised:
      idExternalInstruction: 6
      id: 1
      catchExceptions:
      - "java.lang.IllegalArgumentException"
- method:
    name: "parseDateStrictly"
    sourceCodeSignature: "Date parseDateStrictly(final String str, final String...\
      \ parsePatterns)"
    returnType: "java.util.Date"
    throwsExceptions:
    - "java.text.ParseException"
    parameters:
    - name: "str"
      type: "java.lang.String"
    - name: "parsePatterns"
      type: "java.lang.String[]"
    instructionFingerprint: "C495F96B39B13264831C4C0F2B4A0F7F"
  paths:
  - testPathName: "parseDateStrictly1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "str"
      valueUuid: "str"
    - type: "INPUT"
      name: "parsePatterns"
      valueUuid: "parsePatterns"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "parseDateStrictly(str,locale,parsePatterns):date"
    - type: "RESULT"
      name: "result"
      valueUuid: "date"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "str"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "parsePatterns"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "NULL"
      valueType: "java.util.Locale"
      uuid: "locale"
- method:
    name: "round"
    sourceCodeSignature: "Calendar round(final Calendar calendar, final int field)"
    returnType: "java.util.Calendar"
    parameters:
    - name: "calendar"
      type: "java.util.Calendar"
    - name: "field"
      type: "int"
    instructionFingerprint: "356F808E52332701C5AC946A637E0ECD"
  paths:
  - testPathName: "roundWhenValGetCalendarYEARGreaterThan280000000ThrowsArithmeticException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "arithmeticException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ArithmeticException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Calendar value too large for accurate calculations"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.ArithmeticException"
      uuid: "arithmeticException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "roundWhenFieldEqualsCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "field"
    - sapientType: "NOT_NULL"
      valueType: "java.util.Calendar"
      uuid: "objectNotNull"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "roundWhenFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "object"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "roundUp"
      range: "(1149,89)-(1149,95)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "roundWhenFieldNotEqualsSEMI_MONTHAndFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "calendar"
      valueUuid: "calendar"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "object"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "roundUp"
      range: "(1149,89)-(1149,95)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "round"
    sourceCodeSignature: "Date round(final Date date, final int field)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "field"
      type: "int"
    instructionFingerprint: "777DF8829345B9D57FE9B065A90DBA77"
  paths:
  - testPathName: "round1WhenFieldEqualsCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "round1WhenOffsetNotGreaterThanMaxMinusMinDividedBy2AndOffsetEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1001
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The field 1001 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "minutes < 30"
      range: "(1133,57)-(1133,68)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = Calendar.AM_PM"
      range: "(1202,22)-(1202,35)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1187
      expression: "aField[0] == Calendar.DATE"
      range: "(1187,25)-(1187,50)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "round1WhenFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date4"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date4"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "roundUp"
      range: "(1149,89)-(1149,95)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "round1WhenOffsetNotEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 9
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The field 9 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "minutes < 30"
      range: "(1133,57)-(1133,68)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = SEMI_MONTH"
      range: "(1186,22)-(1186,31)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1203
      expression: "aField[0] == Calendar.HOUR_OF_DAY"
      range: "(1203,25)-(1203,57)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "round1WhenFieldNotEqualsSEMI_MONTHAndFieldNotEqualsCalendarAM_PM"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date4"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date4"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "millisecs < 500"
      range: "(1115,47)-(1115,61)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "seconds < 30"
      range: "(1124,57)-(1124,68)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "roundUp"
      range: "(1149,89)-(1149,95)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1150
      expression: "field == SEMI_MONTH"
      range: "(1150,29)-(1150,47)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1161
      expression: "field == Calendar.AM_PM"
      range: "(1161,36)-(1161,58)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "round"
    sourceCodeSignature: "Date round(final Object date, final int field)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.lang.Object"
    - name: "field"
      type: "int"
    instructionFingerprint: "EB7FAC838977C67EBE986A6D18AE3204"
  paths:
  - testPathName: "round2WhenDateInstanceOfDate"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "round(date,field):date2"
    - type: "RESULT"
      name: "result"
      valueUuid: "date2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    branches:
    - lineNumber: 1450
      expression: "date instanceof Date"
      range: "(1450,13)-(1450,32)"
      evaluatedAs: true
  - testPathName: "round2WhenDateInstanceOfCalendar"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "round(date,field):calendar"
    - type: "RESULT"
      name: "result"
      valueUuid: "date2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.getTime() : java.util.Date"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    branches:
    - lineNumber: 1450
      expression: "date instanceof Date"
      range: "(1450,13)-(1450,32)"
      evaluatedAs: false
    - lineNumber: 1453
      expression: "date instanceof Calendar"
      range: "(1453,13)-(1453,36)"
      evaluatedAs: true
  - testPathName: "round2WhenDateNotInstanceOfCalendarThrowsClassCastException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "classCastException"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "date"
      nameForMock: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ClassCastException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not round date"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.ClassCastException"
      uuid: "classCastException"
    branches:
    - lineNumber: 1450
      expression: "date instanceof Date"
      range: "(1450,13)-(1450,32)"
      evaluatedAs: false
    - lineNumber: 1453
      expression: "date instanceof Calendar"
      range: "(1453,13)-(1453,36)"
      evaluatedAs: false
- method:
    name: "setDays"
    sourceCodeSignature: "Date setDays(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "A8D50EBA82859C0C7A9612EB8759BCBD"
  paths:
  - testPathName: "setDaysTest"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(date);"
      lineNumber: 1476
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "setHours"
    sourceCodeSignature: "Date setHours(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "FBA73DD8091F462C3B396AD2FD9DE5E0"
  paths:
  - testPathName: "setHoursTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "setMilliseconds"
    sourceCodeSignature: "Date setMilliseconds(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "564BB5F8037ED04E9C5B596C9A334BD7"
  paths:
  - testPathName: "setMillisecondsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "setMinutes"
    sourceCodeSignature: "Date setMinutes(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "18134D3B274F4F832541D3778403E11E"
  paths:
  - testPathName: "setMinutesTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "setMonths"
    sourceCodeSignature: "Date setMonths(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "34EC287537DA289B5BF1F5F6754BB947"
  paths:
  - testPathName: "setMonthsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "setSeconds"
    sourceCodeSignature: "Date setSeconds(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "BC08C2B591AEBF45D0D233492F5312F7"
  paths:
  - testPathName: "setSecondsTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "setYears"
    sourceCodeSignature: "Date setYears(final Date date, final int amount)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "amount"
      type: "int"
    instructionFingerprint: "1E42C5224547E744ED36C00AA5BA9BB2"
  paths:
  - testPathName: "setYearsTest"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "amount"
      valueUuid: "amount"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(date);"
      lineNumber: 1476
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "amount"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "toCalendar"
    sourceCodeSignature: "Calendar toCalendar(final Date date)"
    returnType: "java.util.Calendar"
    parameters:
    - name: "date"
      type: "java.util.Date"
    instructionFingerprint: "A2B37B5AA921EAA13001857541EF36EF"
  paths:
  - testPathName: "toCalendarTest"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "RESULT"
      name: "result"
      valueUuid: "calendar"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
- method:
    name: "toCalendar"
    sourceCodeSignature: "Calendar toCalendar(final Date date, final TimeZone tz)"
    returnType: "java.util.Calendar"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "tz"
      type: "java.util.TimeZone"
    instructionFingerprint: "8E92A757191B09C4E88FD928F9E927EB"
  paths:
  - testPathName: "toCalendar1Test"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "tz"
      valueUuid: "tz"
    - type: "RESULT"
      name: "result"
      valueUuid: "calendar"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.TimeZone"
        method: "getDefault"
        methodParameters: []
      valueType: "java.util.TimeZone"
      uuid: "tz"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters:
        - value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.util.TimeZone"
              method: "getDefault"
              methodParameters: []
            valueType: "java.util.TimeZone"
            uuid: "tz"
      valueType: "java.util.Calendar"
      uuid: "calendar"
- method:
    name: "truncate"
    sourceCodeSignature: "Calendar truncate(final Calendar date, final int field)"
    returnType: "java.util.Calendar"
    parameters:
    - name: "date"
      type: "java.util.Calendar"
    - name: "field"
      type: "int"
    instructionFingerprint: "7281BC4BB8831D4F824A65C6097215DA"
  paths:
  - testPathName: "truncateWhenValGetCalendarYEARGreaterThan280000000ThrowsArithmeticException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "arithmeticException"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ArithmeticException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Calendar value too large for accurate calculations"
            valueType: "java.lang.String"
            uuid: "s"
      valueType: "java.lang.ArithmeticException"
      uuid: "arithmeticException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncateWhenFieldEqualsCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "objectNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "field"
    - sapientType: "NOT_NULL"
      valueType: "java.util.Calendar"
      uuid: "objectNotNull"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncateWhenModTypeNotEqualsModifyTypeROUND"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "object"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncateWhenModTypeNotEqualsModifyTypeCEILINGAndModTypeNotEqualsModifyTypeROUND"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.clone() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "object"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "truncate"
    sourceCodeSignature: "Date truncate(final Date date, final int field)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.util.Date"
    - name: "field"
      type: "int"
    instructionFingerprint: "D5CF3BFD4246359A356D1502FD1E79B4"
  paths:
  - testPathName: "truncate1WhenFieldEqualsCalendarMILLISECOND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 14
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date3"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: true
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncate1WhenModTypeNotEqualsModifyTypeROUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 13
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date4"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncate1WhenOffsetEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 3
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The field 3 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncate1WhenModTypeNotEqualsModifyTypeCEILINGAndModTypeNotEqualsModifyTypeROUND"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "date4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 12
      valueType: "int"
      uuid: "field"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Date"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.Calendar"
            method: "getInstance"
            methodParameters: []
          valueType: "java.util.Calendar"
          uuid: "calendar"
        methodParameters: []
        methodName: "getTime"
      valueType: "java.util.Date"
      uuid: "date4"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = default"
      range: "(1214,17)-(1214,23)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.CEILING"
      range: "(1149,25)-(1149,53)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1149
      expression: "modType == ModifyType.ROUND"
      range: "(1149,58)-(1149,84)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncate1WhenOffsetNotGreaterThanMaxMinusMinDividedBy2AndOffsetEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1001
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The field 1001 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = Calendar.AM_PM"
      range: "(1202,22)-(1202,35)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1187
      expression: "aField[0] == Calendar.DATE"
      range: "(1187,25)-(1187,50)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
  - testPathName: "truncate1WhenNotOffsetSetAndOffsetNotGreaterThanMaxMinusMinDividedBy2AndOffsetEquals0ThrowsIllegalArgumentException"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "illegalArgumentException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "c.setTime(Objects.requireNonNull(date, \\\"date\\\"));"
      lineNumber: 1601
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: c - Method: setTime"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 9
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The field 9 is not supported"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
    branches:
    - lineNumber: 1095
      expression: "val.get(Calendar.YEAR) > 280000000"
      range: "(1095,13)-(1095,46)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1099
      expression: "field == Calendar.MILLISECOND"
      range: "(1099,13)-(1099,41)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1115
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1115,13)-(1115,42)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1118
      expression: "field == Calendar.SECOND"
      range: "(1118,13)-(1118,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "!done"
      range: "(1124,13)-(1124,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1124
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1124,23)-(1124,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1127
      expression: "field == Calendar.MINUTE"
      range: "(1127,13)-(1127,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "!done"
      range: "(1133,13)-(1133,17)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1133
      expression: "ModifyType.TRUNCATE == modType"
      range: "(1133,23)-(1133,52)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1138
      expression: "date.getTime() != time"
      range: "(1138,13)-(1138,34)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1145
      expression: "for-each(fields)"
      range: "(1145,35)-(1145,40)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1146
      expression: "for-each(aField)"
      range: "(1146,38)-(1146,43)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1147
      expression: "element == field"
      range: "(1147,21)-(1147,36)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1185
      expression: "switch(field) = SEMI_MONTH"
      range: "(1186,22)-(1186,31)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1203
      expression: "aField[0] == Calendar.HOUR_OF_DAY"
      range: "(1203,25)-(1203,57)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1217
      expression: "!offsetSet"
      range: "(1217,17)-(1217,26)"
      evaluatedAs: true
      internalMethodName: "modify"
    - lineNumber: 1223
      expression: "offset > ((max - min) / 2)"
      range: "(1223,27)-(1223,52)"
      evaluatedAs: false
      internalMethodName: "modify"
    - lineNumber: 1226
      expression: "offset != 0"
      range: "(1226,17)-(1226,27)"
      evaluatedAs: false
      internalMethodName: "modify"
    mockedStaticClassesWithCallRealMethods:
    - "org.apache.commons.lang3.time.DateUtils"
- method:
    name: "truncate"
    sourceCodeSignature: "Date truncate(final Object date, final int field)"
    returnType: "java.util.Date"
    parameters:
    - name: "date"
      type: "java.lang.Object"
    - name: "field"
      type: "int"
    instructionFingerprint: "B583E54C8D26A233B766DCC8CFBAA5C9"
  paths:
  - testPathName: "truncate2WhenDateInstanceOfDate"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(date,field):date2"
    - type: "RESULT"
      name: "result"
      valueUuid: "date2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    branches:
    - lineNumber: 1675
      expression: "date instanceof Date"
      range: "(1675,13)-(1675,32)"
      evaluatedAs: true
  - testPathName: "truncate2WhenDateInstanceOfCalendar"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(date,field):calendar"
    - type: "RESULT"
      name: "result"
      valueUuid: "date2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.getTime() : java.util.Date"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    branches:
    - lineNumber: 1675
      expression: "date instanceof Date"
      range: "(1675,13)-(1675,32)"
      evaluatedAs: false
    - lineNumber: 1678
      expression: "date instanceof Calendar"
      range: "(1678,13)-(1678,36)"
      evaluatedAs: true
  - testPathName: "truncate2WhenDateNotInstanceOfCalendarThrowsClassCastException"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date"
      valueUuid: "date"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "RESULT"
      name: "result"
      valueUuid: "classCastException"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "date"
      nameForMock: "date"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.ClassCastException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not truncate date"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.ClassCastException"
      uuid: "classCastException"
    branches:
    - lineNumber: 1675
      expression: "date instanceof Date"
      range: "(1675,13)-(1675,32)"
      evaluatedAs: false
    - lineNumber: 1678
      expression: "date instanceof Calendar"
      range: "(1678,13)-(1678,36)"
      evaluatedAs: false
- method:
    name: "truncatedCompareTo"
    sourceCodeSignature: "int truncatedCompareTo(final Calendar cal1, final Calendar\
      \ cal2, final int field)"
    returnType: "int"
    parameters:
    - name: "cal1"
      type: "java.util.Calendar"
    - name: "cal2"
      type: "java.util.Calendar"
    - name: "field"
      type: "int"
    instructionFingerprint: "FDD0C1BB9983F2B92E69A95BCA5C8EA6"
  paths:
  - testPathName: "truncatedCompareToTest"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(cal1,field):calendar"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(cal2,field):calendar2"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Calendar.compareTo(java.util.Calendar)\
        \ : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "calendar2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
- method:
    name: "truncatedCompareTo"
    sourceCodeSignature: "int truncatedCompareTo(final Date date1, final Date date2,\
      \ final int field)"
    returnType: "int"
    parameters:
    - name: "date1"
      type: "java.util.Date"
    - name: "date2"
      type: "java.util.Date"
    - name: "field"
      type: "int"
    instructionFingerprint: "78C6AD89FA6904AB69E80C8FAF409F43"
  paths:
  - testPathName: "truncatedCompareTo1Test"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "date1"
      valueUuid: "date1"
    - type: "INPUT"
      name: "date2"
      valueUuid: "date2"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(date1,field):date"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncate(date2,field):date3"
    - type: "RESULT"
      name: "result"
      valueUuid: "int1"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Date.compareTo(java.util.Date) : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date3"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
- method:
    name: "truncatedEquals"
    sourceCodeSignature: "boolean truncatedEquals(final Calendar cal1, final Calendar\
      \ cal2, final int field)"
    returnType: "boolean"
    parameters:
    - name: "cal1"
      type: "java.util.Calendar"
    - name: "cal2"
      type: "java.util.Calendar"
    - name: "field"
      type: "int"
    instructionFingerprint: "DAF47594F27A5CBA5B2F5FCE559706F8"
  paths:
  - testPathName: "truncatedEqualsWhenTruncatedCompareToCal1Cal2FieldEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncatedCompareTo(cal1,cal2,field):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1738
      expression: "truncatedCompareTo(cal1, cal2, field) == 0"
      range: "(1738,16)-(1738,57)"
      evaluatedAs: true
  - testPathName: "truncatedEqualsWhenTruncatedCompareToCal1Cal2FieldNotEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "cal1"
      valueUuid: "cal1"
    - type: "INPUT"
      name: "cal2"
      valueUuid: "cal2"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncatedCompareTo(cal1,cal2,field):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal1"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.Calendar"
        method: "getInstance"
        methodParameters: []
      valueType: "java.util.Calendar"
      uuid: "cal2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1738
      expression: "truncatedCompareTo(cal1, cal2, field) == 0"
      range: "(1738,16)-(1738,57)"
      evaluatedAs: false
- method:
    name: "truncatedEquals"
    sourceCodeSignature: "boolean truncatedEquals(final Date date1, final Date date2,\
      \ final int field)"
    returnType: "boolean"
    parameters:
    - name: "date1"
      type: "java.util.Date"
    - name: "date2"
      type: "java.util.Date"
    - name: "field"
      type: "int"
    instructionFingerprint: "5E4C9E61C66544C00DC62AC2062D4B1A"
  paths:
  - testPathName: "truncatedEquals1WhenTruncatedCompareToDate1Date2FieldEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date1"
      valueUuid: "date1"
    - type: "INPUT"
      name: "date2"
      valueUuid: "date2"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncatedCompareTo(date1,date2,field):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1755
      expression: "truncatedCompareTo(date1, date2, field) == 0"
      range: "(1755,16)-(1755,59)"
      evaluatedAs: true
  - testPathName: "truncatedEquals1WhenTruncatedCompareToDate1Date2FieldNotEquals0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "date1"
      valueUuid: "date1"
    - type: "INPUT"
      name: "date2"
      valueUuid: "date2"
    - type: "INPUT"
      name: "field"
      valueUuid: "field"
    - type: "STATIC"
      name: "DateUtils.class"
      valueUuid: "DateUtils.class"
      methodExercised:
        expression: "truncatedCompareTo(date1,date2,field):int1"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Date"
        parameters: []
      valueType: "java.util.Date"
      uuid: "date2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.apache.commons.lang3.time.DateUtils"
      uuid: "DateUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
    branches:
    - lineNumber: 1755
      expression: "truncatedCompareTo(date1, date2, field) == 0"
      range: "(1755,16)-(1755,59)"
      evaluatedAs: false
